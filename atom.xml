<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Betterming</title>
  <icon>https://www.gravatar.com/avatar/8b270e34727df778402d99257198190e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://looby.coding.me/betterming/"/>
  <updated>2019-05-20T13:27:22.782Z</updated>
  <id>http://looby.coding.me/betterming/</id>
  
  <author>
    <name>Betterming</name>
    <email>2652214420@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chap1_LinkedList</title>
    <link href="http://looby.coding.me/betterming/post/60f57c72.html"/>
    <id>http://looby.coding.me/betterming/post/60f57c72.html</id>
    <published>2019-05-20T12:30:33.972Z</published>
    <updated>2019-05-20T13:27:22.782Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频：<a href="https://www.bilibili.com/video/av36288901" target="_blank" rel="noopener">https://www.bilibili.com/video/av36288901</a></p></blockquote><h1 id="第一节：链表"><a href="#第一节：链表" class="headerlink" title="第一节：链表"></a>第一节：链表</h1><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">int val;</span><br><span class="line">ListNode *next;</span><br><span class="line">ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h2><h3 id="例1-LeetCode-206-Reverse-Linked-List"><a href="#例1-LeetCode-206-Reverse-Linked-List" class="headerlink" title="例1. LeetCode 206. Reverse Linked List"></a>例1. LeetCode 206. Reverse Linked List</h3><blockquote><p>反转一个单链表。(不使用额外空间)<br>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><blockquote><p><strong>思路：头插法</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">ListNode *new_head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line">ListNode *next = head-&gt;next;</span><br><span class="line">head-&gt;next = new_head;</span><br><span class="line">new_head = head;</span><br><span class="line">head = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> new_head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = &amp;d;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">Solution solve;</span><br><span class="line">ListNode *head = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Before reverse:\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">head = solve.reverseList(&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"After reverse:\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例2：LeetCode-92-Reverse-Linked-List-II"><a href="#例2：LeetCode-92-Reverse-Linked-List-II" class="headerlink" title="例2：LeetCode 92. Reverse Linked List II"></a>例2：LeetCode 92. Reverse Linked List II</h3><blockquote><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。<br>说明:<br>1 ≤ m ≤ n ≤ 链表长度。</p></blockquote><blockquote><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4<br>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p></blockquote><blockquote><p><strong>思路：保存逆置段头节点前驱pre_head，逆置段尾节点modify_list_tail，然后进行连接</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> change_len = n - m + <span class="number">1</span>;</span><br><span class="line">ListNode *pre_head = <span class="literal">NULL</span>; <span class="comment">// 开始逆置节点的前驱</span></span><br><span class="line">ListNode *result = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (head &amp;&amp; --m) &#123;  <span class="comment">// head 向前移动m-1个位置，pre_head指向开始逆置节点的前驱</span></span><br><span class="line">pre_head = head;</span><br><span class="line">head = head-&gt;next;  <span class="comment">// head 指向开始逆置的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* modify_list_tail = head;  <span class="comment">// mlt指向当前的head，即逆置后链表尾</span></span><br><span class="line">ListNode* new_head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (head &amp;&amp; change_len) &#123;  <span class="comment">// 该部分和上面链表逆置一样，head最后指向n的后继</span></span><br><span class="line">ListNode* next = head-&gt;next; </span><br><span class="line">head-&gt;next = new_head;</span><br><span class="line">new_head = head;</span><br><span class="line">head = next;</span><br><span class="line">change_len--;</span><br><span class="line">&#125;</span><br><span class="line">modify_list_tail-&gt;next = head;</span><br><span class="line"><span class="keyword">if</span> (pre_head) &#123;  <span class="comment">// 如果pre_head不空，说明不是从第一个节点开始逆置的，空表明m=1；</span></span><br><span class="line">pre_head-&gt;next = new_head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;  </span><br><span class="line">result = new_head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = &amp;d;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">Solution solve;</span><br><span class="line">ListNode *head = solve.reverseBetween(&amp;a, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例3：LeetCode-160-Intersection-of-Two-LinkedLists"><a href="#例3：LeetCode-160-Intersection-of-Two-LinkedLists" class="headerlink" title="例3：LeetCode 160.Intersection of Two LinkedLists"></a>例3：LeetCode 160.Intersection of Two LinkedLists</h3><blockquote><p>编写一个程序，找到两个单链表相交的起始节点。<br>要求：不能破坏原来链表结构，链表没有环，时间复杂度O(n)，空间复杂度O(1)</p></blockquote><blockquote><p><strong>思路：用set容器/用较长的链表减去较短的链表，相同的部分同时遍历，第一个相同的点即为所求点。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  <span class="comment">// 用set容器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;ListNode*&gt; st;</span><br><span class="line"><span class="keyword">while</span> (headA) &#123;</span><br><span class="line">st.insert(headA);</span><br><span class="line">headA = headA-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (headB) &#123;</span><br><span class="line"><span class="keyword">if</span> (st.find(headB) != st.end()) &#123;</span><br><span class="line"><span class="keyword">return</span> headB;</span><br><span class="line">&#125;</span><br><span class="line">headB = headB-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_list_length</span><span class="params">(ListNode *head)</span> </span>&#123;  <span class="comment">// 求链表长度</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line">len++;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">forward_long_list</span><span class="params">(<span class="keyword">int</span> long_len, <span class="keyword">int</span> short_len, ListNode *head)</span> </span>&#123;  <span class="comment">// head指向相同长度部分</span></span><br><span class="line"><span class="keyword">int</span> delta = long_len - short_len;</span><br><span class="line"><span class="keyword">while</span> (head &amp;&amp; delta) &#123;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">delta--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> &#123;</span>  <span class="comment">// 用指针指向元素比较</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> list_A_len = get_list_length(headA);</span><br><span class="line"><span class="keyword">int</span> list_B_len = get_list_length(headB);</span><br><span class="line"><span class="keyword">if</span> (list_A_len &gt; list_B_len) &#123;</span><br><span class="line">headA = forward_long_list(list_A_len, list_B_len, headA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">headB = forward_long_list(list_B_len, list_A_len, headB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (headA &amp;&amp; headB) &#123;</span><br><span class="line"><span class="keyword">if</span> (headA == headB) &#123;</span><br><span class="line"><span class="keyword">return</span> headA;</span><br><span class="line">&#125;</span><br><span class="line">headA = headA-&gt;next;</span><br><span class="line">headB = headB-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a1</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">a2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b2</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b3</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c1</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c2</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c3</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">a1.next = &amp;a2;</span><br><span class="line">a2.next = &amp;c1;</span><br><span class="line">c1.next = &amp;c2;</span><br><span class="line">c2.next = &amp;c3;</span><br><span class="line">b1.next = &amp;b2;</span><br><span class="line">b2.next = &amp;b3;</span><br><span class="line">b3.next = &amp;c1;</span><br><span class="line"></span><br><span class="line">Solution1 solve;</span><br><span class="line">ListNode *result = solve.getIntersectionNode(&amp;a1, &amp;b1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result-&gt;val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例4：LeetCode-142-Linked-List-Cycle-II"><a href="#例4：LeetCode-142-Linked-List-Cycle-II" class="headerlink" title="例4：LeetCode 142. Linked List Cycle II"></a>例4：LeetCode 142. Linked List Cycle II</h3><blockquote><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。<br>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。<br>如果 pos 是 -1，则在该链表中没有环。<br>说明：不允许修改给定的链表。</p></blockquote><blockquote><p>示例 1：<br>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><blockquote><p><strong>思路</strong>：</p><ol><li>set容器</li><li>快慢指针：fast指针是slow指针速度的两倍，相遇时节点为meet，那么一个从头节点出发，一个从meet出发，相遇时即为环开始时位置。</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;ListNode *&gt; node_set;</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="keyword">if</span> (node_set.find(head) != node_set.end()) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">node_set.insert(head);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">ListNode* slow = head;</span><br><span class="line">ListNode* fast = head;</span><br><span class="line">ListNode* meet = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (fast) &#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!fast) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">meet = fast;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (meet == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 如果没有相遇，表明没有环</span></span><br><span class="line"><span class="keyword">while</span> (meet &amp;&amp; head) &#123;</span><br><span class="line"><span class="keyword">if</span> (head == meet) <span class="keyword">return</span> head;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">meet = meet-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">f</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = &amp;d;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">e.next = &amp;f;</span><br><span class="line">f.next = &amp;c;</span><br><span class="line">    <span class="comment">// Solution solve;</span></span><br><span class="line">Solution1 solve;</span><br><span class="line">ListNode *node = solve.detectCycle(&amp;a);</span><br><span class="line"><span class="keyword">if</span> (node) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, node-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例5：LeetCode-86-Partition-List"><a href="#例5：LeetCode-86-Partition-List" class="headerlink" title="例5：LeetCode 86.Partition List"></a>例5：LeetCode 86.Partition List</h2><blockquote><p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。<br>你应当保留两个分区中每个节点的初始相对位置。</p></blockquote><blockquote><p>示例:<br>输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3<br>输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p></blockquote><blockquote><p><strong>思路：用俩个零时头节点将大于/小于x的节点放入这两个链表中</strong><br>ListNode less_head(0);<br>ListNode more_head(0);<br>ListNode<em> less_ptr = &less_head;<br>ListNode</em> more_ptr = &more_head;<br>less_ptr始终指向小链表尾部，动态移动<br>more_ptr始终指向大链表尾部，动态移动</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">less_head</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">more_head</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">ListNode* less_ptr = &amp;less_head;</span><br><span class="line">ListNode* more_ptr = &amp;more_head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;val &lt; x) &#123;</span><br><span class="line">less_ptr-&gt;next = head;</span><br><span class="line">less_ptr = less_ptr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">more_ptr-&gt;next = head;</span><br><span class="line">more_ptr = more_ptr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">less_ptr-&gt;next = more_head.next;</span><br><span class="line">more_ptr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> less_head.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">f</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = &amp;d;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">e.next = &amp;f;</span><br><span class="line">Solution solve;</span><br><span class="line">ListNode *head = solve.partition(&amp;a, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例6：LeetCode-138-Copy-List-with-Random-Pointer"><a href="#例6：LeetCode-138-Copy-List-with-Random-Pointer" class="headerlink" title="例6：LeetCode 138.Copy List with Random Pointer"></a>例6：LeetCode 138.Copy List with Random Pointer</h3><blockquote><p>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。<br>要求返回这个链表的深拷贝。</p></blockquote><blockquote><p><strong>思路：巧用数据结构</strong><br>map:将原地址与节点位置做映射 node_map<br>vector:根据节点位置将新链表节点存入其中 node_vec</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Node* next;</span><br><span class="line">Node* random;</span><br><span class="line"></span><br><span class="line">Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Node(<span class="keyword">int</span> _val, Node* _next, Node* _random) &#123;</span><br><span class="line">val = _val;</span><br><span class="line">next = _next;</span><br><span class="line">random = _random;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;Node*, <span class="keyword">int</span>&gt; node_map;  <span class="comment">// 将原地址与节点位置做映射</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Node *&gt; node_vec;   <span class="comment">// 根据节点位置将新链表节点存入其中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步：一个while循环将原节点地址与位置做映射，将新节点按照源节点位置push到node_vec中</span></span><br><span class="line">Node* ptr = head;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ptr) &#123;</span><br><span class="line">node_vec.push_back(<span class="keyword">new</span> Node(ptr-&gt;val));</span><br><span class="line">node_map[ptr] = i;</span><br><span class="line">ptr = ptr-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">node_vec.push_back(<span class="number">0</span>);  <span class="comment">// 链表最后一个节点的next为NULL；</span></span><br><span class="line">ptr = head;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ptr)</span><br><span class="line">&#123;</span><br><span class="line">node_vec[i]-&gt;next = node_vec[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;random) &#123;</span><br><span class="line"><span class="keyword">int</span> id = node_map[ptr-&gt;random];</span><br><span class="line">node_vec[i]-&gt;random = node_vec[id];</span><br><span class="line">&#125;</span><br><span class="line">ptr = ptr-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node_vec[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">RandomListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">RandomListNode <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">RandomListNode <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">RandomListNode <span class="title">d</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">RandomListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = &amp;d;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">a.random = &amp;c;</span><br><span class="line">b.random = &amp;d;</span><br><span class="line">c.random = &amp;c;</span><br><span class="line">e.random = &amp;d;</span><br><span class="line">Solution solve;</span><br><span class="line">RandomListNode *head = solve.copyRandomList(&amp;a);</span><br><span class="line"><span class="keyword">while</span>(head)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"label = %d "</span>, head-&gt;label);</span><br><span class="line"><span class="keyword">if</span> (head-&gt;random)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"rand = %d\n"</span>, head-&gt;random-&gt;label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"rand = NULL\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例7：LeetCode-21-Merge-Two-Sorted-Lists"><a href="#例7：LeetCode-21-Merge-Two-Sorted-Lists" class="headerlink" title="例7：LeetCode 21.Merge Two Sorted Lists"></a>例7：LeetCode 21.Merge Two Sorted Lists</h3><blockquote><p>将两个有序链表合并为一个新的有序链表并返回。<br>新链表是通过拼接给定的两个链表的所有节点组成的。</p></blockquote><blockquote><p>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><blockquote><p><strong>思路：很简单，比较两个链表节点值大小，小的先放，大的后放。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">temp_head</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">ListNode* pre = &amp;temp_head;</span><br><span class="line"><span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line"><span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">pre-&gt;next = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre-&gt;next = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l1) &#123;</span><br><span class="line">pre-&gt;next = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l2) &#123;</span><br><span class="line">pre-&gt;next = l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp_head.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">f</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">e.next = &amp;f;</span><br><span class="line">Solution solve;</span><br><span class="line">ListNode *head = solve.mergeTwoLists(&amp;a, &amp;d);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例8：LeetCode-23-Merge-k-Sorted-Lists"><a href="#例8：LeetCode-23-Merge-k-Sorted-Lists" class="headerlink" title="例8：LeetCode 23.Merge k Sorted Lists"></a>例8：LeetCode 23.Merge k Sorted Lists</h3><blockquote><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度.</p></blockquote><blockquote><p>示例:<br>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">1-&gt;4-&gt;5,</span><br><span class="line">1-&gt;3-&gt;4,</span><br><span class="line">2-&gt;6</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><blockquote><p><strong>思路：</strong></p><ol><li>k个链表按照次序合并k-1次，O(n*k^2)</li><li>将k*n个节点放入vector中，再排序，O(knlog(kn))</li><li>对k个链表分治，两两进行合并，O(knlogk)</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">temp_head</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">ListNode* pre = &amp;temp_head;</span><br><span class="line"><span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line"><span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">pre-&gt;next = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre-&gt;next = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l1) &#123;</span><br><span class="line">pre-&gt;next = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l2) &#123;</span><br><span class="line">pre-&gt;next = l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp_head.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> ListNode* a, <span class="keyword">const</span> ListNode* b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-&gt;val &lt; b-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;ListNode*&gt; node_vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">ListNode *head = lists[i];</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line">node_vec.push_back(head);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node_vec.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">sort(node_vec.begin(), node_vec.end(), cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; node_vec.size(); i++) &#123;</span><br><span class="line">node_vec[i - <span class="number">1</span>]-&gt;next = node_vec[i];</span><br><span class="line">&#125;</span><br><span class="line">node_vec[node_vec.size() - <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> node_vec[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lists.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (lists.size() == <span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (lists.size() == <span class="number">2</span>) <span class="keyword">return</span> mergeTwoLists(lists[<span class="number">0</span>], lists[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> mid = lists.size() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;ListNode*&gt; sub1_lists;</span><br><span class="line"><span class="built_in">vector</span>&lt;ListNode*&gt; sub2_lists;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mid; i++) &#123;</span><br><span class="line">sub1_lists.push_back(lists[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt; lists.size(); i++) &#123;</span><br><span class="line">sub2_lists.push_back(lists[i]);</span><br><span class="line">&#125;</span><br><span class="line">ListNode *l1 = mergeKLists(sub1_lists);</span><br><span class="line">ListNode *l2 = mergeKLists(sub2_lists);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ListNode <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">b</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">c</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">d</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">e</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">f</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">g</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">ListNode <span class="title">h</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">d.next = &amp;e;</span><br><span class="line">e.next = &amp;f;</span><br><span class="line">g.next = &amp;h;</span><br><span class="line"><span class="comment">// Solution solve;</span></span><br><span class="line">Solution1 solve;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ListNode *&gt; lists;</span><br><span class="line">lists.push_back(&amp;a);</span><br><span class="line">lists.push_back(&amp;d);</span><br><span class="line">lists.push_back(&amp;g);</span><br><span class="line">ListNode *head = solve.mergeKLists(lists);</span><br><span class="line"><span class="keyword">while</span> (head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;val);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/av36288901&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av36288901&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一节：链表&quot;&gt;&lt;a href=&quot;#第一节：链表&quot; class=&quot;headerlink&quot; title=&quot;第一节：链表&quot;&gt;&lt;/a&gt;第一节：链表&lt;/h1&gt;&lt;h2 id=&quot;1-数据结构&quot;&gt;&lt;a href=&quot;#1-数据结构&quot; class=&quot;headerlink&quot; title=&quot;1. 数据结构&quot;&gt;&lt;/a&gt;1. 数据结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ListNode *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ListNode(int x) : val(x), next(NULL) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://looby.coding.me/betterming/categories/LeetCode/"/>
    
    
      <category term="LinkedList" scheme="http://looby.coding.me/betterming/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>opencv实现图片二值化</title>
    <link href="http://looby.coding.me/betterming/post/b7214e7b.html"/>
    <id>http://looby.coding.me/betterming/post/b7214e7b.html</id>
    <published>2019-02-13T14:55:00.000Z</published>
    <updated>2019-02-13T15:27:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用openCV来实现图像二值化，主要利用的函数有 cv2.threshold，cv2.adaptiveThreshold 等，具体内容如下：<br><a id="more"></a></p><h2 id="1-代码及其解析"><a href="#1-代码及其解析" class="headerlink" title="1. 代码及其解析"></a>1. 代码及其解析</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二值图像就是将灰度图转化成黑白图，没有灰，在一个值之前为黑，之后为白</span></span><br><span class="line"><span class="comment"># 有全局和局部两种</span></span><br><span class="line"><span class="comment"># 在使用全局阈值时，我们就是随便给了一个数来做阈值，那我们怎么知道我们选取的这个数的好坏呢？答案就是不停的尝试。</span></span><br><span class="line"><span class="comment"># 如果是一副双峰图像（简 单来说双峰图像是指图像直方图中存在两个峰）呢？</span></span><br><span class="line"><span class="comment"># 我们岂不是应该在两个峰之间的峰谷选一个值作为阈值？这就是 Otsu 二值化要做的。</span></span><br><span class="line"><span class="comment"># 简单来说就是对 一副双峰图像自动根据其直方图计算出一个阈值。</span></span><br><span class="line"><span class="comment"># （对于非双峰图像，这种方法 得到的结果可能会不理想）。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threshold_demo</span><span class="params">(image)</span>:</span></span><br><span class="line">    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个函数的第一个参数就是原图像，原图像应该是灰度图。</span></span><br><span class="line">    <span class="comment"># 第二个参数就是用来对像素值进行分类的阈值。</span></span><br><span class="line">    <span class="comment"># 第三个参数就是当像素值高于（有时是小于）阈值时应该被赋予的新的像素值</span></span><br><span class="line">    <span class="comment"># 第四个参数来决定阈值方法，见threshold_simple()</span></span><br><span class="line">    <span class="comment"># ret, binary = cv.threshold(gray, 127, 255, cv.THRESH_BINARY)</span></span><br><span class="line">    ret, binary = cv.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY | cv.THRESH_OTSU)</span><br><span class="line">    print(<span class="string">"threshold value: %s"</span>%ret)</span><br><span class="line">    cv.imshow(<span class="string">"threshold_demo"</span>, binary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threshold_simple</span><span class="params">(image)</span>:</span></span><br><span class="line">    img = cv.cvtColor(image, cv.COLOR_BGR2GRAY)</span><br><span class="line">    ret, thresh1 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    ret, thresh2 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY_INV)</span><br><span class="line">    ret, thresh3 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_TRUNC)</span><br><span class="line">    ret, thresh4 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_TOZERO)</span><br><span class="line">    ret, thresh5 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_TOZERO_INV)</span><br><span class="line">    titles = [<span class="string">'Original Image'</span>, <span class="string">'BINARY'</span>, <span class="string">'BINARY_INV'</span>, <span class="string">'TRUNC'</span>, <span class="string">'TOZERO'</span>, <span class="string">'TOZERO_INV'</span>]</span><br><span class="line">    images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  <span class="comment"># 将图像按2x3铺开</span></span><br><span class="line">        plt.title(titles[i])</span><br><span class="line">        plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前面的部分我们使用是全局阈值，整幅图像采用同一个数作为阈值。</span></span><br><span class="line"><span class="comment"># 当时这种方法并不适应与所有情况，尤其是当同一幅图像上的不同部分的具有不同亮度时。</span></span><br><span class="line"><span class="comment"># 这种情况下我们需要采用自适应阈值。此时的阈值是根据图像上的 每一个小区域计算与其对应的阈值。</span></span><br><span class="line"><span class="comment"># 因此在同一幅图像上的不同区域采用的是不同的阈值，从而使我们能在亮度不同的情况下得到更好的结果。</span></span><br><span class="line"><span class="comment"># 这种方法需要我们指定三个参数，返回值只有一个</span></span><br><span class="line"><span class="comment"># _MEAN_C：阈值取自相邻区域的平均值,_GAUSSIAN_C：阈值取值相邻区域 的加权和，权重为一个高斯窗口。</span></span><br><span class="line"><span class="comment"># Block Size - 邻域大小（用来计算阈值的区域大小）。</span></span><br><span class="line"><span class="comment"># C - 这就是是一个常数，阈值就等于的平均值或者加权平均值减去这个常数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threshold_adaptive</span><span class="params">(image)</span>:</span></span><br><span class="line">    img = cv.cvtColor(image, cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 中值滤波</span></span><br><span class="line">    img = cv.medianBlur(img,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    ret, th1 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    <span class="comment"># 11 为 Block size, 2 为 C 值</span></span><br><span class="line">    th2 = cv.adaptiveThreshold(img, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line">    th3 = cv.adaptiveThreshold(img,<span class="number">255</span>,cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    titles = [<span class="string">'Original Image'</span>, <span class="string">'Global Threshold (v = 127)'</span>, <span class="string">'Adaptive Mean Threshold'</span>, <span class="string">'Adaptive Gaussian Threshold'</span>]</span><br><span class="line">    images = [img, th1, th2, th3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)</span><br><span class="line">        plt.title(titles[i])</span><br><span class="line">        plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threshold_custom</span><span class="params">(image)</span>:</span></span><br><span class="line">    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)</span><br><span class="line">    h, w = gray.shape[:<span class="number">2</span>]</span><br><span class="line">    m = np.reshape(gray, [<span class="number">1</span>, w*h])</span><br><span class="line">    mean = m.sum() / (w*h)  <span class="comment"># 求出整个灰度图像的平均值</span></span><br><span class="line">    print(<span class="string">"mean:"</span>, mean)</span><br><span class="line">    ret, binary = cv.threshold(gray, mean, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    cv.imshow(<span class="string">"threshold_custom"</span>, binary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = cv.imread(<span class="string">"02.jpg"</span>)</span><br><span class="line">    <span class="comment"># threshold_demo(img)</span></span><br><span class="line">    <span class="comment"># threshold_simple(img)</span></span><br><span class="line">    <span class="comment"># threshold_adaptive(img)</span></span><br><span class="line">    threshold_custom(img)</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)  <span class="comment"># 等有键输入或者1000ms后自动将窗口消除，0表示只用键输入结束窗口</span></span><br><span class="line">    cv.destroyAllWindows()  <span class="comment"># 关闭所有窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="2-结果如下："><a href="#2-结果如下：" class="headerlink" title="2. 结果如下："></a>2. 结果如下：</h2><ol><li><p>threshold_demo<br><a href="https://miao.su/image/HIRkk" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/13/threshold_demo8ae7c.png" alt="threshold_demo8ae7c.png"></a></p></li><li><p>threshold_simple<br><a href="https://miao.su/image/HIF0n" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/13/figure_1fe3c1.png" alt="figure_1fe3c1.png"></a></p></li><li><p>threshold_adaptive<br><a href="https://miao.su/image/HIBqL" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/13/figure_293f46.png" alt="figure_293f46.png"></a></p></li><li><p>threshold_custom<br><a href="https://miao.su/image/HIGLf" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/13/thr7be90.png" alt="thr7be90.png"></a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用openCV来实现图像二值化，主要利用的函数有 cv2.threshold，cv2.adaptiveThreshold 等，具体内容如下：&lt;br&gt;
    
    </summary>
    
      <category term="CV" scheme="http://looby.coding.me/betterming/categories/CV/"/>
    
    
      <category term="openCV" scheme="http://looby.coding.me/betterming/tags/openCV/"/>
    
      <category term="图像二值化" scheme="http://looby.coding.me/betterming/tags/%E5%9B%BE%E5%83%8F%E4%BA%8C%E5%80%BC%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo中文标题打不开博客</title>
    <link href="http://looby.coding.me/betterming/post/960616a.html"/>
    <id>http://looby.coding.me/betterming/post/960616a.html</id>
    <published>2019-02-06T13:37:00.000Z</published>
    <updated>2019-02-13T14:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>hexo 中文博客打不开问题</strong><br><a id="more"></a><br>&emsp;&emsp;Hexo默认的链接是<a href="http://betterming.github.io/2019/02/06/HelloWorld" target="_blank" rel="noopener">http://betterming.github.io/2019/02/06/HelloWorld</a> 类型的，在站点目录下的配置_config.yml里的配置:permalink: :year/:month/:day/:title/。这种配置的缺点就是一般文件名是中文，导致url链接里有中文出现，这会造成中文博客可能打不开，也不利于seo。这里提供一种解决方案。</p><p>step1:安装hexo-abbrlink这个插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></p><p>step2:修改站点配置文件_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">permalink: post/:abbrlink.html</span><br><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure></p><p><strong>参考链接</strong></p><ol><li><a href="https://blog.csdn.net/yanzi1225627/article/details/77761488" target="_blank" rel="noopener">https://blog.csdn.net/yanzi1225627/article/details/77761488</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;hexo 中文博客打不开问题&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://looby.coding.me/betterming/categories/Technique/"/>
    
    
      <category term="Hexo" scheme="http://looby.coding.me/betterming/tags/Hexo/"/>
    
      <category term="permalink" scheme="http://looby.coding.me/betterming/tags/permalink/"/>
    
  </entry>
  
  <entry>
    <title>海量数据处理</title>
    <link href="http://looby.coding.me/betterming/post/73dedef0.html"/>
    <id>http://looby.coding.me/betterming/post/73dedef0.html</id>
    <published>2019-02-06T10:42:00.000Z</published>
    <updated>2019-02-06T13:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-海量数据处理的案例类型"><a href="#1-海量数据处理的案例类型" class="headerlink" title="1. 海量数据处理的案例类型"></a>1. 海量数据处理的案例类型</h1><p><strong>查询</strong>：</p><ul><li>关于重复项的处理：（海量）数据的判重、取重、去重；</li><li>统计： （海量）数据的出现频度；<br><strong>排序</strong>：</li><li>（海量）数据的排序；</li><li>（海量）数据的前K个最大（小）数；<a id="more"></a><strong>解题策略中的关键问题</strong>:<blockquote><p>1、存储什么？如何存储一组数据；（选择数据结构）<br>2、如何解决问题？（选择算法）</p></blockquote></li></ul><h1 id="2-可以采用的数据结构"><a href="#2-可以采用的数据结构" class="headerlink" title="2. 可以采用的数据结构"></a>2. 可以采用的数据结构</h1><blockquote><p>线性结构：</p><ul><li>顺序表：一般的顺序表,字符串,BitMap</li><li>链表：</li></ul><p>树状结构：</p><ul><li>二叉树：BST、红黑树</li><li>B树</li><li>Trie树</li></ul><p>扩展的结构：hash表,B+树</p></blockquote><h1 id="3-可以采用的算法"><a href="#3-可以采用的算法" class="headerlink" title="3. 可以采用的算法"></a>3. 可以采用的算法</h1><h2 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h2><ul><li>应用场景：在某数据集合中查找指定的目标项.(隐含：待查找的目标项必须是已知的！)</li><li>基于Hash表的查找：</li><li>蛮力查找（顺序查找）：线性表</li><li>基于有序表的二分查找：有序的顺序表</li><li>字符串的查找：朴素查找、KMP算法、BM算</li><li>基于树的查找：遍历<ul><li>二叉查找树BST：中序遍历</li><li>Trie树：层次遍历</li><li>基于红黑树：STL SET,STL Map</li></ul></li></ul><h2 id="3-2-排序"><a href="#3-2-排序" class="headerlink" title="3.2 排序"></a>3.2 排序</h2><ul><li>基于比较操作的排序算法：平均时间复杂度≥O(Nlog2N)<ul><li>交换排序：两两比较待排序记录的关键字，如果逆序就进行交换，直到所有记录都排好序为止。</li><li>冒泡排序</li><li>快速排序（分区交换排序）</li></ul></li><li>选择排序（Selection Sort）的基本思想是：不断从待排记录序列中选出关键字最小的记录放到已排序记录序列的后面，直到n个记录全部插入已排序记录序列中。<ul><li>简单选择排序</li><li>堆排序（树型选择排序）</li></ul></li><li>插入排序：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子表中的适当位置，直到全部记录插入完成为止。<ul><li>直接插入排序</li><li>折半插入排序</li><li>希尔排序</li></ul></li><li>应用场景：对于某顺序表，按照指定的KEY进行整体排序(隐含：待排序的集合已全部存储在内存中；且各条记录的KEY必须是已知的！)</li></ul><h1 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h1><h2 id="4-1-案例–统计"><a href="#4-1-案例–统计" class="headerlink" title="4.1 案例–统计"></a>4.1 案例–统计</h2><p><strong>案例</strong>：有一个1G大小的文件，该文件中每一行是一个单词，每个单词的大小不超过16个字节，内存限制大小是1M。统计各个单词的出现频率。<br><strong>分析</strong>：</p><blockquote><p>将1G文件划分为多个1M的文件；<br>每次只统计1M的文件中单词频度。</p></blockquote><p>(1) Q：如何统计1M的文件中单词频度？</p><ul><li>设计思路1：依次读入文件的每个单词，并查询在内存中是否存在与该单词匹配的项。若查询到匹配项，则意味着该单词重复出现了，因而只需更改该单词对应的计数值；否则，将该单词插入到内存对应的数据结构中。（基本操作为：查询和插入操作）</li><li>设计思路2：直接将文件中每个单词读入内存，然后对内存中的单词进行排序，最后进行词频统计。（基本操作为：排序、比较操作）</li></ul><p>(2) 假设单词文件大小F，假定每个单词的平均长度为le，那么单词数量为N=F/le。<br>现对单词频度进行统计，那么</p><ul><li>采用Trie树，结合设计思路1，平均性能为$O(N*le)$ ；</li><li>采用红黑树，结合设计思路1，平均性能为：$O(N*log2N)$；<ul><li>采用红黑树时，可直接利用STL中的map技术:STL map&lt;string,int&gt;</li></ul></li><li>采用hash表，结合设计思路1，平均性能为：O(N*每个槽上的线性表的平均长度)；<ul><li>采用hash表时，可直接利用STL中的hash_map技术:STL hash_map&lt;string,int&gt;</li></ul></li><li>采用线性结构，结合设计思路2。先排序，再相邻单词的相互比较来统计单词频度，平均性能为：$O(N*log_2N)+O(N)=O(N*log_2N)$。</li></ul><p>(3) 算法设计思路</p><blockquote><p><strong>思路1:双层桶划分+ trie树/hash表/红黑树</strong></p><ul><li>Step1：将1G的大文件划分为若干个小文件，每个小文件不超过1M；<br>利用Hash技术：读取文件F，对于每个词x，取hash(x)%5000，然后按照该值存到5000个小文件（记为F0,F1,…F4999）中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，直到分解得到的每个小文件Fi的大小都不超过1M。</li><li>Step2:对每个小文件Fi中的词的出现频率进行统计。<br>采用trie树/hash表。</li><li>Step3：合并各个小文件的统计结果。</li></ul></blockquote><blockquote><p><strong>思路2:采用云计算的架构，MapReduce )(分布式处理：比如 hadoop)</strong></p><ul><li>MAP ：将1G的大文件划分为若干个小文件，每个小文件不超过1M；<ul><li>利用Hash技术：读取文件，对于每个词x，取hash(x)%5000，然后按照该值存到5000个小文件（记为F0,F1,…F4999）中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，直到分解得到的小文件的大小都不超过1M。</li></ul></li><li>Reduce:对每个小文件Fi中的词的出现频率进行统计，最后合并各个小文件的统计结果。<ul><li>采用trie树/hash表/红黑树，对每个小文件中的词的出现频率进行统计。</li></ul></li></ul></blockquote><blockquote><p><strong>思路3:线性结构+直接排序法</strong></p><ul><li>内存不能超过1M，而单词文件的大小为1G。因此采用顺序表存储单词文件，并利用外排序的方法来进行排序。采用归并排序，时间复杂度O(Nlog2N)。</li><li>排完序之后，再对已经有序的多个文件进行遍历，统计每个单词出现的次数，再次写入文件中。</li><li><strong>总结</strong>：<br>理论上的时间复杂度分析：归并排序的时间复杂度是O(Nlog2N)，而遍历线性表进行单词频度统计的时间复杂度是O(N)，因此该算法的总体时间复杂度就是O(Nlog2N)。<br>但是，实际上，采用归并排序进行外排序，每个单词需要I/O不止一次，而I/O操作属于耗时操作，因此该算法的实际时间开销的数量级远不止O(Nlog2N)</li></ul></blockquote><h2 id="4-2-案例–排序"><a href="#4-2-案例–排序" class="headerlink" title="4.2 案例–排序"></a>4.2 案例–排序</h2><p><strong>案例1</strong>：100w个数中找最大的前100个数。（假设内存开销无限制）</p><p>(1) <strong>算法设计思路1：采用局部淘汰法</strong></p><ul><li>选取前100个元素，并按降序进行排序，记为序列L。<br>依此扫描剩余的元素，并与排好序的100个元素中最小的元素比，如果比这个最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。</li><li>时间复杂度$T(n)=O(100*log_2100) +O((100w-100)*100)$。</li></ul><p>(2) <strong>算法设计思路2：利用堆排序</strong></p><ul><li>利用100w个数的前100个数构造一个小根堆；<br>遍历其他的数，分别与堆的根元素进行对比：若大于根，则用该元素替换旧根，作为堆的新根，重新维护保持堆的性质；否则，不处理。</li><li>时间复杂度:<br>$T(n)= O(100*log_2100) + O((100w-100)*log_2100)= O(100w*log_2100)$。</li></ul><p><strong>案例2</strong>：寻找热门查询：<br>&emsp;&emsp;搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。请你统计最热门的10个查询串，<strong>要求使用的内存不能超过1GB</strong>。 </p><blockquote><ol><li>请描述你解决这个问题的思路；</li><li>请给出主要的处理流程，算法，以及算法的复杂度。</li></ol></blockquote><p>(1) 问题分析：要统计最热门查询，首先就是要统计每个Query出现的次数，然后根据统计结果，找出Top 10。</p><ul><li>第一步：Query统计<br>设计思路1：顺序表+直接排序法<br>设计思路2：采用Hash表</li><li>第二步：找出Top 10</li></ul><p>(2) 设计思路</p><blockquote><p><strong>设计思路1：顺序表+直接排序法</strong></p></blockquote><ul><li>内存不能超过1G，而一千万条记录，每条记录是225Byte，很显然要占据2.55G内存。因此采用外排序的方法来进行排序（采用归并排序，时间复杂度O(Nlog2N)。</li><li>排完序之后我们再对已经有序的Query文件进行遍历，统计每个Query出现的次数，再次写入文件中。</li><li>总结：排序的时间复杂度是O(Nlog2N)，而遍历的时间复杂度是O(N)，因此该算法的总体时间复杂度就是O(Nlog2N)。</li></ul><blockquote><p><strong>设计思路2: 利用Hash Table</strong></p><ul><li>采用Hash Table。<ul><li>虽然有一千万个Query，但是由于重复度比较高，事实上只有300万的Query，而每个Query255Byte，因此我们可以考虑把他们都放进1GB内存中去。（3*106*255B&lt;1GB)</li><li>采用Hash Table绝对是我们优先的选择，因为Hash Table的查询速度非常的快，几乎是O(1)的时间复杂度。</li></ul></li><li>维护一个Key为Query字串，Value为该Query出现次数的Hash表，每次读取一个Query，如果该字串不在Hash表中，那么加入该字串，并且将Value值设为1；如果该字串在Hash表中，那么将该字串的计数加1即可。</li><li>T(n)=O(N*每个槽上的线性表的平均长度) 。</li><li>相比于设计思路1：在时间复杂度上提高了一个数量级，但不仅仅是时间复杂度上的优化，该方法只需要I/O数据文件一次，而设计思路1的I/O次数较多的，因此该算法比设计思路1在工程上有更好的可操作性。</li></ul></blockquote><ul><li>第二步：找出Top 10（按照Query的出现频度）<br><strong>设计思路1：内部排序</strong><br>时间复杂度$T(n)=nlog_2n$(三百万条记录可以放在1G内存中）<br><strong>设计思路2：采用局部淘汰法</strong><br>时间复杂度$T(n)=O(10*log_210) +O((n-10)*10)$。<br><strong>设计思路3：利用堆</strong><br>时间复杂度$T(n)= O(10*log_210) + O((n-10)*log_210)$。  </li></ul><h2 id="4-3-案例——关于重复项的处理"><a href="#4-3-案例——关于重复项的处理" class="headerlink" title="4.3. 案例——关于重复项的处理"></a>4.3. 案例——关于重复项的处理</h2><p><strong>案例1</strong>： A,B两个文件，各存放50亿条URL，每条URL占用64字节，内存限制是4GB，要求找出A,B文件中共同的URL。<br>(1) 方案1：分而治之+基于hash表的查找</p><ul><li>可以估计每个文件的大小为5G×64=320GB，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。<ul><li>遍历文件a，对每个url求取hash(url)%1000，然后根据所取得的值将url分别存储到1000个小文件（记为a0,a1,…,a999）中。这样每个小文件的大约为300M。</li><li>遍历文件b，采取和a相同的方式将url分别存储到1000小文件（记为b0,b1,…,b999）。这样处理后，所有可能相同的url都在对应的小文件（a0 vs..b0,a1 vs. b1,…,a999 vs. b999）中，不对应的小文件不可能有相同的url。</li></ul></li><li>分别计算出1000对小文件中相同的url，再进行汇总。<ul><li>采用Hash表，可以直接利用STL Hash_set。</li><li>对于每1对小文件(ai,bi)，把小文件ai的url存储到hash表中，然后遍历另一个小文件bi中的每个url，查询其是否在刚才构建的hash表中，如果是，那么就是共同的url。</li></ul></li></ul><p>(2) 方案2：若允许有一定的错误率，可采用Bloom filter,Bloom filter是BitMap的扩展。</p><ul><li><p>若直接采用BitMap。那么：可用内存4GB=4*1024*1024*1024*8b≈340亿bit。由于每条URL占用64字节，即每个URL对应的整数可以用log2(25664)bit=864bit&gt;340亿bit来描述。因而不能用BitMap。</p><blockquote><p>Bloom filter：通过极少的错误换取了存储空间的极大节省。将每条url使用Bloom filter映射为这340亿bit中的k个bit，并将这k个bit置为1。</p></blockquote></li><li><p>将文件a中的每条url使用Bloom filter映射为这340亿bit；然后依次读取文件b中的每条url，检查其Bloom filter映射的k比特是否都为1，如果是，那么该url应该是两个文件共同的url（注意：会有一定的错误率）。</p></li></ul><p><strong>案例2</strong>：2.5亿个整数中找出不重复的整数，内存空间不足以容纳这2.5亿个整数。 </p><p>(1) 方案1：假设2.5亿个整数的取值范围为[0,250000000)。那么，采用Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需0.5G bits，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。扫描结束后，查看bitmap，把对应位是01的整数输出即可。</p><p>(2) 方案2：也可采用与第1题类似的方法，先将大文件划分为小文件。然后在小文件中找出不重复的整数，并排序。最后进行归并，注意去除重复的元素。</p><p><strong>本文内容来自余老师上课PPT</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-海量数据处理的案例类型&quot;&gt;&lt;a href=&quot;#1-海量数据处理的案例类型&quot; class=&quot;headerlink&quot; title=&quot;1. 海量数据处理的案例类型&quot;&gt;&lt;/a&gt;1. 海量数据处理的案例类型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;查询&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于重复项的处理：（海量）数据的判重、取重、去重；&lt;/li&gt;
&lt;li&gt;统计： （海量）数据的出现频度；&lt;br&gt;&lt;strong&gt;排序&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;（海量）数据的排序；&lt;/li&gt;
&lt;li&gt;（海量）数据的前K个最大（小）数；
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Hash" scheme="http://looby.coding.me/betterming/tags/Hash/"/>
    
      <category term="BitMap" scheme="http://looby.coding.me/betterming/tags/BitMap/"/>
    
      <category term="Trie树" scheme="http://looby.coding.me/betterming/tags/Trie%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="http://looby.coding.me/betterming/post/c2a5fdc5.html"/>
    <id>http://looby.coding.me/betterming/post/c2a5fdc5.html</id>
    <published>2019-01-10T03:08:00.000Z</published>
    <updated>2019-05-19T13:13:52.856Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆排序过程及代码实现</strong><br><a id="more"></a></p><h2 id="1-堆排序概念"><a href="#1-堆排序概念" class="headerlink" title="1. 堆排序概念"></a>1. 堆排序概念</h2><p>堆是具有如下性质的二叉树：</p><blockquote><p>1）任何节点的值都≤（≥）其子节点的值，即 堆的根节点中存放最小（大）元素；<br>2）最多在两层上具有叶子节点，其中最底层的叶子节点尽可能的靠左分布。隐含：含有n 个节点的堆，所有节点到根节点的距离都不超 过log2n。（类似 完全二叉树）</p><ul><li>堆可以用数组来按序号存储，即从上到下，从左到右存储，按照层序遍历存储</li></ul></blockquote><p>堆排序概念：</p><blockquote><ul><li>树型选择排序</li><li>特点：T(n)=O(nlog2n)，实际运行时间比快速排序慢些; 是一种良好的通用排序算法，不存在最坏情况。（希尔排序也是一种良好的通用排序算法，T(n)=O(n1.25) ）</li><li>数据结构：堆——实质上是一棵二叉树；<br><strong>基本操作</strong>：siftup：当在堆的尾部插入新元素后，需重新获取堆性质。siftdown：用新元素替换堆中的旧根后，需重新获取堆性质。</li></ul></blockquote><h1 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h1><p>也是余老师布置的作业。请采用堆排序将关键字序列{3,2,1,4,5,6,7,10,9,8}排序，并写出各步的具体操作，并记录总的比较次数和总的交换次数。要求利用siftup函数创建初始大根堆，利用siftdown1函数依次提取根结点生成有序序列。<br>答：(1) 具体操作如下：</p><p><a href="https://miao.su/image/H1UXo" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/04/markdown-img-paste-201901101131369957011a.png" alt="markdown-img-paste-201901101131369957011a.png"></a></p><p>(2)代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">11</span>] = &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> up1=<span class="number">0</span>, up2=<span class="number">0</span>, down1=<span class="number">0</span>, down2=<span class="number">0</span>;<span class="comment">// 记录siftup比较、交换次数和siftdown比较交换次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, p;</span><br><span class="line">i = u;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">p = i/<span class="number">2</span>;</span><br><span class="line">up1++;</span><br><span class="line"><span class="keyword">if</span>(x[p] &gt;= x[i]) <span class="keyword">break</span>;</span><br><span class="line">swap(x[p], x[i]);</span><br><span class="line">up2++;</span><br><span class="line">i = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, c;</span><br><span class="line">i = l;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">c = <span class="number">2</span>*i;</span><br><span class="line"><span class="keyword">if</span>(c &gt; u) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c + <span class="number">1</span> &lt;= u)&#123;</span><br><span class="line">down1++;</span><br><span class="line"><span class="keyword">if</span>(x[c+<span class="number">1</span>] &gt; x[c]) c++;</span><br><span class="line">&#125;</span><br><span class="line">down1++;</span><br><span class="line"><span class="keyword">if</span>(x[i] &gt; x[c]) <span class="keyword">break</span>;</span><br><span class="line">swap(x[i], x[c]);</span><br><span class="line">down2++;</span><br><span class="line">i = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= <span class="number">10</span>; j++) siftup(j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"siftup后序列为：\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, x[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"siftup比较次数：%d\nsiftup交换次数：%d\n"</span>, up1, up2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">2</span>; i--) &#123;</span><br><span class="line">swap(x[<span class="number">1</span>], x[i]);</span><br><span class="line">siftdown1(<span class="number">1</span>, i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"堆排序后序列：\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, x[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"siftdown比较次数：%d\nsiftdown交换次数：%d\n"</span>, down1, down2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3) 结果如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">siftup后序列为：</span><br><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">siftup比较次数：<span class="number">18</span></span><br><span class="line">siftup交换次数：<span class="number">14</span></span><br><span class="line">堆排序后序列：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">siftdown比较次数：<span class="number">24</span></span><br><span class="line">siftdown交换次数：<span class="number">11</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;堆排序过程及代码实现&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="堆排序" scheme="http://looby.coding.me/betterming/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>AVL</title>
    <link href="http://looby.coding.me/betterming/post/1d92c98c.html"/>
    <id>http://looby.coding.me/betterming/post/1d92c98c.html</id>
    <published>2019-01-04T13:47:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>AVL树c++实现<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> // <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v, height; <span class="comment">// 当前节点子树的高度，本身为1</span></span><br><span class="line">node *lchild, *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个新节点，节点值为v</span></span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">newNode</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">node* Node = <span class="keyword">new</span> node;</span><br><span class="line">Node-&gt;height = <span class="number">1</span>;</span><br><span class="line">Node-&gt;v = v;</span><br><span class="line">Node-&gt;lchild = Node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> Node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得树的高度，即根节点所在子树高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> root-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取平衡因子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalanceFactor</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getHeight(root-&gt;lchild) - getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新节点root的高度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line">root-&gt;height = max(getHeight(root-&gt;lchild), getHeight(root-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AVL的基本操作：查找，插入，删除</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node* root, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Search Failed!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root-&gt;v == x) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, root-&gt;v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;v &gt; x) search(root-&gt;lchild, x);</span><br><span class="line"><span class="keyword">else</span> search(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">//R型，要左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftRotation</span><span class="params">(node* &amp;root)</span></span>&#123;</span><br><span class="line">node* temp = root-&gt;rchild;</span><br><span class="line">root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">temp-&gt;lchild = root;</span><br><span class="line">updateHeight(root);</span><br><span class="line">updateHeight(temp);</span><br><span class="line">root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//L型，要右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RightRotation</span><span class="params">(node* &amp;root)</span></span>&#123;</span><br><span class="line">node* temp = root-&gt;lchild;</span><br><span class="line">root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">temp-&gt;rchild = root;</span><br><span class="line">updateHeight(root);</span><br><span class="line">updateHeight(temp);</span><br><span class="line">root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四种树形的调整：</span></span><br><span class="line"><span class="comment">1. LL型 BF(root)=2, BF(root-&gt;lchild)=1 对root右旋</span></span><br><span class="line"><span class="comment">2. RR型 BF(root)=-2, BF(root-&gt;rchild)=-1 对root左旋</span></span><br><span class="line"><span class="comment">3. LR型 BF(root)=2, BF(root-&gt;rchild)=-1 先对root-&gt;lchild左旋，再root右旋</span></span><br><span class="line"><span class="comment">4. RL型 BF(root)=-2, BF(root-&gt;rchild)=1 先对root-&gt;rchild右旋，再root左旋</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AVL树插入权值为v节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;root, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">root = newNode(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v &lt; root-&gt;v)&#123;</span><br><span class="line">insert(root-&gt;lchild, v);</span><br><span class="line">updateHeight(root);</span><br><span class="line"><span class="keyword">if</span>(getBalanceFactor(root) == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild) == <span class="number">1</span>) RightRotation(root);<span class="comment">//LL型</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild) == <span class="number">-1</span>) &#123; <span class="comment">// LR型</span></span><br><span class="line">LeftRotation(root-&gt;lchild);</span><br><span class="line">RightRotation(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert(root-&gt;rchild, v);</span><br><span class="line">updateHeight(root);</span><br><span class="line"><span class="keyword">if</span>(getBalanceFactor(root) == <span class="number">-2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild) == <span class="number">-1</span>) LeftRotation(root); <span class="comment">//RR型</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild) == <span class="number">1</span>) &#123;<span class="comment">//RL型</span></span><br><span class="line">RightRotation(root-&gt;rchild);</span><br><span class="line">LeftRotation(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建AVL树</span></span><br><span class="line"><span class="function">node* <span class="title">Creat</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">node* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">insert(root, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeTraver</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">treeTraver(root-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"height:%d, data:%d\n"</span>, root-&gt;height, root-&gt;v);</span><br><span class="line">treeTraver(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">33</span>&#125;;</span><br><span class="line">node* root = Creat(data, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">treeTraver(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AVL树c++实现&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Traversal" scheme="http://looby.coding.me/betterming/tags/Traversal/"/>
    
      <category term="Order" scheme="http://looby.coding.me/betterming/tags/Order/"/>
    
      <category term="AVL" scheme="http://looby.coding.me/betterming/tags/AVL/"/>
    
  </entry>
  
  <entry>
    <title>实验3_图像特征匹配、跟踪与相机运动估计实验</title>
    <link href="http://looby.coding.me/betterming/post/a008a0d9.html"/>
    <id>http://looby.coding.me/betterming/post/a008a0d9.html</id>
    <published>2018-12-28T06:40:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、预备知识："><a href="#一、预备知识：" class="headerlink" title="一、预备知识："></a>一、预备知识：</h2><blockquote><p>深度图像程序模型及坐标转换<br>linux，C++编程基础，Cmake 编译器<br>OpenCV 图像处理库<br><a id="more"></a></p></blockquote><h2 id="二、实验步骤："><a href="#二、实验步骤：" class="headerlink" title="二、实验步骤："></a>二、实验步骤：</h2><h3 id="1-环境准备-图优化算法库g2o的安装"><a href="#1-环境准备-图优化算法库g2o的安装" class="headerlink" title="1. 环境准备,图优化算法库g2o的安装"></a>1. 环境准备,图优化算法库g2o的安装</h3><p>g2o 安装依赖如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev libsuitesparse-dev libqt4-dev qt4-qmake libqglviewer-qt4-dev</span><br><span class="line">sudo apt-get install cmake libeigen3-dev libsuitesparse-dev libqt4-dev qt4-qmake libqglviewer-dev</span><br></pre></td></tr></table></figure></p><p>下载 g2o 源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/RainerKuemmerle/g2o.git</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ../</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>在实验前需要安装好Eigen3,OpenCV等依赖库<br>Eigen3安装步骤如下：<br>官网下载 tar 包： <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page" target="_blank" rel="noopener">http://eigen.tuxfamily.org/index.php?title=Main_Page</a><br>执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvjf /home/ljhong/share/ eigen-eigen-26667be4f70b.tar.bz2  -C /usr/local/include</span><br><span class="line">sudo mv /usr/local/include/eigen-eigen-26667be4f70b /usr/local/include/eigen3</span><br></pre></td></tr></table></figure></p><p>安装好之后，在/usr/local/include 目录下有个 eigen3的文件</p><h3 id="2-实验代码下载有重新编译"><a href="#2-实验代码下载有重新编译" class="headerlink" title="2. 实验代码下载有重新编译"></a>2. 实验代码下载有重新编译</h3><p>(1)下载实验附件代码<br><a href="https://github.com/gaoxiang12/slambook/tree/master/ch7" target="_blank" rel="noopener">https://github.com/gaoxiang12/slambook/tree/master/ch7</a><br>(2)编译（如果eigen3是按照上面源码方式安装的，ch7文件夹里编译规则文件<br>CMakeList.txt中的”usr/include/eigen3/”应改成每个同学自己的实际存放路径，比如”<br>usr/local/include/eigen3/”）：<br>进入文件cmake和make</p><h3 id="3-双目图像的位姿变换体验"><a href="#3-双目图像的位姿变换体验" class="headerlink" title="3.  双目图像的位姿变换体验"></a>3.  双目图像的位姿变换体验</h3><p>用自备手机，选取非单一背景颜色的环境进行拍照，具体方法为 双手持稳相机，拍第 一张照片，然后小幅度旋转相机，拍摄第二张照片， 重复上述 1-2 步，实现两张图片的特 征点检测与匹配。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"usage: feature_extraction img1 img2"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-- 读取图像</span></span><br><span class="line">    Mat img_1 = imread ( argv[<span class="number">1</span>], CV_LOAD_IMAGE_COLOR );</span><br><span class="line">    Mat img_2 = imread ( argv[<span class="number">2</span>], CV_LOAD_IMAGE_COLOR );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 初始化</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KeyPoint&gt; keypoints_1, keypoints_2;</span><br><span class="line">    Mat descriptors_1, descriptors_2;</span><br><span class="line">    Ptr&lt;FeatureDetector&gt; detector = ORB::create();</span><br><span class="line">    Ptr&lt;DescriptorExtractor&gt; descriptor = ORB::create();</span><br><span class="line">    <span class="comment">// Ptr&lt;FeatureDetector&gt; detector = FeatureDetector::create(detector_name);</span></span><br><span class="line">    <span class="comment">// Ptr&lt;DescriptorExtractor&gt; descriptor = DescriptorExtractor::create(descriptor_name);</span></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher  = DescriptorMatcher::create ( <span class="string">"BruteForce-Hamming"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第一步:检测 Oriented FAST 角点位置</span></span><br><span class="line">    detector-&gt;detect ( img_1,keypoints_1 );</span><br><span class="line">    detector-&gt;detect ( img_2,keypoints_2 );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第二步:根据角点位置计算 BRIEF 描述子</span></span><br><span class="line">    descriptor-&gt;compute ( img_1, keypoints_1, descriptors_1 );</span><br><span class="line">    descriptor-&gt;compute ( img_2, keypoints_2, descriptors_2 );</span><br><span class="line"></span><br><span class="line">    Mat outimg1;</span><br><span class="line">    drawKeypoints( img_1, keypoints_1, outimg1, Scalar::all(<span class="number">-1</span>), DrawMatchesFlags::DEFAULT );</span><br><span class="line">    imshow(<span class="string">"ORB特征点"</span>,outimg1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第三步:对两幅图像中的BRIEF描述子进行匹配，使用 Hamming 距离</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;DMatch&gt; matches;</span><br><span class="line">    <span class="comment">//BFMatcher matcher ( NORM_HAMMING );</span></span><br><span class="line">    matcher-&gt;match ( descriptors_1, descriptors_2, matches );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第四步:匹配点对筛选</span></span><br><span class="line">    <span class="keyword">double</span> min_dist=<span class="number">10000</span>, max_dist=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出所有匹配之间的最小距离和最大距离, 即是最相似的和最不相似的两组点之间的距离</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> dist = matches[i].distance;</span><br><span class="line">        <span class="keyword">if</span> ( dist &lt; min_dist ) min_dist = dist;</span><br><span class="line">        <span class="keyword">if</span> ( dist &gt; max_dist ) max_dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅供娱乐的写法</span></span><br><span class="line">    min_dist = min_element( matches.begin(), matches.end(), [](<span class="keyword">const</span> DMatch&amp; m1, <span class="keyword">const</span> DMatch&amp; m2) &#123;<span class="keyword">return</span> m1.distance&lt;m2.distance;&#125; )-&gt;distance;</span><br><span class="line">    max_dist = max_element( matches.begin(), matches.end(), [](<span class="keyword">const</span> DMatch&amp; m1, <span class="keyword">const</span> DMatch&amp; m2) &#123;<span class="keyword">return</span> m1.distance&lt;m2.distance;&#125; )-&gt;distance;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"-- Max dist : %f \n"</span>, max_dist );</span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"-- Min dist : %f \n"</span>, min_dist );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当描述子之间的距离大于两倍的最小距离时,即认为匹配有误.但有时候最小距离会非常小,设置一个经验值30作为下限.</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; DMatch &gt; good_matches;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( matches[i].distance &lt;= max ( <span class="number">2</span>*min_dist, <span class="number">30.0</span> ) )</span><br><span class="line">        &#123;</span><br><span class="line">            good_matches.push_back ( matches[i] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第五步:绘制匹配结果</span></span><br><span class="line">    Mat img_match;</span><br><span class="line">    Mat img_goodmatch;</span><br><span class="line">    drawMatches ( img_1, keypoints_1, img_2, keypoints_2, matches, img_match );</span><br><span class="line">    drawMatches ( img_1, keypoints_1, img_2, keypoints_2, good_matches, img_goodmatch );</span><br><span class="line">    imshow ( <span class="string">"所有匹配点对"</span>, img_match );</span><br><span class="line">    imshow ( <span class="string">"优化后匹配点对"</span>, img_goodmatch );</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-ICP-法相机姿态估计"><a href="#4-ICP-法相机姿态估计" class="headerlink" title="4. ICP 法相机姿态估计"></a>4. ICP 法相机姿态估计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/SVD&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/base_vertex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/base_unary_edge.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/block_solver.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_gauss_newton.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/solvers/eigen/linear_solver_eigen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/types/sba/types_six_dof_expmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_feature_matches</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Mat&amp; img_1, <span class="keyword">const</span> Mat&amp; img_2,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KeyPoint&gt;&amp; keypoints_1,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KeyPoint&gt;&amp; keypoints_2,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; DMatch &gt;&amp; matches )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像素坐标转相机归一化坐标</span></span><br><span class="line"><span class="function">Point2d <span class="title">pixel2cam</span> <span class="params">( <span class="keyword">const</span> Point2d&amp; p, <span class="keyword">const</span> Mat&amp; K )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pose_estimation_3d3d</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; pts1,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; pts2,</span></span></span><br><span class="line"><span class="function"><span class="params">    Mat&amp; R, Mat&amp; t</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bundleAdjustment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; points_3d,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; points_2d,</span></span></span><br><span class="line"><span class="function"><span class="params">    Mat&amp; R, Mat&amp; t</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g2o edge</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EdgeProjectXYZRGBDPoseOnly</span> :</span> <span class="keyword">public</span> g2o::BaseUnaryEdge&lt;<span class="number">3</span>, Eigen::Vector3d, g2o::VertexSE3Expmap&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;</span><br><span class="line">    EdgeProjectXYZRGBDPoseOnly( <span class="keyword">const</span> Eigen::Vector3d&amp; point ) : _point(point) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">computeError</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> g2o::VertexSE3Expmap* pose = <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> g2o::VertexSE3Expmap*&gt; ( _vertices[<span class="number">0</span>] );</span><br><span class="line">        <span class="comment">// measurement is p, point is p'</span></span><br><span class="line">        _error = _measurement - pose-&gt;estimate().<span class="built_in">map</span>( _point );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">linearizeOplus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        g2o::VertexSE3Expmap* pose = <span class="keyword">static_cast</span>&lt;g2o::VertexSE3Expmap *&gt;(_vertices[<span class="number">0</span>]);</span><br><span class="line">        g2o::<span class="function">SE3Quat <span class="title">T</span><span class="params">(pose-&gt;estimate())</span></span>;</span><br><span class="line">        Eigen::Vector3d xyz_trans = T.<span class="built_in">map</span>(_point);</span><br><span class="line">        <span class="keyword">double</span> x = xyz_trans[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">double</span> y = xyz_trans[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> z = xyz_trans[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">1</span>) = -z;</span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">2</span>) = y;</span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">3</span>) = <span class="number">-1</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">0</span>,<span class="number">5</span>) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">0</span>) = z;</span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">2</span>) = -x;</span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">3</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">4</span>) = <span class="number">-1</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">1</span>,<span class="number">5</span>) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">0</span>) = -y;</span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">1</span>) = x;</span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">3</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">        _jacobianOplusXi(<span class="number">2</span>,<span class="number">5</span>) = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">read</span> <span class="params">( istream&amp; in )</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">write</span> <span class="params">( ostream&amp; out )</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Eigen::Vector3d _point;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">5</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"usage: pose_estimation_3d3d img1 img2 depth1 depth2"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-- 读取图像</span></span><br><span class="line">    Mat img_1 = imread ( argv[<span class="number">1</span>], CV_LOAD_IMAGE_COLOR );</span><br><span class="line">    Mat img_2 = imread ( argv[<span class="number">2</span>], CV_LOAD_IMAGE_COLOR );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;KeyPoint&gt; keypoints_1, keypoints_2;</span><br><span class="line">    <span class="built_in">vector</span>&lt;DMatch&gt; matches;</span><br><span class="line">    find_feature_matches ( img_1, img_2, keypoints_1, keypoints_2, matches );</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"一共找到了"</span>&lt;&lt;matches.size() &lt;&lt;<span class="string">"组匹配点"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立3D点</span></span><br><span class="line">    Mat depth1 = imread ( argv[<span class="number">3</span>], CV_LOAD_IMAGE_UNCHANGED );       <span class="comment">// 深度图为16位无符号数，单通道图像</span></span><br><span class="line">    Mat depth2 = imread ( argv[<span class="number">4</span>], CV_LOAD_IMAGE_UNCHANGED );       <span class="comment">// 深度图为16位无符号数，单通道图像</span></span><br><span class="line">    Mat K = ( Mat_&lt;<span class="keyword">double</span>&gt; ( <span class="number">3</span>,<span class="number">3</span> ) &lt;&lt; <span class="number">520.9</span>, <span class="number">0</span>, <span class="number">325.1</span>, <span class="number">0</span>, <span class="number">521.0</span>, <span class="number">249.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point3f&gt; pts1, pts2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( DMatch m:matches )</span><br><span class="line">    &#123;</span><br><span class="line">        ushort d1 = depth1.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>&gt; ( <span class="keyword">int</span> ( keypoints_1[m.queryIdx].pt.y ) ) [ <span class="keyword">int</span> ( keypoints_1[m.queryIdx].pt.x ) ];</span><br><span class="line">        ushort d2 = depth2.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>&gt; ( <span class="keyword">int</span> ( keypoints_2[m.trainIdx].pt.y ) ) [ <span class="keyword">int</span> ( keypoints_2[m.trainIdx].pt.x ) ];</span><br><span class="line">        <span class="keyword">if</span> ( d1==<span class="number">0</span> || d2==<span class="number">0</span> )   <span class="comment">// bad depth</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Point2d p1 = pixel2cam ( keypoints_1[m.queryIdx].pt, K );</span><br><span class="line">        Point2d p2 = pixel2cam ( keypoints_2[m.trainIdx].pt, K );</span><br><span class="line">        <span class="keyword">float</span> dd1 = <span class="keyword">float</span> ( d1 ) /<span class="number">5000.0</span>;</span><br><span class="line">        <span class="keyword">float</span> dd2 = <span class="keyword">float</span> ( d2 ) /<span class="number">5000.0</span>;</span><br><span class="line">        pts1.push_back ( Point3f ( p1.x*dd1, p1.y*dd1, dd1 ) );</span><br><span class="line">        pts2.push_back ( Point3f ( p2.x*dd2, p2.y*dd2, dd2 ) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"3d-3d pairs: "</span>&lt;&lt;pts1.size() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Mat R, t;</span><br><span class="line">    pose_estimation_3d3d ( pts1, pts2, R, t );</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"ICP via SVD results: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"R = "</span>&lt;&lt;R&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"t = "</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"R_inv = "</span>&lt;&lt;R.t() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"t_inv = "</span>&lt;&lt;-R.t() *t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"calling bundle adjustment"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bundleAdjustment( pts1, pts2, R, t );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify p1 = R*p2 + t</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"p1 = "</span>&lt;&lt;pts1[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"p2 = "</span>&lt;&lt;pts2[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"(R*p2+t) = "</span>&lt;&lt;</span><br><span class="line">            R * (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">1</span>)&lt;&lt;pts2[i].x, pts2[i].y, pts2[i].z) + t</span><br><span class="line">            &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_feature_matches</span> <span class="params">( <span class="keyword">const</span> Mat&amp; img_1, <span class="keyword">const</span> Mat&amp; img_2,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KeyPoint&gt;&amp; keypoints_1,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KeyPoint&gt;&amp; keypoints_2,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; DMatch &gt;&amp; matches )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//-- 初始化</span></span><br><span class="line">    Mat descriptors_1, descriptors_2;</span><br><span class="line">    <span class="comment">// used in OpenCV3</span></span><br><span class="line">    Ptr&lt;FeatureDetector&gt; detector = ORB::create();</span><br><span class="line">    Ptr&lt;DescriptorExtractor&gt; descriptor = ORB::create();</span><br><span class="line">    <span class="comment">// use this if you are in OpenCV2</span></span><br><span class="line">    <span class="comment">// Ptr&lt;FeatureDetector&gt; detector = FeatureDetector::create ( "ORB" );</span></span><br><span class="line">    <span class="comment">// Ptr&lt;DescriptorExtractor&gt; descriptor = DescriptorExtractor::create ( "ORB" );</span></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher  = DescriptorMatcher::create(<span class="string">"BruteForce-Hamming"</span>);</span><br><span class="line">    <span class="comment">//-- 第一步:检测 Oriented FAST 角点位置</span></span><br><span class="line">    detector-&gt;detect ( img_1,keypoints_1 );</span><br><span class="line">    detector-&gt;detect ( img_2,keypoints_2 );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第二步:根据角点位置计算 BRIEF 描述子</span></span><br><span class="line">    descriptor-&gt;compute ( img_1, keypoints_1, descriptors_1 );</span><br><span class="line">    descriptor-&gt;compute ( img_2, keypoints_2, descriptors_2 );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第三步:对两幅图像中的BRIEF描述子进行匹配，使用 Hamming 距离</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;DMatch&gt; match;</span><br><span class="line">   <span class="comment">// BFMatcher matcher ( NORM_HAMMING );</span></span><br><span class="line">    matcher-&gt;match ( descriptors_1, descriptors_2, match );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 第四步:匹配点对筛选</span></span><br><span class="line">    <span class="keyword">double</span> min_dist=<span class="number">10000</span>, max_dist=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出所有匹配之间的最小距离和最大距离, 即是最相似的和最不相似的两组点之间的距离</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> dist = match[i].distance;</span><br><span class="line">        <span class="keyword">if</span> ( dist &lt; min_dist ) min_dist = dist;</span><br><span class="line">        <span class="keyword">if</span> ( dist &gt; max_dist ) max_dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"-- Max dist : %f \n"</span>, max_dist );</span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"-- Min dist : %f \n"</span>, min_dist );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当描述子之间的距离大于两倍的最小距离时,即认为匹配有误.但有时候最小距离会非常小,设置一个经验值30作为下限.</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( match[i].distance &lt;= max ( <span class="number">2</span>*min_dist, <span class="number">30.0</span> ) )</span><br><span class="line">        &#123;</span><br><span class="line">            matches.push_back ( match[i] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point2d <span class="title">pixel2cam</span> <span class="params">( <span class="keyword">const</span> Point2d&amp; p, <span class="keyword">const</span> Mat&amp; K )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Point2d</span><br><span class="line">           (</span><br><span class="line">               ( p.x - K.at&lt;<span class="keyword">double</span>&gt; ( <span class="number">0</span>,<span class="number">2</span> ) ) / K.at&lt;<span class="keyword">double</span>&gt; ( <span class="number">0</span>,<span class="number">0</span> ),</span><br><span class="line">               ( p.y - K.at&lt;<span class="keyword">double</span>&gt; ( <span class="number">1</span>,<span class="number">2</span> ) ) / K.at&lt;<span class="keyword">double</span>&gt; ( <span class="number">1</span>,<span class="number">1</span> )</span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pose_estimation_3d3d</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; pts1,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point3f&gt;&amp; pts2,</span></span></span><br><span class="line"><span class="function"><span class="params">    Mat&amp; R, Mat&amp; t</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point3f p1, p2;     <span class="comment">// center of mass</span></span><br><span class="line">    <span class="keyword">int</span> N = pts1.size();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p1 += pts1[i];</span><br><span class="line">        p2 += pts2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p1 = Point3f( Vec3f(p1) /  N);</span><br><span class="line">    p2 = Point3f( Vec3f(p2) / N);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point3f&gt;     q1 ( N ), q2 ( N ); <span class="comment">// remove the center</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q1[i] = pts1[i] - p1;</span><br><span class="line">        q2[i] = pts2[i] - p2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compute q1*q2^T</span></span><br><span class="line">    Eigen::Matrix3d W = Eigen::Matrix3d::Zero();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        W += Eigen::Vector3d ( q1[i].x, q1[i].y, q1[i].z ) * Eigen::Vector3d ( q2[i].x, q2[i].y, q2[i].z ).transpose();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"W="</span>&lt;&lt;W&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SVD on W</span></span><br><span class="line">    Eigen::JacobiSVD&lt;Eigen::Matrix3d&gt; svd ( W, Eigen::ComputeFullU|Eigen::ComputeFullV );</span><br><span class="line">    Eigen::Matrix3d U = svd.matrixU();</span><br><span class="line">    Eigen::Matrix3d V = svd.matrixV();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (U.determinant() * V.determinant() &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; ++x)</span><br><span class="line">        &#123;</span><br><span class="line">            U(x, <span class="number">2</span>) *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"U="</span>&lt;&lt;U&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"V="</span>&lt;&lt;V&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3d R_ = U* ( V.transpose() );</span><br><span class="line">    Eigen::Vector3d t_ = Eigen::Vector3d ( p1.x, p1.y, p1.z ) - R_ * Eigen::Vector3d ( p2.x, p2.y, p2.z );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert to cv::Mat</span></span><br><span class="line">    R = ( Mat_&lt;<span class="keyword">double</span>&gt; ( <span class="number">3</span>,<span class="number">3</span> ) &lt;&lt;</span><br><span class="line">          R_ ( <span class="number">0</span>,<span class="number">0</span> ), R_ ( <span class="number">0</span>,<span class="number">1</span> ), R_ ( <span class="number">0</span>,<span class="number">2</span> ),</span><br><span class="line">          R_ ( <span class="number">1</span>,<span class="number">0</span> ), R_ ( <span class="number">1</span>,<span class="number">1</span> ), R_ ( <span class="number">1</span>,<span class="number">2</span> ),</span><br><span class="line">          R_ ( <span class="number">2</span>,<span class="number">0</span> ), R_ ( <span class="number">2</span>,<span class="number">1</span> ), R_ ( <span class="number">2</span>,<span class="number">2</span> )</span><br><span class="line">        );</span><br><span class="line">    t = ( Mat_&lt;<span class="keyword">double</span>&gt; ( <span class="number">3</span>,<span class="number">1</span> ) &lt;&lt; t_ ( <span class="number">0</span>,<span class="number">0</span> ), t_ ( <span class="number">1</span>,<span class="number">0</span> ), t_ ( <span class="number">2</span>,<span class="number">0</span> ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bundleAdjustment</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt; Point3f &gt;&amp; pts1,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt; Point3f &gt;&amp; pts2,</span></span></span><br><span class="line"><span class="function"><span class="params">    Mat&amp; R, Mat&amp; t )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化g2o</span></span><br><span class="line">    <span class="keyword">typedef</span> g2o::BlockSolver&lt; g2o::BlockSolverTraits&lt;<span class="number">6</span>,<span class="number">3</span>&gt; &gt; Block;  <span class="comment">// pose维度为 6, landmark 维度为 3</span></span><br><span class="line">    Block::LinearSolverType* linearSolver = <span class="keyword">new</span> g2o::LinearSolverEigen&lt;Block::PoseMatrixType&gt;(); <span class="comment">// 线性方程求解器</span></span><br><span class="line">    Block* solver_ptr = <span class="keyword">new</span> Block( linearSolver );      <span class="comment">// 矩阵块求解器</span></span><br><span class="line">    g2o::OptimizationAlgorithmGaussNewton* solver = <span class="keyword">new</span> g2o::OptimizationAlgorithmGaussNewton( solver_ptr );</span><br><span class="line">    g2o::SparseOptimizer optimizer;</span><br><span class="line">    optimizer.setAlgorithm( solver );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vertex</span></span><br><span class="line">    g2o::VertexSE3Expmap* pose = <span class="keyword">new</span> g2o::VertexSE3Expmap(); <span class="comment">// camera pose</span></span><br><span class="line">    pose-&gt;setId(<span class="number">0</span>);</span><br><span class="line">    pose-&gt;setEstimate( g2o::SE3Quat(</span><br><span class="line">        Eigen::Matrix3d::Identity(),</span><br><span class="line">        Eigen::Vector3d( <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> )</span><br><span class="line">    ) );</span><br><span class="line">    optimizer.addVertex( pose );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// edges</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;EdgeProjectXYZRGBDPoseOnly*&gt; edges;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;pts1.size(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        EdgeProjectXYZRGBDPoseOnly* edge = <span class="keyword">new</span> EdgeProjectXYZRGBDPoseOnly(</span><br><span class="line">            Eigen::Vector3d(pts2[i].x, pts2[i].y, pts2[i].z) );</span><br><span class="line">        edge-&gt;setId( index );</span><br><span class="line">        edge-&gt;setVertex( <span class="number">0</span>, <span class="keyword">dynamic_cast</span>&lt;g2o::VertexSE3Expmap*&gt; (pose) );</span><br><span class="line">        edge-&gt;setMeasurement( Eigen::Vector3d(</span><br><span class="line">            pts1[i].x, pts1[i].y, pts1[i].z) );</span><br><span class="line">        edge-&gt;setInformation( Eigen::Matrix3d::Identity()*<span class="number">1e4</span> );</span><br><span class="line">        optimizer.addEdge(edge);</span><br><span class="line">        index++;</span><br><span class="line">        edges.push_back(edge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chrono::steady_clock::time_point t1 = chrono::steady_clock::now();</span><br><span class="line">    optimizer.setVerbose( <span class="literal">true</span> );</span><br><span class="line">    optimizer.initializeOptimization();</span><br><span class="line">    optimizer.optimize(<span class="number">10</span>);</span><br><span class="line">    chrono::steady_clock::time_point t2 = chrono::steady_clock::now();</span><br><span class="line">    chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = chrono::duration_cast&lt;chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2-t1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"optimization costs time: "</span>&lt;&lt;time_used.count()&lt;&lt;<span class="string">" seconds."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"after optimization:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"T="</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;Eigen::Isometry3d( pose-&gt;estimate() ).matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5．光流特征跟踪"><a href="#5．光流特征跟踪" class="headerlink" title="5．光流特征跟踪"></a>5．光流特征跟踪</h3><p>CMakeList文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required( VERSION 2.8 )</span><br><span class="line">project( useLK )</span><br><span class="line"></span><br><span class="line">set( CMAKE_BUILD_TYPE Release )</span><br><span class="line">set( CMAKE_CXX_FLAGS &quot;-std=c++11 -O3&quot; )</span><br><span class="line"></span><br><span class="line">find_package( OpenCV )</span><br><span class="line">include_directories( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span><br><span class="line"></span><br><span class="line">add_executable( useLK useLK.cpp )</span><br><span class="line">target_link_libraries( useLK $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure></p><p>useLK.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/video/tracking.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"usage: useLK path_to_dataset"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> path_to_dataset = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">string</span> associate_file = path_to_dataset + <span class="string">"/associate.txt"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">( associate_file )</span></span>;</span><br><span class="line">    <span class="keyword">if</span> ( !fin )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"I cann't find associate.txt!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> rgb_file, depth_file, time_rgb, time_depth;</span><br><span class="line">    <span class="built_in">list</span>&lt; cv::Point2f &gt; keypoints;      <span class="comment">// 因为要删除跟踪失败的点，使用list</span></span><br><span class="line">    cv::Mat color, depth, last_color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> index=<span class="number">0</span>; index&lt;<span class="number">100</span>; index++ )</span><br><span class="line">    &#123;</span><br><span class="line">        fin&gt;&gt;time_rgb&gt;&gt;rgb_file&gt;&gt;time_depth&gt;&gt;depth_file;</span><br><span class="line">        color = cv::imread( path_to_dataset+<span class="string">"/"</span>+rgb_file );</span><br><span class="line">        depth = cv::imread( path_to_dataset+<span class="string">"/"</span>+depth_file, <span class="number">-1</span> );</span><br><span class="line">        <span class="keyword">if</span> (index ==<span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对第一帧提取FAST特征点</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;cv::KeyPoint&gt; kps;</span><br><span class="line">            cv::Ptr&lt;cv::FastFeatureDetector&gt; detector = cv::FastFeatureDetector::create();</span><br><span class="line">            detector-&gt;detect( color, kps );</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">auto</span> kp:kps )</span><br><span class="line">                keypoints.push_back( kp.pt );</span><br><span class="line">            last_color = color;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( color.data==<span class="literal">nullptr</span> || depth.data==<span class="literal">nullptr</span> )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 对其他帧用LK跟踪特征点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;cv::Point2f&gt; next_keypoints;</span><br><span class="line">        <span class="built_in">vector</span>&lt;cv::Point2f&gt; prev_keypoints;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> kp:keypoints )</span><br><span class="line">            prev_keypoints.push_back(kp);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; status;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; error;</span><br><span class="line">        chrono::steady_clock::time_point t1 = chrono::steady_clock::now();</span><br><span class="line">        cv::calcOpticalFlowPyrLK( last_color, color, prev_keypoints, next_keypoints, status, error );</span><br><span class="line">        chrono::steady_clock::time_point t2 = chrono::steady_clock::now();</span><br><span class="line">        chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = chrono::duration_cast&lt;chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;( t2-t1 );</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"LK Flow use time："</span>&lt;&lt;time_used.count()&lt;&lt;<span class="string">" seconds."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 把跟丢的点删掉</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> iter=keypoints.begin(); iter!=keypoints.end(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( status[i] == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                iter = keypoints.erase(iter);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            *iter = next_keypoints[i];</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"tracked keypoints: "</span>&lt;&lt;keypoints.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (keypoints.size() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"all keypoints are lost."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 画出 keypoints</span></span><br><span class="line">        cv::Mat img_show = color.clone();</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> kp:keypoints )</span><br><span class="line">            cv::circle(img_show, kp, <span class="number">10</span>, cv::Scalar(<span class="number">0</span>, <span class="number">240</span>, <span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">        cv::imshow(<span class="string">"corners"</span>, img_show);</span><br><span class="line">        cv::waitKey(<span class="number">0</span>);</span><br><span class="line">        last_color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：</p><ol><li>刚哥的实验讲义</li><li>SLAM十四讲</li><li><a href="https://github.com/gaoxiang12/slambook" target="_blank" rel="noopener">https://github.com/gaoxiang12/slambook</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、预备知识：&quot;&gt;&lt;a href=&quot;#一、预备知识：&quot; class=&quot;headerlink&quot; title=&quot;一、预备知识：&quot;&gt;&lt;/a&gt;一、预备知识：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;深度图像程序模型及坐标转换&lt;br&gt;linux，C++编程基础，Cmake 编译器&lt;br&gt;OpenCV 图像处理库&lt;br&gt;
    
    </summary>
    
      <category term="CV" scheme="http://looby.coding.me/betterming/categories/CV/"/>
    
    
      <category term="CV" scheme="http://looby.coding.me/betterming/tags/CV/"/>
    
      <category term="OpenCV" scheme="http://looby.coding.me/betterming/tags/OpenCV/"/>
    
      <category term="Linux" scheme="http://looby.coding.me/betterming/tags/Linux/"/>
    
      <category term="SLAM" scheme="http://looby.coding.me/betterming/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra 和 Ben-Ford算法</title>
    <link href="http://looby.coding.me/betterming/post/bd15b34d.html"/>
    <id>http://looby.coding.me/betterming/post/bd15b34d.html</id>
    <published>2018-12-14T15:36:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Dijkstra算法"><a href="#1-Dijkstra算法" class="headerlink" title="1. Dijkstra算法"></a>1. Dijkstra算法</h1><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1000</span>; <span class="comment">//最大顶点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">10000000</span>; <span class="comment">//inf 表示最大的数即为不可达</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, G[maxv][maxv]; <span class="comment">// n为顶点数，m为边数，G表示两顶点之间的权值</span></span><br><span class="line"><span class="keyword">int</span> d[maxv]; <span class="comment">// 记录起点到各个顶点之间的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxv] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//数组标记，true表示已访问，初始为false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">fill(d, d + maxv, inf); <span class="comment">// 将整个d数据初始化为inf</span></span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">-1</span>, min = inf; <span class="comment">// min存放d[u]的最小值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123; <span class="comment">// 找到未访问的顶点中d最小</span></span><br><span class="line"><span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; min)&#123;</span><br><span class="line">u = j;</span><br><span class="line">min = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>; <span class="comment">// 找不到小于inf的d[u]，说明剩下的顶点和起点不相通</span></span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++)&#123;  <span class="comment">//若v未访问，u能到达v,u为中间点d[v]更优，则跟新d</span></span><br><span class="line"><span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != inf &amp;&amp; d[u] + G[u][v] &lt; d[v])&#123;</span><br><span class="line">d[v] = d[u] + G[u][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">fill(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxv * maxv, inf);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">G[u][v] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Dijkstra:\n"</span>);</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, d[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Ben-Ford算法"><a href="#2-Ben-Ford算法" class="headerlink" title="2. Ben-Ford算法"></a>2. Ben-Ford算法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1000</span>; <span class="comment">//最大顶点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">10000000</span>; <span class="comment">//inf 表示最大的数即为不可达</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v, dis;  <span class="comment">//v 为邻接边的目标顶点，dis为其权值</span></span><br><span class="line">Node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dis): v(_v), dis(_dis) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; Adj[maxv]; <span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">int</span> n, m, s, d[maxv];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123; <span class="comment">//s为起点</span></span><br><span class="line">fill(d, d + maxv, inf);</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123; <span class="comment">// 求解数d，执行n-1轮操作，每轮操作遍历整个边</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; ++u)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].size(); ++j)&#123;</span><br><span class="line"><span class="keyword">int</span> v = Adj[u][j].v;</span><br><span class="line"><span class="keyword">int</span> dis = Adj[u][j].dis;</span><br><span class="line"><span class="keyword">if</span>(d[u] + dis &lt; d[v]) d[v] = d[u] + dis; <span class="comment">// 以u为中介使d[v]更小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; ++u)&#123; <span class="comment">// 判断是否有负环，对每条边都判断，返回false说明有负环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].size(); ++j)&#123;</span><br><span class="line"><span class="keyword">int</span> v = Adj[u][j].v;</span><br><span class="line"><span class="keyword">int</span> dis = Adj[u][j].dis;</span><br><span class="line"><span class="keyword">if</span>(d[u] + dis &lt; d[v]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">Adj[u].push_back(Node(v, w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bellman_Ford:\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(Bellman_Ford(s) == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, d[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"有负环\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Dijkstra算法&quot;&gt;&lt;a href=&quot;#1-Dijkstra算法&quot; class=&quot;headerlink&quot; title=&quot;1. Dijkstra算法&quot;&gt;&lt;/a&gt;1. Dijkstra算法&lt;/h1&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Dijkstra算法" scheme="http://looby.coding.me/betterming/tags/Dijkstra%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ben-Ford算法" scheme="http://looby.coding.me/betterming/tags/Ben-Ford%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>视觉3D点云图构建与深度测量 </title>
    <link href="http://looby.coding.me/betterming/post/8957bd28.html"/>
    <id>http://looby.coding.me/betterming/post/8957bd28.html</id>
    <published>2018-12-12T13:03:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验-2-视觉-3D-点云图构建与深度测量"><a href="#实验-2-视觉-3D-点云图构建与深度测量" class="headerlink" title="实验 2 视觉 3D 点云图构建与深度测量"></a>实验 2 视觉 3D 点云图构建与深度测量</h1><a id="more"></a><h2 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h2><ol><li>矩阵运算库 Eigen 的使用</li><li>彩色图、深度图的读取与参数提取</li><li>相机参数加载与使用</li><li>点云地图拼接</li><li>双目视觉系统标定与深度测量(限实验设计)</li></ol><h2 id="实验设备："><a href="#实验设备：" class="headerlink" title="实验设备："></a>实验设备：</h2><blockquote><p>自带笔记本 PC 机摄像头/USB 摄像头，安装 Ubuntu14.04 或以上系统，OpenCV 开发库</p></blockquote><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><blockquote><ol><li>深度相机原理</li><li>深度图像采集过程及坐标转换关系</li><li>linux，C++编程基础，Cmake 编译器使用</li><li>Eigen 矩阵运算库，OpenCV 图像处理库</li></ol></blockquote><p>所需文件：<br><img src="http://pj7pvy6lw.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20181212211304.png" alt></p><p>color文件夹有5张彩色图<br>depth有五张深度图<br>joinMap.cpp如下<br>pose.txt为相机参数</p><h2 id="中心思想"><a href="#中心思想" class="headerlink" title="中心思想"></a>中心思想</h2><blockquote><p>三个坐标系：世界坐标系，相机坐标系，像素坐标系<br>两个参数：K(内参)，(T)外参</p><p>K和T都是一个4*4欧式变换矩阵，k实现像素坐标系和像素坐标系之间转换，T实现世界坐标系和相机坐标系之间的转换<br>如下公式，K由fx,fy,cx,cy四个参数决定，T由pose.txt中数据确定<br>最终根据最下面的公式，由各个像素坐标中的像素点得到世界坐标系点，然后用pcl转化成点云图。<br>注意：点云图中的点是三维点，所以还需要一个量–d深度，由depth文件夹中五张深度图获得，而深度图怎么获得呢？有三种相机可获得。。。后面再讲<br>还有，opencv3安装，依赖；Eigen安装，pcl安装等问题如下图，实在不懂自己百度。。。。</p></blockquote><p><img src="http://pj7pvy6lw.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" alt><br><img src="http://pj7pvy6lw.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png" alt><br><img src="http://pj7pvy6lw.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20181212213917.png" alt></p><h2 id="代码及详细分析"><a href="#代码及详细分析" class="headerlink" title="代码及详细分析"></a>代码及详细分析</h2><p>（我不相信你还有比我还详细的了，哼。。。）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/format.hpp&gt;  // for formating strings</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过点云拼接，我们就可以还原这个房间的三维场景。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">已知：5张RGB-D图像，每个图像的内参K和外参T</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目标：计算所有像素在世界坐标系的位置，把点云加起来，组成地图。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路：根据pose.txt中相机外参（平移向量+旋转四元数）转换成变换矩阵T（4*4）；对相机坐标（根据像素和实物关系得到）通T转换成世界坐标；之后根据5张图循环构造点云。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;cv::Mat&gt; colorImgs, depthImgs;    <span class="comment">// 彩色图和深度图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相机位姿, 5*7，表示五张图片，每张图片对应7个数前三个数是平移向量，后四个是旋转四元数</span></span><br><span class="line">    <span class="comment">// poses 是长度为5的数组，每个元素是个矩阵（4*4）</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Eigen::Isometry3d, Eigen::aligned_allocator&lt;Eigen::Isometry3d&gt;&gt; poses;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"./pose.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"请在有pose.txt的目录下运行此程序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 照片读取，boost::format 格式化字符串  拼接出图片文件名</span></span><br><span class="line">        boost::<span class="function">format <span class="title">fmt</span><span class="params">( <span class="string">"./%s/%d.%s"</span> )</span></span>; <span class="comment">//图像文件格式</span></span><br><span class="line">        colorImgs.push_back( cv::imread( (fmt%<span class="string">"color"</span>%(i+<span class="number">1</span>)%<span class="string">"png"</span>).str() ));</span><br><span class="line">        depthImgs.push_back( cv::imread( (fmt%<span class="string">"depth"</span>%(i+<span class="number">1</span>)%<span class="string">"pgm"</span>).str(), <span class="number">-1</span> )); <span class="comment">// 使用-1读取原始图像</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相机位姿读取到组data[]</span></span><br><span class="line">        <span class="keyword">double</span> data[<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; d:data ) <span class="comment">//auto自动类型转换</span></span><br><span class="line">            fin&gt;&gt;d; <span class="comment">//文件流类型的变量fin将pose.txt中的数据给了d数组</span></span><br><span class="line">        Eigen::<span class="function">Quaterniond <span class="title">q</span><span class="params">( data[<span class="number">6</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], data[<span class="number">5</span>] )</span></span>; <span class="comment">//四元数 data[6]是实数 但是coeffis输出的是先虚数后实数</span></span><br><span class="line">        Eigen::<span class="function">Isometry3d <span class="title">T</span><span class="params">(q)</span></span>; <span class="comment">//变换矩阵T初始化旋转部分</span></span><br><span class="line">        T.pretranslate( Eigen::Vector3d( data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>] )); <span class="comment">//T初始化平移向量部分</span></span><br><span class="line">        poses.push_back( T ); <span class="comment">//存储T到位姿数组中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算点云并拼接</span></span><br><span class="line">    <span class="comment">// 相机内参</span></span><br><span class="line">    <span class="keyword">double</span> cx = <span class="number">325.5</span>;</span><br><span class="line">    <span class="keyword">double</span> cy = <span class="number">253.5</span>;</span><br><span class="line">    <span class="keyword">double</span> fx = <span class="number">518.0</span>;</span><br><span class="line">    <span class="keyword">double</span> fy = <span class="number">519.0</span>;</span><br><span class="line">    <span class="keyword">double</span> depthScale = <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"正在将图像转换为点云..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义点云使用的格式：这里用的是XYZRGB</span></span><br><span class="line">    <span class="keyword">typedef</span> pcl::PointXYZRGB PointT;</span><br><span class="line">    <span class="keyword">typedef</span> pcl::PointCloud&lt;PointT&gt; PointCloud;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个点云</span></span><br><span class="line">    PointCloud::<span class="function">Ptr <span class="title">pointCloud</span><span class="params">( <span class="keyword">new</span> PointCloud )</span></span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"转换图像中: "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        cv::Mat color = colorImgs[i];</span><br><span class="line">        cv::Mat depth = depthImgs[i];</span><br><span class="line">        Eigen::Isometry3d T = poses[i];</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> v=<span class="number">0</span>; v&lt;color.rows; v++ )</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> u=<span class="number">0</span>; u&lt;color.cols; u++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">int</span> d = depth.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>&gt; ( v )[u]; <span class="comment">// 深度值v,u像素对应的深度值</span></span><br><span class="line">                <span class="keyword">if</span> ( d==<span class="number">0</span> ) <span class="keyword">continue</span>; <span class="comment">// 为0表示没有测量到</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将像素坐标(u,v,d)计算到相机坐标系下坐标 point</span></span><br><span class="line">                Eigen::Vector3d point;</span><br><span class="line">                point[<span class="number">2</span>] = <span class="keyword">double</span>(d)/depthScale;</span><br><span class="line">                point[<span class="number">0</span>] = (u-cx)*point[<span class="number">2</span>]/fx;</span><br><span class="line">                point[<span class="number">1</span>] = (v-cy)*point[<span class="number">2</span>]/fy;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通过外参T将相机坐标系中的point转化成世界坐标系中的pointWorld</span></span><br><span class="line">                Eigen::Vector3d pointWorld = T*point;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将世界坐标系中的坐标放入点云图中的点中</span></span><br><span class="line">                PointT p ;</span><br><span class="line">                p.x = pointWorld[<span class="number">0</span>];</span><br><span class="line">                p.y = pointWorld[<span class="number">1</span>];</span><br><span class="line">                p.z = pointWorld[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取彩色图中各个像素点的bgr值</span></span><br><span class="line">                p.b = color.data[ v*color.step+u*color.channels() ];</span><br><span class="line">                p.g = color.data[ v*color.step+u*color.channels()+<span class="number">1</span> ];</span><br><span class="line">                p.r = color.data[ v*color.step+u*color.channels()+<span class="number">2</span> ];</span><br><span class="line">                pointCloud-&gt;points.push_back( p );</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pointCloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"点云共有"</span>&lt;&lt;pointCloud-&gt;size()&lt;&lt;<span class="string">"个点."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    pcl::io::savePCDFileBinary(<span class="string">"map.pcd"</span>, *pointCloud );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验-2-视觉-3D-点云图构建与深度测量&quot;&gt;&lt;a href=&quot;#实验-2-视觉-3D-点云图构建与深度测量&quot; class=&quot;headerlink&quot; title=&quot;实验 2 视觉 3D 点云图构建与深度测量&quot;&gt;&lt;/a&gt;实验 2 视觉 3D 点云图构建与深度测量&lt;/h1&gt;
    
    </summary>
    
      <category term="CV" scheme="http://looby.coding.me/betterming/categories/CV/"/>
    
    
      <category term="CV" scheme="http://looby.coding.me/betterming/tags/CV/"/>
    
      <category term="OpenCV" scheme="http://looby.coding.me/betterming/tags/OpenCV/"/>
    
      <category term="Linux" scheme="http://looby.coding.me/betterming/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV的颜色特征识别</title>
    <link href="http://looby.coding.me/betterming/post/d7e278a1.html"/>
    <id>http://looby.coding.me/betterming/post/d7e278a1.html</id>
    <published>2018-12-09T03:00:10.000Z</published>
    <updated>2019-05-19T12:33:31.527Z</updated>
    
    <content type="html"><![CDATA[<p>这篇post是智能机器人技术实验</p><h1 id="实验-1-基于OpenCV的颜色特征识别"><a href="#实验-1-基于OpenCV的颜色特征识别" class="headerlink" title="实验 1 基于OpenCV的颜色特征识别"></a>实验 1 基于OpenCV的颜色特征识别</h1><a id="more"></a><h2 id="实验设备："><a href="#实验设备：" class="headerlink" title="实验设备："></a>实验设备：</h2><p>平台二选一：</p><ul><li>平台一：树莓派, Linux OS, OpenCV 开发库</li><li>平台二： 个人计算机，Linux OS,USB 摄像头，OpenCV 开发库</li></ul><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><ul><li>数字图像处理基础</li><li>C++、python 编程基础</li><li>Linux 系统基本操作基础</li></ul><h2 id="关于颜色特征识别的一些知识："><a href="#关于颜色特征识别的一些知识：" class="headerlink" title="关于颜色特征识别的一些知识："></a>关于颜色特征识别的一些知识：</h2><h3 id="1-CamShift算法："><a href="#1-CamShift算法：" class="headerlink" title="1. CamShift算法："></a>1. CamShift算法：</h3><p>全称是 Continuously AdaptiveMeanShift，顾名思义，它是对Mean Shift 算法的改进，能够自动调节搜索窗口大小来适应目标的大小，可以跟踪视频中尺寸变化的目标。它也是一种半自动跟踪算法，需要手动标定跟踪目标。基本思想是以视频图像中运动物体的颜色信息作为特征，对输入图像的每一帧分别作 Mean-Shift 运算，并将上一帧的目标中心和搜索窗口大小(核函数带宽)作为下一帧 Mean shift 算法的中心和搜索窗口大小的初始值，如此迭代下去，就可以实现对目标的跟踪。因为在每次搜索前将搜索窗口的位置和大小设置为运动目标当前中心的位置和大小，而运动目标通常在这区域附近，缩短了搜索时间；另外，在目标运动过程中，颜色变化不大，故该算法具有良好的鲁棒性。已被广泛应用到运动人体跟踪，人脸跟踪等领域。</p><h3 id="2-算法流程"><a href="#2-算法流程" class="headerlink" title="2. 算法流程"></a>2. 算法流程</h3><p><img src="https://miao.su/images/2019/05/19/0a201932f9f6f62b11d35.png" alt="0a201932f9f6f62b11d35.png"></p><h3 id="3-代码及分析"><a href="#3-代码及分析" class="headerlink" title="3. 代码及分析"></a>3. 代码及分析</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"></span><br><span class="line"><span class="comment"># from picamera.array import PiRGBArray</span></span><br><span class="line"><span class="comment"># from picamera import PiCamera</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment"># import copy</span></span><br><span class="line"><span class="keyword">import</span> video <span class="comment"># 调取摄像头</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span> <span class="comment"># 获取图片</span></span><br><span class="line">        self.cam = video.create_capture(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#         self.cam = PiCamera()</span></span><br><span class="line"><span class="comment">#         self.cam.resolution = (320,240)</span></span><br><span class="line"><span class="comment">#         self.cam.framerate = 32</span></span><br><span class="line"><span class="comment">#         self.rCa = PiRGBArray(self.cam, size=(320,240))</span></span><br><span class="line"><span class="comment">#         time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#        self.cam.capture(self.rCa, format='bgr')</span></span><br><span class="line"><span class="comment">#        self.frame = self.rCa.array</span></span><br><span class="line"><span class="comment">#        ret, self.frame = self.cam.read()</span></span><br><span class="line">        cv2.namedWindow(<span class="string">'camshift'</span>) <span class="comment"># 通过命名的方式，创建了一个窗口</span></span><br><span class="line">        <span class="keyword">if</span> color == <span class="number">0</span>:</span><br><span class="line">            self.roi = cv2.imread( <span class="string">'lan.jpg'</span> )</span><br><span class="line">            self.flag = <span class="string">"lan"</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            self.flag = <span class="string">"hong"</span></span><br><span class="line">            self.roi = cv2.imread(<span class="string">'hong.png'</span>)</span><br><span class="line">            self.selection = <span class="literal">None</span></span><br><span class="line">            self.tracking_state = <span class="number">0</span></span><br><span class="line">            self.show_backproj = <span class="literal">False</span></span><br><span class="line"><span class="comment">#         self.ser = serial.Serial('/dev/ttyAMA0',115200,timeout=0.5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span> <span class="comment"># start方法用来设置一些状态，初始化信息</span></span><br><span class="line">        <span class="comment"># tracking_state 判断是否进行追踪</span></span><br><span class="line">        self.tracking_state = <span class="number">0</span></span><br><span class="line">        <span class="comment">#x, y = np.int16([220, 110]) # BUG</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="string">'Hong'</span>:</span><br><span class="line">                self.selection = (<span class="number">4</span>, <span class="number">6</span>, <span class="number">407</span>, <span class="number">304</span>) <span class="comment"># 设置初始追踪窗口</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.selection = (<span class="number">40</span>, <span class="number">54</span>, <span class="number">296</span>, <span class="number">230</span>)</span><br><span class="line">            self.tracking_state = <span class="number">1</span></span><br><span class="line">    <span class="comment">#        print "start"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_hist</span><span class="params">(self)</span>:</span> <span class="comment"># 直方图显示</span></span><br><span class="line">        bin_count = self.hist.shape[<span class="number">0</span>] <span class="comment"># hist在行数，在这里是16，即有16个条纹</span></span><br><span class="line">        print(<span class="string">"hist,bin"</span>,self.hist.shape, bin_count, self.hist)</span><br><span class="line"></span><br><span class="line">        bin_w = <span class="number">24</span> <span class="comment"># 每条条纹宽度</span></span><br><span class="line">        img = np.zeros((<span class="number">256</span>, bin_count*bin_w, <span class="number">3</span>), np.uint8) <span class="comment"># 初始化img图像，用于显示直方图，大小为256*(24*16)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(bin_count): <span class="comment"># 对每一条纹绘制</span></span><br><span class="line">            h = int(self.hist[i])</span><br><span class="line">            cv2.rectangle(img, (i*bin_w+<span class="number">2</span>, <span class="number">255</span>), ((i+<span class="number">1</span>)*bin_w<span class="number">-2</span>, <span class="number">255</span>-h), (int(<span class="number">180.0</span>*i/bin_count), <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line">        img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR) <span class="comment"># 将图像格式HSV转化成BGR</span></span><br><span class="line">        cv2.imshow(<span class="string">'hist'</span>, img)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#主要功能函数</span></span><br><span class="line">        roi = self.roi <span class="comment"># roi存放目标图像</span></span><br><span class="line">        self.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 死循环，通过Ctrl + C 退出</span></span><br><span class="line"><span class="comment">#         for frame in self.cam.capture_continuous(self.rCa, format='bgr', use_video_port=True):</span></span><br><span class="line">            ret, self.frame = self.cam.read() <span class="comment"># 通过摄像头获取图像</span></span><br><span class="line"><span class="comment">#             self.frame = frame.array        # frame为摄像头获取的图像</span></span><br><span class="line">            vis = self.frame.copy()           <span class="comment"># vis复制frame</span></span><br><span class="line"><span class="comment">#             vis = copy.deepcopy(self.frame)</span></span><br><span class="line">            hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">            mask = cv2.inRange(hsv, np.array((<span class="number">0.</span>, <span class="number">60.</span>, <span class="number">32.</span>)), np.array((<span class="number">180.</span>, <span class="number">255.</span>, <span class="number">255.</span>)))     <span class="comment"># 掩模图像。要统计整幅图像的直方图就把它设为 None。但是如 果你想统计图像某一部分的直方图的话，你就需要制作一个掩模图像，并 使用它。</span></span><br><span class="line"><span class="comment">#             self.selection = 1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.selection:</span><br><span class="line"><span class="comment">#                 x0, y0, x1, y1 = 220, 110, 358, 245</span></span><br><span class="line">                x0, y0, x1, y1 = self.selection</span><br><span class="line">                self.track_window = (x0, y0, x1-x0, y1-y0) <span class="comment"># 窗口缩小</span></span><br><span class="line"><span class="comment">#                 hsv_roi = hsv[y0:y1, x0:x1]</span></span><br><span class="line"><span class="comment">#                 mask_roi = mask[y0:y1, x0:x1]</span></span><br><span class="line">                hsv_roi = cv2. cvtColor(roi,cv2. COLOR_BGR2HSV)</span><br><span class="line">                mask_roi = cv2.inRange(hsv_roi, np.array((<span class="number">0.</span>, <span class="number">60.</span>, <span class="number">32.</span>)), np.array((<span class="number">180.</span>, <span class="number">255.</span>, <span class="number">255.</span>)))</span><br><span class="line">                <span class="comment">#一维直方图</span></span><br><span class="line">                hist = cv2.calcHist( [hsv_roi], [<span class="number">0</span>], mask_roi, [<span class="number">16</span>], [<span class="number">0</span>, <span class="number">180</span>] )</span><br><span class="line">                <span class="comment">#二维直方图</span></span><br><span class="line"><span class="comment">#                 hist = cv2.calcHist( [hsv_roi], [0,2],None, [180,256], [0, 180,0 , 255] )</span></span><br><span class="line"></span><br><span class="line">                cv2.normalize(hist, hist, <span class="number">0</span>, <span class="number">255</span>, cv2.NORM_MINMAX);</span><br><span class="line">                self.hist = hist.reshape(<span class="number">-1</span>)</span><br><span class="line">                <span class="comment">#二维直方图显示</span></span><br><span class="line"><span class="comment">#                 plt.imshow(hist,interpolation = 'nearest')</span></span><br><span class="line"><span class="comment">#                 plt.show()</span></span><br><span class="line">                self.show_hist()</span><br><span class="line"></span><br><span class="line">                vis_roi = vis[y0:y1, x0:x1]</span><br><span class="line">                cv2.bitwise_not(vis_roi, vis_roi) <span class="comment"># 颜色反转</span></span><br><span class="line">                vis[mask == <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.tracking_state == <span class="number">1</span>:</span><br><span class="line">                self.selection = <span class="literal">None</span></span><br><span class="line">                prob = cv2.calcBackProject([hsv], [<span class="number">0</span>], self.hist, [<span class="number">0</span>, <span class="number">180</span>], <span class="number">1</span>) <span class="comment"># 计算反向投影参数为：捕获的图片（转化成hsv格式），灰度值方式，目标图像直方图，直方图范围</span></span><br><span class="line">                prob &amp;= mask</span><br><span class="line">                term_crit = ( cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, <span class="number">10</span>, <span class="number">1</span> ) <span class="comment"># 跳出条件，迭代10次或至少移动一次</span></span><br><span class="line">                track_box, self.track_window = cv2.CamShift(prob, self.track_window, term_crit) <span class="comment"># 利用cameshift算法在追踪窗口中搜寻与直方图分布最相似的窗口，结果返回窗口和track_box</span></span><br><span class="line"><span class="comment">#                 if track_box[0][1] &lt;= 240:</span></span><br><span class="line"><span class="comment">#             self.ser.write(str(int(track_box[0][0])-320) + " " + str(int(track_box[0][1])-240))</span></span><br><span class="line"><span class="comment">#             print str(int(track_box[0][0])-320) + " " + str(int(track_box[0][1])-240)</span></span><br><span class="line">                <span class="keyword">if</span> track_box[<span class="number">1</span>][<span class="number">1</span>] &lt;= <span class="number">1</span>:</span><br><span class="line">                    self.tracking_state = <span class="number">0</span></span><br><span class="line">                    self.start()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.show_backproj:</span><br><span class="line">                        vis[:] = prob[...,np.newaxis]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        cv2.ellipse(vis, track_box, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)<span class="comment">#利用返回的track_box画出椭圆</span></span><br><span class="line"><span class="comment">#                         print track_box</span></span><br><span class="line">                        a = str(track_box[<span class="number">0</span>][<span class="number">0</span>])+<span class="string">" "</span>+str(track_box[<span class="number">0</span>][<span class="number">1</span>])+<span class="string">" "</span>+str(round(track_box[<span class="number">1</span>][<span class="number">0</span>],<span class="number">2</span>))\</span><br><span class="line">                                       +<span class="string">" "</span>+str(round(track_box[<span class="number">1</span>][<span class="number">1</span>],<span class="number">2</span>))+<span class="string">" "</span>+str(round(track_box[<span class="number">2</span>],<span class="number">2</span>))+<span class="string">"\r\n"</span></span><br><span class="line">                        <span class="keyword">print</span> a</span><br><span class="line"><span class="comment">#                         self.ser.write(a)</span></span><br><span class="line">                    <span class="keyword">except</span>: <span class="keyword">print</span> track_box</span><br><span class="line"></span><br><span class="line">            cv2.imshow(<span class="string">'camshift'</span>, vis)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 通过键盘输入来实现一些功能</span></span><br><span class="line">            ch = <span class="number">0xFF</span> &amp; cv2.waitKey(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> ch == ord(<span class="string">'b'</span>):</span><br><span class="line">                self.show_backproj = <span class="keyword">not</span> self.show_backproj</span><br><span class="line">            <span class="keyword">if</span> ch == ord(<span class="string">'r'</span>):</span><br><span class="line">                self.tracking_state = <span class="number">0</span></span><br><span class="line">                self.start()</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">try</span>: color = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>: color = <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> __doc__</span><br><span class="line">    a = App(color)</span><br><span class="line">    a.run()</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2019/02/04/cv8e8da.gif" alt="cv8e8da.gif"></p><p>video.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Video capture sample.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sample shows how VideoCapture class can be used to acquire video</span></span><br><span class="line"><span class="string">frames from a camera of a movie file. Also the sample provides</span></span><br><span class="line"><span class="string">an example of procedural video generation by an object, mimicking</span></span><br><span class="line"><span class="string">the VideoCapture interface (see Chess class).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'create_capture' is a convinience function for capture creation,</span></span><br><span class="line"><span class="string">falling back to procedural video in case of error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    video.py [--shotdir &lt;shot path&gt;] [source0] [source1] ...'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sourceN is an</span></span><br><span class="line"><span class="string">     - integer number for camera capture</span></span><br><span class="line"><span class="string">     - name of video file</span></span><br><span class="line"><span class="string">     - synth:&lt;params&gt; for procedural video</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Synth examples:</span></span><br><span class="line"><span class="string">    synth:bg=../cpp/lena.jpg:noise=0.1</span></span><br><span class="line"><span class="string">    synth:class=chess:bg=../cpp/lena.jpg:noise=0.1:size=640x480</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Keys:</span></span><br><span class="line"><span class="string">    ESC    - exit</span></span><br><span class="line"><span class="string">    SPACE  - save current frame to &lt;shot path&gt; director</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> clock</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi, sin, cos</span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSynthBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size=None, noise=<span class="number">0.0</span>, bg = None, **params)</span>:</span></span><br><span class="line">        self.bg = <span class="literal">None</span></span><br><span class="line">        self.frame_size = (<span class="number">1000</span>, <span class="number">480</span>)</span><br><span class="line"><span class="comment">#         self.frame_size = (640, 480)</span></span><br><span class="line">        <span class="keyword">if</span> bg <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.bg = cv2.imread(bg, <span class="number">1</span>)</span><br><span class="line">            h, w = self.bg.shape[:<span class="number">2</span>]</span><br><span class="line">            self.frame_size = (w, h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            w, h = map(int, size.split(<span class="string">'x'</span>))</span><br><span class="line">            self.frame_size = (w, h)</span><br><span class="line">            self.bg = cv2.resize(self.bg, self.frame_size)</span><br><span class="line"></span><br><span class="line">        self.noise = float(noise)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, dst)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, dst=None)</span>:</span></span><br><span class="line">        w, h = self.frame_size</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.bg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            buf = np.zeros((h, w, <span class="number">3</span>), np.uint8)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            buf = self.bg.copy()</span><br><span class="line"></span><br><span class="line">        self.render(buf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.noise &gt; <span class="number">0.0</span>:</span><br><span class="line">            noise = np.zeros((h, w, <span class="number">3</span>), np.int8)</span><br><span class="line">            cv2.randn(noise, np.zeros(<span class="number">3</span>), np.ones(<span class="number">3</span>)*<span class="number">255</span>*self.noise)</span><br><span class="line">            buf = cv2.add(buf, noise, dtype=cv2.CV_8UC3)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, buf</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isOpened</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span><span class="params">(VideoSynthBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super(Chess, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">        w, h = self.frame_size</span><br><span class="line"></span><br><span class="line">        self.grid_size = sx, sy = <span class="number">10</span>, <span class="number">7</span></span><br><span class="line">        white_quads = []</span><br><span class="line">        black_quads = []</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> np.ndindex(sy, sx):</span><br><span class="line">            q = [[j, i, <span class="number">0</span>], [j+<span class="number">1</span>, i, <span class="number">0</span>], [j+<span class="number">1</span>, i+<span class="number">1</span>, <span class="number">0</span>], [j, i+<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">            [white_quads, black_quads][(i + j) % <span class="number">2</span>].append(q)</span><br><span class="line">        self.white_quads = np.float32(white_quads)</span><br><span class="line">        self.black_quads = np.float32(black_quads)</span><br><span class="line"></span><br><span class="line">        fx = <span class="number">0.9</span></span><br><span class="line">        self.K = np.float64([[fx*w, <span class="number">0</span>, <span class="number">0.5</span>*(w<span class="number">-1</span>)],</span><br><span class="line">                        [<span class="number">0</span>, fx*w, <span class="number">0.5</span>*(h<span class="number">-1</span>)],</span><br><span class="line">                        [<span class="number">0.0</span>,<span class="number">0.0</span>,      <span class="number">1.0</span>]])</span><br><span class="line"></span><br><span class="line">        self.dist_coef = np.float64([<span class="number">-0.2</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        self.t = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_quads</span><span class="params">(self, img, quads, color = <span class="params">(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span>)</span>:</span></span><br><span class="line">        img_quads = cv2.projectPoints(quads.reshape(<span class="number">-1</span>, <span class="number">3</span>), self.rvec, self.tvec, self.K, self.dist_coef) [<span class="number">0</span>]</span><br><span class="line">        img_quads.shape = quads.shape[:<span class="number">2</span>] + (<span class="number">2</span>,)</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> img_quads:</span><br><span class="line">            cv2.fillConvexPoly(img, np.int32(q*<span class="number">4</span>), color, cv2.CV_AA, shift=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, dst)</span>:</span></span><br><span class="line">        t = self.t</span><br><span class="line">        self.t += <span class="number">1.0</span>/<span class="number">30.0</span></span><br><span class="line"></span><br><span class="line">        sx, sy = self.grid_size</span><br><span class="line">        center = np.array([<span class="number">0.5</span>*sx, <span class="number">0.5</span>*sy, <span class="number">0.0</span>])</span><br><span class="line">        phi = pi/<span class="number">3</span> + sin(t*<span class="number">3</span>)*pi/<span class="number">8</span></span><br><span class="line">        c, s = cos(phi), sin(phi)</span><br><span class="line">        ofs = np.array([sin(<span class="number">1.2</span>*t), cos(<span class="number">1.8</span>*t), <span class="number">0</span>]) * sx * <span class="number">0.2</span></span><br><span class="line">        eye_pos = center + np.array([cos(t)*c, sin(t)*c, s]) * <span class="number">15.0</span> + ofs</span><br><span class="line">        target_pos = center + ofs</span><br><span class="line"></span><br><span class="line">        R, self.tvec = common.lookat(eye_pos, target_pos)</span><br><span class="line">        self.rvec = common.mtx2rvec(R)</span><br><span class="line"></span><br><span class="line">        self.draw_quads(dst, self.white_quads, (<span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>))</span><br><span class="line">        self.draw_quads(dst, self.black_quads, (<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classes = dict(chess=Chess)</span><br><span class="line"></span><br><span class="line">presets = dict(</span><br><span class="line">    empty = <span class="string">'synth:'</span>,</span><br><span class="line">    lena = <span class="string">'synth:bg=../cpp/lena.jpg:noise=0.1'</span>,</span><br><span class="line">    chess = <span class="string">'synth:class=chess:bg=../cpp/lena.jpg:noise=0.1:size=640x480'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_capture</span><span class="params">(source = <span class="number">0</span>, fallback = presets[<span class="string">'chess'</span>])</span>:</span></span><br><span class="line">    <span class="string">'''source: &lt;int&gt; or '&lt;int&gt;|&lt;filename&gt;|synth [:&lt;param_name&gt;=&lt;value&gt; [:...]]'</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    source = str(source).strip()</span><br><span class="line">    chunks = source.split(<span class="string">':'</span>)</span><br><span class="line">    <span class="comment"># hanlde drive letter ('c:', ...)</span></span><br><span class="line">    <span class="keyword">if</span> len(chunks) &gt; <span class="number">1</span> <span class="keyword">and</span> len(chunks[<span class="number">0</span>]) == <span class="number">1</span> <span class="keyword">and</span> chunks[<span class="number">0</span>].isalpha():</span><br><span class="line">        chunks[<span class="number">1</span>] = chunks[<span class="number">0</span>] + <span class="string">':'</span> + chunks[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">del</span> chunks[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    source = chunks[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">try</span>: source = int(source)</span><br><span class="line">    <span class="keyword">except</span> ValueError: <span class="keyword">pass</span></span><br><span class="line">    params = dict( s.split(<span class="string">'='</span>) <span class="keyword">for</span> s <span class="keyword">in</span> chunks[<span class="number">1</span>:] )</span><br><span class="line"></span><br><span class="line">    cap = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> source == <span class="string">'synth'</span>:</span><br><span class="line">        Class = classes.get(params.get(<span class="string">'class'</span>, <span class="literal">None</span>), VideoSynthBase)</span><br><span class="line">        <span class="keyword">try</span>: cap = Class(**params)</span><br><span class="line">        <span class="keyword">except</span>: <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cap = cv2.VideoCapture(source)</span><br><span class="line">        params[<span class="string">"size"</span>] = <span class="string">"320x240"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'size'</span> <span class="keyword">in</span> params:</span><br><span class="line">            w, h = map(int, params[<span class="string">'size'</span>].split(<span class="string">'x'</span>))</span><br><span class="line">            cap.set(cv2.CAP_PROP_FRAME_WIDTH, w)</span><br><span class="line">            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, h)</span><br><span class="line">    <span class="keyword">if</span> cap <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        print(<span class="string">'Warning: unable to open video source: '</span>, source)</span><br><span class="line">        <span class="keyword">if</span> fallback <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> create_capture(fallback, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> cap</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> getopt</span><br><span class="line"></span><br><span class="line">    print(__doc__)</span><br><span class="line"></span><br><span class="line">    args, sources = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">''</span>, <span class="string">'shotdir='</span>)</span><br><span class="line">    args = dict(args)</span><br><span class="line">    shotdir = args.get(<span class="string">'--shotdir'</span>, <span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sources) == <span class="number">0</span>:</span><br><span class="line">        sources = [ <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line">    caps = map(create_capture, sources)</span><br><span class="line">    shot_idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        imgs = []</span><br><span class="line">        <span class="keyword">for</span> i, cap <span class="keyword">in</span> enumerate(caps):</span><br><span class="line">            ret, img = cap.read()</span><br><span class="line">            imgs.append(img)</span><br><span class="line">            cv2.imshow(<span class="string">'capture %d'</span> % i, img)</span><br><span class="line">        ch = <span class="number">0xFF</span> &amp; cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> ch == ord(<span class="string">' '</span>):</span><br><span class="line">            <span class="keyword">for</span> i, img <span class="keyword">in</span> enumerate(imgs):</span><br><span class="line">                fn = <span class="string">'%s/shot_%d_%03d.bmp'</span> % (shotdir, i, shot_idx)</span><br><span class="line">                cv2.imwrite(fn, img)</span><br><span class="line">                print(fn, <span class="string">'saved'</span>)</span><br><span class="line">            shot_idx += <span class="number">1</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ol><li><a href="https://blog.csdn.net/tiemaxiaosu/article/details/51649401" target="_blank" rel="noopener">https://blog.csdn.net/tiemaxiaosu/article/details/51649401</a></li><li><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/video/doc/motion_analysis_and_object_tracking.html?highlight=camshift#cv2.CamShift" target="_blank" rel="noopener">http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/video/doc/motion_analysis_and_object_tracking.html?highlight=camshift#cv2.CamShift</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇post是智能机器人技术实验&lt;/p&gt;
&lt;h1 id=&quot;实验-1-基于OpenCV的颜色特征识别&quot;&gt;&lt;a href=&quot;#实验-1-基于OpenCV的颜色特征识别&quot; class=&quot;headerlink&quot; title=&quot;实验 1 基于OpenCV的颜色特征识别&quot;&gt;&lt;/a&gt;实验 1 基于OpenCV的颜色特征识别&lt;/h1&gt;
    
    </summary>
    
      <category term="CV" scheme="http://looby.coding.me/betterming/categories/CV/"/>
    
    
      <category term="CV" scheme="http://looby.coding.me/betterming/tags/CV/"/>
    
      <category term="OpenCV" scheme="http://looby.coding.me/betterming/tags/OpenCV/"/>
    
      <category term="Linux" scheme="http://looby.coding.me/betterming/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>pycharm安装和破解</title>
    <link href="http://looby.coding.me/betterming/post/b2bb211a.html"/>
    <id>http://looby.coding.me/betterming/post/b2bb211a.html</id>
    <published>2018-12-04T09:05:31.000Z</published>
    <updated>2019-05-19T12:22:55.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pycharm2017专业破解版"><a href="#pycharm2017专业破解版" class="headerlink" title="pycharm2017专业破解版"></a>pycharm2017专业破解版</h1><h2 id="1-安装pycharm安装包"><a href="#1-安装pycharm安装包" class="headerlink" title="1. 安装pycharm安装包"></a>1. 安装pycharm安装包</h2><a id="more"></a><p>链接: <a href="https://pan.baidu.com/s/1uxmCo8VJiHVbBCQw5RIMEw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uxmCo8VJiHVbBCQw5RIMEw</a> 提取码: 6666</p><p>正常安装即可</p><h2 id="2-下载jar包"><a href="#2-下载jar包" class="headerlink" title="2. 下载jar包"></a>2. 下载jar包</h2><p>链接: <a href="https://pan.baidu.com/s/1p9DFN0X7rq0N0Y2iapKMDA" target="_blank" rel="noopener">https://pan.baidu.com/s/1p9DFN0X7rq0N0Y2iapKMDA</a> 提取码: 6666</p><h2 id="3-文件修改"><a href="#3-文件修改" class="headerlink" title="3. 文件修改"></a>3. 文件修改</h2><p><img src="https://miao.su/images/2019/02/06/pycharmba38d.png" alt="pycharmba38d.png"></p><p>将下载的jar包放入pycharm安装目录的/bin下, 并修改两个以 vmoptions为结尾的启动文件。将改启动文件以记事本形式打开然后分别在最后加上以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:jar包所在目录\JetbrainsCrack-2.6.10-release-enc.jar</span><br></pre></td></tr></table></figure></p><h2 id="4-破解"><a href="#4-破解" class="headerlink" title="4. 破解"></a>4. 破解</h2><p>重启pycharm 后在下图中点击 Activation code 然后复制以下代码后点击Activate</p><p>​    <img src="https://miao.su/images/2019/02/06/pp16612.png" alt="pp16612.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9</span><br></pre></td></tr></table></figure><h1 id="5-查看"><a href="#5-查看" class="headerlink" title="5. 查看"></a>5. 查看</h1><p>打开pycharm点击help-&gt;about查看</p><p><img src="https://miao.su/images/2019/02/06/license7e09a.png" alt="license7e09a.png"></p><p>发现一直到2099年12月31日才过期。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pycharm2017专业破解版&quot;&gt;&lt;a href=&quot;#pycharm2017专业破解版&quot; class=&quot;headerlink&quot; title=&quot;pycharm2017专业破解版&quot;&gt;&lt;/a&gt;pycharm2017专业破解版&lt;/h1&gt;&lt;h2 id=&quot;1-安装pycharm安装包&quot;&gt;&lt;a href=&quot;#1-安装pycharm安装包&quot; class=&quot;headerlink&quot; title=&quot;1. 安装pycharm安装包&quot;&gt;&lt;/a&gt;1. 安装pycharm安装包&lt;/h2&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://looby.coding.me/betterming/categories/Technique/"/>
    
    
      <category term="pycharm" scheme="http://looby.coding.me/betterming/tags/pycharm/"/>
    
      <category term="破解" scheme="http://looby.coding.me/betterming/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>线性表二</title>
    <link href="http://looby.coding.me/betterming/post/765aa586.html"/>
    <id>http://looby.coding.me/betterming/post/765aa586.html</id>
    <published>2018-11-30T04:41:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-Remove-Duplicates-from-Sorted-List"><a href="#3-Remove-Duplicates-from-Sorted-List" class="headerlink" title="3. Remove Duplicates from Sorted List"></a>3. Remove Duplicates from Sorted List</h1><a id="more"></a><p><strong>Description:</strong><br>Given a sorted linked list, delete all duplicates such that each element appear only once.</p><p>Example 1:</p><blockquote><p>Input: 1-&gt;1-&gt;2<br>Output: 1-&gt;2</p></blockquote><p>Example 2:</p><blockquote><p>Input: 1-&gt;1-&gt;2-&gt;3-&gt;3<br>Output: 1-&gt;2-&gt;3</p></blockquote><p><strong>Analysis:</strong></p><p>迭代法</p><p><strong>Solution:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">ListNode *pre = head, *p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="keyword">if</span>(pre-&gt;val == p-&gt;val) &#123;</span><br><span class="line">pre-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-Remove-Duplicates-from-Sorted-List&quot;&gt;&lt;a href=&quot;#3-Remove-Duplicates-from-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;3. Remove Duplicates from Sorted List&quot;&gt;&lt;/a&gt;3. Remove Duplicates from Sorted List&lt;/h1&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://looby.coding.me/betterming/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://looby.coding.me/betterming/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="线性表" scheme="http://looby.coding.me/betterming/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表一</title>
    <link href="http://looby.coding.me/betterming/post/4dda8b2f.html"/>
    <id>http://looby.coding.me/betterming/post/4dda8b2f.html</id>
    <published>2018-11-29T13:29:00.000Z</published>
    <updated>2019-02-06T14:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><center><font color="purple">从今天起，开启一个新专题，刷 LeetCode!</font></center></em></p><p><img src="leetcode/luffy.jpg" alt="luffy"></p><p><strong><center><font size="6" face="行楷">线性表一</font></center></strong><br><a id="more"></a><br>&emsp;&emsp;下面都是很简单的小题，先熟悉熟悉。。。</p><h1 id="1-Remove-Duplicates-from-Sorted-Array"><a href="#1-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="1. Remove Duplicates from Sorted Array"></a>1. Remove Duplicates from Sorted Array</h1><p><strong>Description:</strong><br>&emsp;Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.<br>&emsp;Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,2],</span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">5</span>, with the first five elements of nums being modified to <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">and</span> <span class="number">4</span> respectively.</span><br><span class="line">It doesn’t matter what values are <span class="built_in">set</span> beyond the returned length.</span><br></pre></td></tr></table></figure></p><p><strong>Analysis:</strong><br>So easy, nothing to say!</p><p><strong>Solution:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[count] != nums[i]) nums[++count] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-Search-in-Rotated-Sorted-Array"><a href="#2-Search-in-Rotated-Sorted-Array" class="headerlink" title="2. Search in Rotated Sorted Array"></a>2. Search in Rotated Sorted Array</h1><p><strong>Description:</strong></p><p>&emsp;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).<br>&emsp;You are given a target value to search. If found in the array return its index, otherwise return -1.<br>&emsp;You may assume no duplicate exists in the array.<br>&emsp;Your algorithm’s runtime complexity must be in the order of O(logn).</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p><p><strong>Analysis:</strong><br>O(logn)很明显用二分查找，主要在于判断mid在pivot的左侧还是右侧。</p><p><strong>Solution:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.size();</span><br><span class="line">        <span class="keyword">while</span>(left != right) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 用const那能显著减少运行时间，不用mid = (left + right) / 2 主要考虑left，right是两个大数相加可能会溢出。</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= nums[left]) &#123; <span class="comment">// 说明mid在左侧</span></span><br><span class="line">                <span class="keyword">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid]) right = mid;</span><br><span class="line">                <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// mid在右侧</span></span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right<span class="number">-1</span>]) left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;center&gt;&lt;font color=&quot;purple&quot;&gt;从今天起，开启一个新专题，刷 LeetCode!&lt;/font&gt;&lt;/center&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;leetcode/luffy.jpg&quot; alt=&quot;luffy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;font size=&quot;6&quot; face=&quot;行楷&quot;&gt;线性表一&lt;/font&gt;&lt;/center&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://looby.coding.me/betterming/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://looby.coding.me/betterming/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="线性表" scheme="http://looby.coding.me/betterming/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>DFS</title>
    <link href="http://looby.coding.me/betterming/post/dc9314c3.html"/>
    <id>http://looby.coding.me/betterming/post/dc9314c3.html</id>
    <published>2018-11-25T15:05:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背包问题"><a href="#1-背包问题" class="headerlink" title="1. 背包问题"></a>1. 背包问题</h1><a id="more"></a><blockquote><p>问题描叙：n件物品，物重数组w[i],价值数组c[i],从中取出若干物品放入一容器为V的背包中，使总质量少于V，而背包中物品价值之和最大。求最大价值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,V,maxValue=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn],c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sumW,<span class="keyword">int</span> sumC)</span></span>&#123;</span><br><span class="line"><span class="comment">//出口为index增长到n，sumW,sumC满足条件时更新maxValue后结束</span></span><br><span class="line"><span class="keyword">if</span>(index==n)&#123;</span><br><span class="line"><span class="keyword">if</span>(sumW&lt;=V &amp;&amp; sumC&gt;maxValue) maxValue=sumC;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DFS(index+<span class="number">1</span>,sumW,sumC);</span><br><span class="line">DFS(index+<span class="number">1</span>,sumW+w[index],sumC+c[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;V);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line"></span><br><span class="line">DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxValue);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-在DFS的基础上的修改"><a href="#2-在DFS的基础上的修改" class="headerlink" title="2. 在DFS的基础上的修改"></a>2. 在DFS的基础上的修改</h1><p>在要进入选择index时，设置进入条件。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,V,maxValue=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn],c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sumW,<span class="keyword">int</span> sumC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index==n) <span class="keyword">return</span>;</span><br><span class="line">DFS(index+<span class="number">1</span>,sumW,sumC);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sumW+w[index]&lt;=V)&#123;</span><br><span class="line"><span class="keyword">if</span>(sumC+c[index]&gt;maxValue)</span><br><span class="line">maxValue=sumC+c[index];</span><br><span class="line">DFS(index+<span class="number">1</span>,sumW+w[index],sumC+c[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;V);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line"></span><br><span class="line">DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxValue);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-延伸"><a href="#3-延伸" class="headerlink" title="3. 延伸"></a>3. 延伸</h1><blockquote><p>枚举从n个整数中选则K个数的所有方案使其满足某种条件<br>问题描述：n个整数，从中选择K个数，使得这k个数之和恰好等于一个给定的整数X，如果有多个方案，选择他们中平方和最大的一个。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,x,maxSumsqu=<span class="number">-1</span>,A[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> nowk,<span class="keyword">int</span> sum,<span class="keyword">int</span> sumsqu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nowk==k &amp;&amp; sum==x)&#123;</span><br><span class="line"><span class="keyword">if</span>(sumsqu&gt;maxSumsqu)&#123;</span><br><span class="line">maxSumsqu=sumsqu;</span><br><span class="line">ans=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index==n || nowk&gt;k || sum&gt;x) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择index时，先要将A[index]放入temp数组中。</span></span><br><span class="line">temp.push_back(A[index]);</span><br><span class="line"></span><br><span class="line">DFS(index+<span class="number">1</span>,nowk+<span class="number">1</span>,sum+A[index],sumsqu+A[index]*A[index]);</span><br><span class="line">temp.pop_back();</span><br><span class="line">DFS(index+<span class="number">1</span>,nowk,sum,sumsqu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-背包问题&quot;&gt;&lt;a href=&quot;#1-背包问题&quot; class=&quot;headerlink&quot; title=&quot;1. 背包问题&quot;&gt;&lt;/a&gt;1. 背包问题&lt;/h1&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/tags/Algorithm/"/>
    
      <category term="DFS" scheme="http://looby.coding.me/betterming/tags/DFS/"/>
    
      <category term="背包问题" scheme="http://looby.coding.me/betterming/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>实算实验4之利用队列实现二叉树的层次遍历</title>
    <link href="http://looby.coding.me/betterming/post/7b246c0.html"/>
    <id>http://looby.coding.me/betterming/post/7b246c0.html</id>
    <published>2018-11-22T09:50:16.000Z</published>
    <updated>2019-05-19T12:39:50.192Z</updated>
    
    <content type="html"><![CDATA[<p><strong><center>实验4 利用队列实现二叉树的层次遍历（4课时）</center></strong><br><a id="more"></a></p><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1. 实验目的:"></a>1. 实验目的:</h1><p>理解队列的受限操作（在一端插入，另一端删除）以及先进先出的特性，体会队列的应用场景的特点；</p><p>能利用《程序员实用算法》的程序清单2-9和2-10中的现有函数来解决实际应用问题。</p><h1 id="2-实验要求"><a href="#2-实验要求" class="headerlink" title="2. 实验要求:"></a>2. 实验要求:</h1><p>应用需求：要求实现：若键盘输入t，则对当前二叉树进行非递归的层次遍历，并打印出来。（比如，若二叉树为：</p><p><a href="https://miao.su/image/HLmrw" target="_blank" rel="noopener"><img src="https://miao.su/images/2019/02/06/331a7bd35194e49e8b1d6.png" alt="331a7bd35194e49e8b1d6.png"></a><br>则层次遍历后，打印出的结果为“33,23,44,12,37,46”。）</p><p><strong>问题描述</strong>：利用队列作为数据结构来实现非递归的二叉树层次遍历的函数。</p><p><strong>算法思想：</strong></p><p><strong>关键：</strong>实现非递归的二叉树层次遍历的函数（函数原型为：int LevelTraBintree(Bintree *t, DoFunc df);</p><blockquote><p>输入：二叉排序树t，节点的操作函数df；<br>输出：若是空树，则返回TREE_FAIL；否则，返回TREE_OK.</p></blockquote><h1 id="3-算法设计思路："><a href="#3-算法设计思路：" class="headerlink" title="3. 算法设计思路："></a>3. 算法设计思路：</h1><ul><li>分别创建队列和空闲列表；</li><li>为空闲链表分配QMAX个结点；</li><li>若二叉树为空，则退出程序；</li><li>将二叉树根节点入队；</li><li>重复执行下列操作，直至队列为空。<ul><li>1）将队头节点出队并打印出其值；</li><li>2）若出队节点有左子树，则将该节点的左孩子入队；</li><li>3）若出队节点有右子树，则将该节点的右孩子入队；</li></ul></li><li>返回成功，程序退出。</li></ul><h1 id="4-代码与分析"><a href="#4-代码与分析" class="headerlink" title="4. 代码与分析"></a>4. 代码与分析</h1><h2 id="4-1-1-头文件qapp-h：队列节点的定义与创建"><a href="#4-1-1-头文件qapp-h：队列节点的定义与创建" class="headerlink" title="4.1.1 头文件qapp.h：队列节点的定义与创建"></a>4.1.1 头文件qapp.h：队列节点的定义与创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- qapp.h ------------------------------ Listing 2-9 --------</span></span><br><span class="line"><span class="comment"> *  Application-specific data items for linked-list queues.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QAPP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QAPP_H 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Our first list's nodes consist of a pointer to</span></span><br><span class="line"><span class="comment"> *  text and a priority level.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_SIZE 20    <span class="comment">/* the maximum size of our text string */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">DataCopy</span> <span class="params">( <span class="keyword">void</span> *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The data and functions for the queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeData1</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NodeData1</span> *<span class="title">link</span>[2];</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NodeData1</span> * <span class="title">pND1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> * <span class="title">CreateData1</span> <span class="params">( <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">DeleteData1</span> <span class="params">( <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">DuplicatedNode1</span> <span class="params">( Link, Link )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">NodeDataCmp1</span> <span class="params">( <span class="keyword">void</span> *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  The free list has identical nodes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeData2</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NodeData2</span> *<span class="title">link</span>[2];</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NodeData2</span> * <span class="title">pND2</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> * <span class="title">CreateData2</span> <span class="params">( <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">DeleteData2</span> <span class="params">( <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">DuplicatedNode2</span> <span class="params">( Link, Link )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>    <span class="title">NodeDataCmp2</span> <span class="params">( <span class="keyword">void</span> *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="4-1-2-接口qapp-c：队列函数的具体定义"><a href="#4-1-2-接口qapp-c：队列函数的具体定义" class="headerlink" title="4.1.2 接口qapp.c：队列函数的具体定义"></a>4.1.2 接口qapp.c：队列函数的具体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- qapp.c ------------------------------ Listing 2-10 --------</span></span><br><span class="line"><span class="comment"> *  Application-specific functions for queue examples.</span></span><br><span class="line"><span class="comment"> *  Replace these routines with your own.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;         /* for free() */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;         /* for strcmp() and strdup() */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"llgen.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"qapp.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=== linked-list functions for queue ===*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * our nodes come from the free list,</span></span><br><span class="line"><span class="comment"> * so this function is never called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">CreateData1</span> <span class="params">( <span class="keyword">void</span> * data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteData1</span> <span class="params">( <span class="keyword">void</span> * data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In this case, NodeData1 consists of a pointer and an int.</span></span><br><span class="line"><span class="comment">     * The integer will be returned to memory when the node</span></span><br><span class="line"><span class="comment">     * is freed. However, the string must be freed manually.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//free ( ((pND1) data)-&gt;text );//yyw</span></span><br><span class="line">     <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * This function determines what to do when inserting a node</span></span><br><span class="line"><span class="comment"> * into a list if an existing node with the same data is found</span></span><br><span class="line"><span class="comment"> * in the list. In this case, since we are counting words, if a</span></span><br><span class="line"><span class="comment"> * duplicate word is found, we simply increment the counter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note this function should return one of the following values:</span></span><br><span class="line"><span class="comment"> *      0       an error occurred</span></span><br><span class="line"><span class="comment"> *      1       delete the duplicate node</span></span><br><span class="line"><span class="comment"> *      2       insert the duplicate node</span></span><br><span class="line"><span class="comment"> * Any other processing on the duplicate should be done in this</span></span><br><span class="line"><span class="comment"> * function.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DuplicatedNode1</span> <span class="params">( Link new_node, Link list_node )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compare only the priority of the queue data */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeDataCmp1</span> <span class="params">( <span class="keyword">void</span> *first, <span class="keyword">void</span> *second )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=== Now the functions for the list of free nodes ===*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* data is a priority level (int) and text (string) */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">CreateData2</span> <span class="params">( <span class="keyword">void</span> * data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NodeData2</span> * <span class="title">new_data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--- allocate our data structure ---*/</span></span><br><span class="line"></span><br><span class="line">    new_data = (struct NodeData2 *)<span class="built_in">malloc</span> ( <span class="keyword">sizeof</span> ( struct NodeData2 ));</span><br><span class="line">    <span class="keyword">if</span> ( new_data == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="comment">/*--- move the values into the data structure ---*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * we assign a priority of 0</span></span><br><span class="line"><span class="comment">     * and allocate a string of TEXT_SIZE + 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">new_data-&gt;link[<span class="number">0</span>]=<span class="literal">NULL</span>;</span><br><span class="line">new_data-&gt;link[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//new_data-&gt;text == (char *)malloc (TEXT_SIZE+1);//yyw</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( new_data-&gt;text == <span class="literal">NULL</span> )   <span class="comment">/* error copying string */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span> ( new_data );</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ( new_data ); <span class="comment">/* return a complete structure */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteData2</span> <span class="params">( <span class="keyword">void</span> * data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In this case, NodeData2 consists of a pointer.</span></span><br><span class="line"><span class="comment">     * The string must be freed manually.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//free ( ((pND2) data)-&gt;text );</span></span><br><span class="line">     <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this list inserts duplicated nodes */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DuplicatedNode2</span> <span class="params">( Link new_node, Link list_node )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this function is never called */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeDataCmp2</span> <span class="params">( <span class="keyword">void</span> *first, <span class="keyword">void</span> *second )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* function to copy our data */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DataCopy</span> <span class="params">( <span class="keyword">void</span> * dest, <span class="keyword">void</span> * src )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pND2 s,d;</span><br><span class="line">    s = src;</span><br><span class="line">    d = dest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( dest == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">/*printf ( "About to copy %s \n",</span></span><br><span class="line"><span class="comment">                s-&gt;text );*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span> ( d-&gt;text, s-&gt;text, TEXT_SIZE );</span><br><span class="line">d-&gt;link[<span class="number">0</span>]=s-&gt;link[<span class="number">0</span>];</span><br><span class="line">d-&gt;link[<span class="number">1</span>]=s-&gt;link[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-1-头文件llgen-h-链表的声明"><a href="#4-2-1-头文件llgen-h-链表的声明" class="headerlink" title="4.2.1 头文件llgen.h:链表的声明"></a>4.2.1 头文件llgen.h:链表的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- llgen.h ----------------------------- Listing 2-2 ---------</span></span><br><span class="line"><span class="comment"> *  Declarations for generic doubly linked lists.</span></span><br><span class="line"><span class="comment"> *  Used in conjunction with llgen.c (Listing 2-3).</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LLGEN_H       <span class="comment">/* make sure it's included only once */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLGEN_H    1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>     *<span class="title">prev</span>;</span>  <span class="comment">/* link to previous node */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>     *<span class="title">next</span>;</span>  <span class="comment">/* link to next node */</span></span><br><span class="line">    <span class="keyword">void</span>            *pdata; <span class="comment">/* generic pointer to data */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Link</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* a linked list data structure */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span> &#123;</span></span><br><span class="line">    Link            LHead;</span><br><span class="line">    Link            LTail;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>    LCount;</span><br><span class="line">    <span class="keyword">void</span> * ( * LCreateData )     ( <span class="keyword">void</span> * );</span><br><span class="line">    <span class="keyword">int</span>    ( * LDeleteData )     ( <span class="keyword">void</span> * );</span><br><span class="line">    <span class="keyword">int</span>    ( * LDuplicatedNode ) ( Link, Link );</span><br><span class="line">    <span class="keyword">int</span>    ( * LNodeDataCmp )    ( <span class="keyword">void</span> *, <span class="keyword">void</span> * );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The four functions specific to an individual linked list are:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   LCreateData:  is passed a pointer to an application-defined</span></span><br><span class="line"><span class="comment">                 object and is expected to return a pointer to</span></span><br><span class="line"><span class="comment">                 whatever is to be stored in the linked list.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   LDeleteData:  is passed a pointer to the object an application</span></span><br><span class="line"><span class="comment">                 has stored in a linked list. LDeleteData must</span></span><br><span class="line"><span class="comment">                 destroy the object.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   LDuplicatedNode: is passed two pointers. The first pointer is</span></span><br><span class="line"><span class="comment">                    to a node that you would like to add to a</span></span><br><span class="line"><span class="comment">                    linked list and the second is to a node that</span></span><br><span class="line"><span class="comment">                    is already in the list but is a duplicate of</span></span><br><span class="line"><span class="comment">                    the first pointer.</span></span><br><span class="line"><span class="comment">                    LDuplicatedNode returns:</span></span><br><span class="line"><span class="comment">                            0 -&gt; do nothing to list</span></span><br><span class="line"><span class="comment">                            1 -&gt; destroy duplicate</span></span><br><span class="line"><span class="comment">                            2 -&gt; add duplicate to list</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   LNodeDataCmp: is passed pointers to two application data</span></span><br><span class="line"><span class="comment">                 objects and must compare them, returning a</span></span><br><span class="line"><span class="comment">                 number that is &lt; 0, zero, or &gt; 0, depending on</span></span><br><span class="line"><span class="comment">                 the relationship between the first and second</span></span><br><span class="line"><span class="comment">                 objects.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*--- generic linked-list primitives ---*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">AddNodeAscend</span>  <span class="params">( struct List *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">AddNodeAtHead</span>  <span class="params">( struct List *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function">struct List * <span class="title">CreateLList</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">void</span> * ( * ) ( <span class="keyword">void</span> * ),       <span class="comment">/* create data */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * ) ( <span class="keyword">void</span> * ),       <span class="comment">/* delete data */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * ) ( Link, Link ),   <span class="comment">/* duplicate   */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * )  ( <span class="keyword">void</span> *, <span class="keyword">void</span> * ))</span></span>; <span class="comment">/* compare */</span></span><br><span class="line"><span class="function">Link <span class="title">CreateNode</span>     <span class="params">( struct List * , <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">DeleteNode</span>     <span class="params">( struct List *, Link )</span></span>;</span><br><span class="line"><span class="function">Link <span class="title">FindNode</span>       <span class="params">( struct List *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function">Link <span class="title">FindNodeAscend</span> <span class="params">( struct List *, <span class="keyword">void</span> * )</span></span>;</span><br><span class="line"><span class="function">Link <span class="title">GotoNext</span>       <span class="params">( struct List *, Link )</span></span>;</span><br><span class="line"><span class="function">Link <span class="title">GotoPrev</span>       <span class="params">( struct List *, Link )</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="4-2-2-接口llgen-c：链表函数的具体定义"><a href="#4-2-2-接口llgen-c：链表函数的具体定义" class="headerlink" title="4.2.2 接口llgen.c：链表函数的具体定义"></a>4.2.2 接口llgen.c：链表函数的具体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- llgen.c ------------------------------ Listing 2-3 --------</span></span><br><span class="line"><span class="comment"> *  Generic primitive functions for doubly linked lists.</span></span><br><span class="line"><span class="comment"> *  Contains no application-specific functions.</span></span><br><span class="line"><span class="comment"> *  Functions are in alphabetical order.</span></span><br><span class="line"><span class="comment"> *------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN_LL_LIB   1   <span class="comment">/* in the library of primitives */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"llgen.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*--- Aliases to make the code more readable ---*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLHead (L-&gt;LHead)      <span class="comment">/* The head of the current list */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLTail (L-&gt;LTail)      <span class="comment">/* The tail of the current list */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NodeCount (L-&gt;LCount)  <span class="comment">/* Nodes in the current list */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CreateData     (*(L-&gt;LCreateData))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DeleteData     (*(L-&gt;LDeleteData))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DuplicatedNode (*(L-&gt;LDuplicatedNode))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NodeDataCmp    (*(L-&gt;LNodeDataCmp))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Add a node at head: first allocate the space for</span></span><br><span class="line"><span class="comment"> * the data, then allocate a node with a pointer to</span></span><br><span class="line"><span class="comment"> * the data, then add the node to the list.</span></span><br><span class="line"><span class="comment"> *--------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddNodeAtHead</span> <span class="params">( struct List *L, <span class="keyword">void</span> *nd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link pn;</span><br><span class="line"></span><br><span class="line">    pn = CreateNode ( L, nd );</span><br><span class="line">    <span class="keyword">if</span> ( pn == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--- Add the node ---*/</span></span><br><span class="line">    <span class="keyword">if</span> ( LLHead == <span class="literal">NULL</span> )   <span class="comment">/* is it the first node? */</span></span><br><span class="line">    &#123;</span><br><span class="line">        LLHead = LLTail = pn; <span class="comment">/*--- yes ---*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                      <span class="comment">/*--- no  ---*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        LLHead-&gt;prev = pn; <span class="comment">/* first goes node before Head */</span></span><br><span class="line">        pn-&gt;next = LLHead; <span class="comment">/* put Head next */</span></span><br><span class="line">        LLHead = pn;       <span class="comment">/* then point Head to us */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NodeCount += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Add ascending. Adds a node to an ordered list.</span></span><br><span class="line"><span class="comment"> *--------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddNodeAscend</span> <span class="params">( struct List *L, <span class="keyword">void</span> *nd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link        pn;         <span class="comment">/* to node we're creating */</span></span><br><span class="line">    Link        prev, curr; <span class="comment">/* our current search */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">dummy</span>;</span>      <span class="comment">/* a dummy node */</span></span><br><span class="line">    <span class="keyword">int</span>         compare;</span><br><span class="line"></span><br><span class="line">    pn = CreateNode ( L, nd );</span><br><span class="line">    <span class="keyword">if</span> ( pn == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* attach dummy node to head of list */</span></span><br><span class="line">    dummy.next = LLHead;</span><br><span class="line">    dummy.prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dummy.next != <span class="literal">NULL</span> )</span><br><span class="line">        dummy.next-&gt;prev = &amp;dummy;</span><br><span class="line"></span><br><span class="line">    prev = &amp;dummy;</span><br><span class="line">    curr = dummy.next;</span><br><span class="line">    <span class="keyword">for</span> ( ; curr != <span class="literal">NULL</span>; prev = curr, curr = curr-&gt;next )</span><br><span class="line">    &#123;</span><br><span class="line">        compare = NodeDataCmp ( pn-&gt;pdata, curr-&gt;pdata );</span><br><span class="line">        <span class="keyword">if</span> ( compare &lt;= <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">/* new node equals or precedes curr */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( curr != <span class="literal">NULL</span> &amp;&amp; compare == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        compare = DuplicatedNode ( pn, curr );</span><br><span class="line">        <span class="keyword">if</span> ( compare == <span class="number">2</span> )</span><br><span class="line">            <span class="comment">/* do nothing -- will get inserted */</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* first, repair the linked list */</span></span><br><span class="line">            LLHead = dummy.next;</span><br><span class="line">            LLHead-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* delete the duplicated node, if appropriate */</span></span><br><span class="line">            <span class="keyword">if</span> ( compare == <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                DeleteData( pn-&gt;pdata );</span><br><span class="line">                <span class="built_in">free</span> ( pn );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prev-&gt;next = pn;</span><br><span class="line">    pn-&gt;prev = prev;</span><br><span class="line">    pn-&gt;next = curr;</span><br><span class="line">    <span class="keyword">if</span> ( curr != <span class="literal">NULL</span> )</span><br><span class="line">        curr-&gt;prev = pn;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        LLTail = pn; <span class="comment">/* this node is the new tail */</span></span><br><span class="line"></span><br><span class="line">    NodeCount += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now, unhook the dummy head node */</span></span><br><span class="line">    LLHead = dummy.next;</span><br><span class="line">    LLHead-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Creates a linked-list structure and returns a pointer to it.</span></span><br><span class="line"><span class="comment"> * On error, returns NULL. This functions accepts pointers</span></span><br><span class="line"><span class="comment"> * to the four list-specific functions and initializes the</span></span><br><span class="line"><span class="comment"> * linked-list structure with them.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="function">struct List * <span class="title">CreateLList</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">void</span> * ( * fCreateData ) ( <span class="keyword">void</span> * ),</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * fDeleteData ) ( <span class="keyword">void</span> * ),</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * fDuplicatedNode ) ( Link, Link ),</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span>    ( * fNodeDataCmp )  ( <span class="keyword">void</span> *, <span class="keyword">void</span> * ))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">pL</span>;</span></span><br><span class="line"></span><br><span class="line">    pL = (struct List *) <span class="built_in">malloc</span> ( <span class="keyword">sizeof</span> ( struct List ));</span><br><span class="line">    <span class="keyword">if</span> ( pL == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    pL-&gt;LHead = <span class="literal">NULL</span>;</span><br><span class="line">    pL-&gt;LTail = <span class="literal">NULL</span>;</span><br><span class="line">    pL-&gt;LCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    pL-&gt;LCreateData = fCreateData;</span><br><span class="line">    pL-&gt;LDeleteData = fDeleteData;</span><br><span class="line">    pL-&gt;LDuplicatedNode = fDuplicatedNode;</span><br><span class="line">    pL-&gt;LNodeDataCmp = fNodeDataCmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( pL );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Creates a node and then calls the application-specific</span></span><br><span class="line"><span class="comment"> * function CreateData() to create the node's data structure.</span></span><br><span class="line"><span class="comment"> * Returns NULL on error.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="function">Link <span class="title">CreateNode</span> <span class="params">( struct List *L, <span class="keyword">void</span> *data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link new_node;</span><br><span class="line"></span><br><span class="line">    new_node = (Link) <span class="built_in">malloc</span> ( <span class="keyword">sizeof</span> ( struct Node ));</span><br><span class="line">    <span class="keyword">if</span> ( new_node == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">    new_node-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--- now call the application-specific data allocation ---*/</span></span><br><span class="line">    new_node-&gt;pdata = CreateData( data );</span><br><span class="line">    <span class="keyword">if</span> ( new_node-&gt;pdata == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span> ( new_node );</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ( new_node );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *  Deletes the node pointed to by to_delete.</span></span><br><span class="line"><span class="comment"> *  Function calls list-specific function to delete data.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteNode</span> <span class="params">( struct List *L, Link to_delete )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link pn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( to_delete == <span class="literal">NULL</span> )        <span class="comment">/* Double check before */</span></span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );               <span class="comment">/* deleting anything.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( to_delete-&gt;prev == <span class="literal">NULL</span> )  <span class="comment">/* we're at the head */</span></span><br><span class="line">    &#123;</span><br><span class="line">        LLHead = to_delete-&gt;next;   <span class="comment">/* update head */</span></span><br><span class="line">        LLHead-&gt;prev = <span class="literal">NULL</span>;        <span class="comment">/* update next node??? */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( to_delete-&gt;next == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;                               <span class="comment">/* we're at the tail */</span></span><br><span class="line">        pn = to_delete-&gt;prev;       <span class="comment">/* get the previous node */</span></span><br><span class="line">        pn-&gt;next = <span class="literal">NULL</span>;<span class="comment">//???</span></span><br><span class="line">        LLTail = pn;                <span class="comment">/* update tail */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>                        <span class="comment">/* we're in the list */</span></span><br><span class="line">    &#123;</span><br><span class="line">        pn = to_delete-&gt;prev;       <span class="comment">/* get the previous node */</span></span><br><span class="line">        pn-&gt;next = to_delete-&gt;next; <span class="comment">/* update previous node to */</span></span><br><span class="line">                                    <span class="comment">/* point to the next one. */</span></span><br><span class="line">        pn = to_delete-&gt;next;       <span class="comment">/* get the next node */</span></span><br><span class="line">        pn-&gt;prev = to_delete-&gt;prev; <span class="comment">/* update it to point to */</span></span><br><span class="line">                                    <span class="comment">/* the previous one. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DeleteData ( to_delete-&gt;pdata );  <span class="comment">/* delete the data */</span></span><br><span class="line">    <span class="built_in">free</span> ( to_delete );               <span class="comment">/* free the node */</span></span><br><span class="line"></span><br><span class="line">    NodeCount -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *  Finds node by starting at the head of the list, stepping</span></span><br><span class="line"><span class="comment"> *  through each node, and comparing data items with the search</span></span><br><span class="line"><span class="comment"> *  key. The Ascend version checks that the data in the node</span></span><br><span class="line"><span class="comment"> *  being examined is not larger than the search key. If it is,</span></span><br><span class="line"><span class="comment"> *  we know the key is not in the list. Returns pointer to node</span></span><br><span class="line"><span class="comment"> *  on success or NULL on failure.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"><span class="function">Link <span class="title">FindNode</span> <span class="params">( struct List *L, <span class="keyword">void</span> *nd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link pcurr;             <span class="comment">/* the node we're examining */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( LLHead == <span class="literal">NULL</span> )        <span class="comment">/* empty list */</span></span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( pcurr = LLHead; pcurr != <span class="literal">NULL</span>; pcurr = pcurr-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( NodeDataCmp ( nd, pcurr-&gt;pdata ) == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> ( pcurr );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="literal">NULL</span> );             <span class="comment">/* could not find node */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Link <span class="title">FindNodeAscend</span> <span class="params">( struct List *L, <span class="keyword">void</span> *nd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link    pcurr;          <span class="comment">/* the node we're examining */</span></span><br><span class="line">    <span class="keyword">int</span> cmp_result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( LLHead == <span class="literal">NULL</span> )        <span class="comment">/* empty list */</span></span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( pcurr = LLHead; pcurr != <span class="literal">NULL</span>; pcurr = pcurr-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        cmp_result =  NodeDataCmp ( nd, pcurr-&gt;pdata );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( cmp_result &lt; <span class="number">0</span> )</span><br><span class="line">             <span class="keyword">return</span> ( <span class="literal">NULL</span> );    <span class="comment">/* too far */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( cmp_result == <span class="number">0</span> )   <span class="comment">/* just right */</span></span><br><span class="line">             <span class="keyword">return</span> ( pcurr );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="literal">NULL</span> );             <span class="comment">/* could not find node */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *  The Goto functions return the pointer to the requested node</span></span><br><span class="line"><span class="comment"> *  or NULL on error.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Link <span class="title">GotoNext</span> <span class="params">( struct List *L, Link pcurr )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( pcurr-&gt;next == <span class="literal">NULL</span> || pcurr == LLTail )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ( pcurr-&gt;next );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Link <span class="title">GotoPrev</span> <span class="params">( struct List *L, Link pcurr )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( pcurr-&gt;prev == <span class="literal">NULL</span> || pcurr == LLHead )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ( pcurr-&gt;prev );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-1-头文件bintree-h：二叉树定义"><a href="#4-3-1-头文件bintree-h：二叉树定义" class="headerlink" title="4.3.1 头文件bintree.h：二叉树定义"></a>4.3.1 头文件bintree.h：二叉树定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- bintree.h --------------------------- Listing 6-2 ---------</span></span><br><span class="line"><span class="comment"> * Binary-tree definitions</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TREE_OK    (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TREE_FAIL (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT        1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT       0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sBnode</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">sBnode</span> *<span class="title">link</span>[2];</span></span><br><span class="line">&#125; Bnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Our binary tree is made up of these */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sMynode</span> &#123;</span></span><br><span class="line">    <span class="comment">/* A copy of the items in a Bnode */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sMynode</span> *<span class="title">link</span>[2];</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">20</span>];</span><br><span class="line">&#125; Mynode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Control structure for a binary tree */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CompFunc)</span> <span class="params">(<span class="keyword">void</span> *node1, <span class="keyword">void</span> *node2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*DoFunc)</span> <span class="params">(<span class="keyword">void</span> *node, <span class="keyword">int</span> level)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sBintree</span> &#123;</span></span><br><span class="line">    Bnode *DummyHead;</span><br><span class="line">    CompFunc Compare;</span><br><span class="line">    <span class="keyword">int</span> DuplicatesOk;</span><br><span class="line">    <span class="keyword">size_t</span> NodeSize;</span><br><span class="line">&#125; Bintree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Prototypes */</span></span><br><span class="line"><span class="function">Bintree *<span class="title">NewBintree</span> <span class="params">(Bnode *dummy, CompFunc cf,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">int</span> dup_ok, <span class="keyword">size_t</span> node_size)</span></span>;</span><br><span class="line"><span class="function">Bnode   *<span class="title">FindBintree</span><span class="params">(Bintree *t, Bnode *n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>      <span class="title">InsBintree</span> <span class="params">(Bintree *t, Bnode *n)</span></span>;</span><br><span class="line"><span class="function">Bnode   *<span class="title">DelBintree</span> <span class="params">(Bintree *t, Bnode *n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>      <span class="title">WalkBintree</span><span class="params">(Bintree *t, DoFunc df)</span></span>;</span><br><span class="line"><span class="function">Bnode   *<span class="title">InitBintreeNode</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LevelTraBintree</span><span class="params">(Bintree *t, DoFunc df)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-3-2-bintree-c：二叉树主要功能定义和问题算法思路的实现"><a href="#4-3-2-bintree-c：二叉树主要功能定义和问题算法思路的实现" class="headerlink" title="4.3.2 bintree.c：二叉树主要功能定义和问题算法思路的实现"></a>4.3.2 bintree.c：二叉树主要功能定义和问题算法思路的实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--- bintree.c --------------------------- Listing 6-1 ---------</span></span><br><span class="line"><span class="comment"> * Binary tree routines. Provides plain binary search</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bintree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"llgen.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"qapp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QMAX 100    <span class="comment">/* maximum number of elements in a queue */</span> <span class="comment">//yyw</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* A safe malloc() */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">tmalloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p;</span><br><span class="line">    <span class="keyword">if</span> ((p = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Out of memory\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create and initialize a node for the user. 'size' both can</span></span><br><span class="line"><span class="comment"> * and should be greater than sizeof(Bnode) to allow for a</span></span><br><span class="line"><span class="comment"> * data area for the user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Bnode *<span class="title">InitBintreeNode</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bnode *n;</span><br><span class="line"></span><br><span class="line">    n = tmalloc(size);</span><br><span class="line">    n -&gt; link[LEFT] = n -&gt; link[RIGHT]  = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create an empty tree */</span></span><br><span class="line"><span class="function">Bintree *<span class="title">NewBintree</span> <span class="params">(Bnode *dummy,</span></span></span><br><span class="line"><span class="function"><span class="params">    CompFunc cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> dup_ok,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">size_t</span> node_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bintree *t;</span><br><span class="line"></span><br><span class="line">    t = tmalloc(<span class="keyword">sizeof</span>(Bintree));</span><br><span class="line">    t -&gt; DummyHead = dummy;</span><br><span class="line">    t -&gt; Compare = cf;</span><br><span class="line">    t -&gt; DuplicatesOk = dup_ok;</span><br><span class="line">    t -&gt; NodeSize = node_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Find node n in tree t */</span></span><br><span class="line"><span class="function">Bnode *<span class="title">FindBintree</span><span class="params">(Bintree *t, Bnode *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bnode *s;</span><br><span class="line">    <span class="keyword">int</span> dir;</span><br><span class="line"></span><br><span class="line">    s = t -&gt; DummyHead -&gt; link[RIGHT];</span><br><span class="line">    <span class="keyword">while</span> (s != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        dir = (t -&gt; Compare) (n, s);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If a match, we're done.</span></span><br><span class="line"><span class="comment">         * For Red-Black, must also be a leaf.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        dir = dir &lt; <span class="number">0</span>;</span><br><span class="line">        s = s -&gt; link[dir];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">/* no match */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bnode * <span class="title">DelBintree</span> <span class="params">(Bintree *t, Bnode *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Bnode *p, *s, *save;</span><br><span class="line">    <span class="keyword">int</span> dir, dir_old;</span><br><span class="line"></span><br><span class="line">    p = t -&gt; DummyHead;</span><br><span class="line">    s = p -&gt; link[RIGHT];</span><br><span class="line">    dir_old = dir = RIGHT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Look for a match */</span></span><br><span class="line">    <span class="keyword">while</span> (s != <span class="literal">NULL</span> &amp;&amp; (dir = (t-&gt;Compare)(n, s)) != <span class="number">0</span>) &#123;</span><br><span class="line">        p = s;</span><br><span class="line">        dir = dir &lt; <span class="number">0</span>;</span><br><span class="line">        dir_old = dir;</span><br><span class="line">        s = p -&gt; link[dir];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">/* no match found */</span></span><br><span class="line"></span><br><span class="line">    save = s;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * First case: if s has no right child, then replace s</span></span><br><span class="line"><span class="comment">     * with s's left child.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (s -&gt; link[RIGHT] == <span class="literal">NULL</span>)</span><br><span class="line">        s = s -&gt; link[LEFT];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Second case: if s has a right child that lacks a left</span></span><br><span class="line"><span class="comment">     * child, then replace s with s's right child and</span></span><br><span class="line"><span class="comment">     * copy s's left child into the right child's left child.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s -&gt; link[RIGHT] -&gt; link[LEFT] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        s = s -&gt; link[RIGHT];</span><br><span class="line">        s -&gt; link[LEFT] = save -&gt; link[LEFT];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Final case: find leftmost (smallest) node in s's right</span></span><br><span class="line"><span class="comment">     * subtree. By definition, this node has an empty left</span></span><br><span class="line"><span class="comment">     * link. Free this node by copying its right link to</span></span><br><span class="line"><span class="comment">     * its parent's left link and then give it both of s's</span></span><br><span class="line"><span class="comment">     * links (thus replacing s).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Bnode *small;</span><br><span class="line"></span><br><span class="line">        small = s -&gt; link[RIGHT];</span><br><span class="line">        <span class="keyword">while</span> (small -&gt; link[LEFT] -&gt; link[LEFT])</span><br><span class="line">            small = small -&gt; link[LEFT];</span><br><span class="line">        s = small -&gt; link[LEFT];</span><br><span class="line">        small -&gt; link[LEFT] = s -&gt; link[RIGHT];</span><br><span class="line">        s -&gt; link[LEFT] = save -&gt; link[LEFT];</span><br><span class="line">        s -&gt; link[RIGHT] = save -&gt; link[RIGHT];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p -&gt; link[dir_old] = s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> save;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Insert node n into tree t */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsBintree</span> <span class="params">(Bintree *t, Bnode *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p_dir;</span><br><span class="line">    Bnode *p, *s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Search until we find an empty arm. */</span></span><br><span class="line">    p = t -&gt; DummyHead;</span><br><span class="line">    p_dir = RIGHT; <span class="comment">/* direction from p to s */</span></span><br><span class="line">    s = p -&gt; link[RIGHT];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (s != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = s;</span><br><span class="line">        p_dir = (t -&gt; Compare) (n, s);</span><br><span class="line">        <span class="keyword">if</span> (p_dir == <span class="number">0</span> &amp;&amp; t -&gt; DuplicatesOk == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> TREE_FAIL; <span class="comment">/* duplicate */</span></span><br><span class="line">        p_dir = p_dir &lt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">//printf(" Compare with '%s'.", ((struct sMynode *)s) -&gt; text);</span></span><br><span class="line">        s = s -&gt; link[p_dir];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Add the new node */</span></span><br><span class="line">    p -&gt; link[p_dir] = n;</span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line">    <span class="keyword">return</span> TREE_OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Recursive tree walk routines. The entry point is</span></span><br><span class="line"><span class="comment"> * WalkBintree. It will do an inorder traversal of the</span></span><br><span class="line"><span class="comment"> * tree, call df() for each node and leaf.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rWalk</span><span class="params">(Bnode *n, <span class="keyword">int</span> level, DoFunc df)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        rWalk(n -&gt; link[LEFT], level + <span class="number">1</span>, df);</span><br><span class="line">        df(n, level);</span><br><span class="line">        rWalk(n -&gt; link[RIGHT], level + <span class="number">1</span>, df);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WalkBintree</span><span class="params">(Bintree *t, DoFunc df)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t -&gt; DummyHead -&gt; link[RIGHT] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Empty tree\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> TREE_FAIL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rWalk(t -&gt; DummyHead -&gt; link[RIGHT], <span class="number">0</span>, df);</span><br><span class="line">    <span class="keyword">return</span> TREE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TEST)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Test driver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFLEN 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LoadString</span><span class="params">(Bintree *t, <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mynode *m;</span><br><span class="line"></span><br><span class="line">    m = (Mynode *) InitBintreeNode(<span class="keyword">sizeof</span>(Mynode));</span><br><span class="line">    <span class="built_in">strncpy</span>(m-&gt;text, <span class="built_in">string</span>, <span class="keyword">sizeof</span>(m-&gt;text));</span><br><span class="line">    m-&gt;text[<span class="keyword">sizeof</span>(m-&gt;text) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> InsBintree(t, (Bnode *) m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindString</span><span class="params">(Bintree *t, <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mynode m, *r;</span><br><span class="line">    <span class="built_in">strncpy</span>(m.text, <span class="built_in">string</span>, <span class="keyword">sizeof</span>(m.text));</span><br><span class="line">    m.text[<span class="keyword">sizeof</span>(m.text) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((r = (Mynode *) FindBintree(t, (Bnode *) &amp;m)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">" Not found.\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" Found '%s'.\n"</span>, r -&gt; text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteString</span><span class="params">(Bintree *t, <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mynode m, *n;</span><br><span class="line">    <span class="built_in">strncpy</span>(m.text, <span class="built_in">string</span>, <span class="keyword">sizeof</span>(m.text));</span><br><span class="line">    m.text[<span class="keyword">sizeof</span>(m.text) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    n = (Mynode *) DelBintree(t, (Bnode *) &amp;m);</span><br><span class="line">    <span class="keyword">if</span> (n)</span><br><span class="line">        <span class="built_in">free</span> (n);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">" Did not find '%s'.\n"</span>, <span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadFile</span><span class="params">(Bintree *t, <span class="keyword">char</span> *fname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *infile;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUFLEN], *s;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((infile = fopen(fname, <span class="string">"r"</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">" Couldn't open the file.\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buffer, BUFLEN, infile)) &#123;</span><br><span class="line">        s = buffer + <span class="built_in">strlen</span>(buffer);</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">iscntrl</span>(*s))</span><br><span class="line">            *s-- = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">';'</span>) <span class="comment">/* a comment */</span></span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">'-'</span> &amp;&amp; buffer[<span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            DeleteString(t, buffer+<span class="number">1</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            LoadString(t, buffer);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(infile);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Loaded %d items and deleted %d from %s.\n"</span>,</span><br><span class="line">        i, j, fname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A sample action function: it prints out the data</span></span><br><span class="line"><span class="comment"> * at each node along with the node's level in the tree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ShowFunc</span><span class="params">(<span class="keyword">void</span> *m, <span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s (%d)\n"</span>,</span><br><span class="line">        ((Mynode *)m) -&gt; text, level);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TREE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A pair of functions to print the tree as a diagram.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(ALTDRAW)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> TOP <span class="meta-string">'+'</span>  <span class="comment">//yyw</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> BOT <span class="meta-string">'+'</span>  <span class="comment">//yyw</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> HOR <span class="meta-string">'-'</span> <span class="comment">//yyw</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> VRT <span class="meta-string">'|'</span> <span class="comment">//yyw</span></span></span><br><span class="line">  <span class="comment">//#define TOP '?</span></span><br><span class="line">  <span class="comment">//#define BOT '?</span></span><br><span class="line">  <span class="comment">//#define HOR '?</span></span><br><span class="line">  <span class="comment">//#define VRT '?</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> TOP <span class="meta-string">'/'</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> BOT <span class="meta-string">'\\'</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> HOR <span class="meta-string">'-'</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> VRT <span class="meta-string">'|'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRAWBUF 100</span></span><br><span class="line"><span class="keyword">char</span> draw[DRAWBUF];</span><br><span class="line"><span class="keyword">char</span> work[DRAWBUF * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> maxdepth;</span><br><span class="line">FILE *outfile;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xrWalk</span><span class="params">(Bnode *n, <span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* Monitor */</span></span><br><span class="line">        <span class="keyword">if</span> (level &gt; maxdepth)</span><br><span class="line">            maxdepth = level;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Go right</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        draw[level * <span class="number">2</span>] = TOP;</span><br><span class="line">        draw[level * <span class="number">2</span> + <span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">        xrWalk(n -&gt; link[RIGHT], level + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Show current node</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">strncpy</span>(work, draw, level * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (level &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">            c = work[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; level * <span class="number">2</span>; i += <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (work[i] == c)</span><br><span class="line">                    work[i - <span class="number">2</span>] = <span class="string">' '</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    c = work[i];</span><br><span class="line"></span><br><span class="line">            work[level * <span class="number">2</span> - <span class="number">1</span>] =</span><br><span class="line">                HOR;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level * <span class="number">2</span> - <span class="number">2</span>; i += <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (work[i] != <span class="string">' '</span>) &#123;</span><br><span class="line">                    work[i] = VRT;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(work + level * <span class="number">2</span>, <span class="string">"%s (%d)"</span>,</span><br><span class="line">                            ((Mynode *)n)-&gt;text, level);</span><br><span class="line">        <span class="built_in">fputs</span>(work, outfile);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"\n"</span>, outfile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Go left</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        draw[level * <span class="number">2</span>] = BOT;</span><br><span class="line">        draw[level * <span class="number">2</span> + <span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">        xrWalk(n -&gt; link[LEFT], level + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">xWalkBintree</span><span class="params">(Bintree *t, <span class="keyword">char</span> *name, <span class="keyword">char</span> *mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t -&gt; DummyHead -&gt; link[RIGHT] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Empty tree\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> TREE_FAIL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maxdepth = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    outfile = <span class="built_in">stdout</span>;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        outfile = fopen(name, mode);</span><br><span class="line">        <span class="keyword">if</span> (outfile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Can't open %s.\n"</span>, name);</span><br><span class="line">            name = <span class="literal">NULL</span>;</span><br><span class="line">            outfile = <span class="built_in">stdout</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xrWalk(t -&gt; DummyHead -&gt; link[RIGHT], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(outfile, <span class="string">"Max depth %d.\n"</span>, maxdepth);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name)</span><br><span class="line">        fclose(outfile); <span class="comment">/* a real file */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fflush(outfile); <span class="comment">/* stdout */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TREE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compare_length = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CompareFunc</span><span class="params">(<span class="keyword">void</span> *n1, <span class="keyword">void</span> *n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compare_length)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strncmp</span>(((Mynode *)n1)-&gt;text,</span><br><span class="line">        ((Mynode *)n2)-&gt;text,</span><br><span class="line">        compare_length);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(((Mynode *)n1)-&gt;text,</span><br><span class="line">        ((Mynode *)n2)-&gt;text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * enqueue loads the data items in entry into the head node of</span></span><br><span class="line"><span class="comment"> * the free list, then adds that node to the queue based on</span></span><br><span class="line"><span class="comment"> * priority.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enqueue</span> <span class="params">( struct List *lqueue, struct List *lfree,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">void</span> *new_entry )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link curr, new_node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Are there any free nodes left? */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( lfree-&gt;LCount == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> ( <span class="built_in">stderr</span>, <span class="string">"Exceeded maximum queue size\n"</span> );</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* load the data into the head of the free list */</span></span><br><span class="line"></span><br><span class="line">    new_node = lfree-&gt;LHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( DataCopy ( new_node-&gt;pdata, new_entry ) == <span class="number">0</span> )</span><br><span class="line">         <span class="keyword">return</span>  ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">lfree-&gt;LHead = lfree-&gt;LHead-&gt;next;</span><br><span class="line">    <span class="comment">/* adding to an empty list? */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( lqueue-&gt;LCount == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        new_node-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        lqueue-&gt;LTail = new_node;</span><br><span class="line">        lqueue-&gt;LHead = new_node;</span><br><span class="line"></span><br><span class="line">        lqueue-&gt;LCount = <span class="number">1</span>;</span><br><span class="line">        lfree-&gt;LCount -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Traverse the list to find the insertion position */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">new_node-&gt;prev = lqueue-&gt;LTail;</span><br><span class="line">new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">new_node-&gt;prev-&gt;next = new_node;</span><br><span class="line">lqueue-&gt;LTail = new_node;</span><br><span class="line"></span><br><span class="line">        lqueue-&gt;LCount += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* update the free list */</span></span><br><span class="line">        lfree-&gt;LCount -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * dequeue takes a pointer that will be set to the data in the</span></span><br><span class="line"><span class="comment"> * node at the head of the queue. It then moves the node being</span></span><br><span class="line"><span class="comment"> * dequeued from the queue to the free list. Note that if you do</span></span><br><span class="line"><span class="comment"> * not use the dequeued data before next queue operation, the</span></span><br><span class="line"><span class="comment"> * data is lost, so copy it if you need to. Returns 0 on error.</span></span><br><span class="line"><span class="comment"> *-------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dequeue</span> <span class="params">( struct List *lqueue, struct List *lfree,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">void</span> * our_data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link dequeued_link;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* is there anything to dequeue? */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( lqueue-&gt;LCount == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> ( <span class="built_in">stderr</span>, <span class="string">"Error dequeue from empty queue\n"</span> );</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* make a copy of the data being dequeued */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( DataCopy ( our_data, lqueue-&gt;LHead-&gt;pdata ) == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove the node from the queue */</span></span><br><span class="line"></span><br><span class="line">    dequeued_link = lqueue-&gt;LHead;</span><br><span class="line">    lqueue-&gt;LHead = lqueue-&gt;LHead-&gt;next;</span><br><span class="line">    lqueue-&gt;LCount -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add the node to the free list */</span></span><br><span class="line"></span><br><span class="line">    dequeued_link-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    dequeued_link-&gt;next = lfree-&gt;LHead;</span><br><span class="line">    lfree-&gt;LHead = dequeued_link;</span><br><span class="line">    lfree-&gt;LCount += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LevelTraBintree</span><span class="params">(Bintree *t, DoFunc df)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>      count;</span><br><span class="line"><span class="keyword">void</span> *temp;<span class="comment">/* temporary data area*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">List</span> *<span class="title">queue</span>,</span></span><br><span class="line"><span class="class">                 *<span class="title">free_list</span>;</span>  <span class="comment">/* our two queues */</span></span><br><span class="line"><span class="keyword">int</span> level=<span class="number">0</span>;</span><br><span class="line">Mynode * PCurrTnode;<span class="comment">//指向当前要操作的节点</span></span><br><span class="line">    <span class="comment">/*--- set up linked-list data structures for queues ---*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span></span><br><span class="line">       = CreateLList ( CreateData1,      <span class="comment">/* in qapp.c */</span></span><br><span class="line">                       DeleteData1,      <span class="comment">/*     "     */</span></span><br><span class="line">                       DuplicatedNode1,  <span class="comment">/*     "     */</span></span><br><span class="line">                       NodeDataCmp1 );   <span class="comment">/*     "     */</span></span><br><span class="line">    free_list</span><br><span class="line">       = CreateLList ( CreateData2,      <span class="comment">/* in qapp.c */</span></span><br><span class="line">                       DeleteData2,      <span class="comment">/*     "     */</span></span><br><span class="line">                       DuplicatedNode2,  <span class="comment">/*     "     */</span></span><br><span class="line">                       NodeDataCmp2 );   <span class="comment">/*     "     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">queue</span> == <span class="literal">NULL</span> || free_list == <span class="literal">NULL</span> ) <span class="comment">//要求queue,free_list 指向非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> ( <span class="built_in">stderr</span>, <span class="string">"Error creating queue\n"</span> );</span><br><span class="line">        <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--- allocate the free list ---*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( count = <span class="number">0</span>; count &lt; QMAX; count++ ) <span class="comment">// 向free_list中填充所需节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ! AddNodeAtHead ( free_list, PCurrTnode ))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span></span><br><span class="line">                ( <span class="built_in">stderr</span>, <span class="string">"Could not create queue of %d\n"</span>,</span><br><span class="line">                    QMAX );</span><br><span class="line">            <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--- begin processing file ---*/</span></span><br><span class="line"><span class="keyword">if</span> (t -&gt; DummyHead -&gt; link[RIGHT] == <span class="literal">NULL</span>) &#123; <span class="comment">// 要求树非空</span></span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Empty tree\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> TREE_FAIL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">PCurrTnode = CreateData2 ( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="keyword">if</span> ( PCurrTnode == <span class="literal">NULL</span> )   <span class="comment">// PCurrTnode 创建失败处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> ( <span class="built_in">stderr</span>, <span class="string">"Error creating temporary data area\n"</span> );</span><br><span class="line">        <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( DataCopy ( PCurrTnode, t -&gt; DummyHead -&gt; link[RIGHT] ) == <span class="number">0</span> ) <span class="comment">// 树头节点值赋给PCurrTnode</span></span><br><span class="line">        <span class="keyword">return</span> ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( enqueue ( <span class="built_in">queue</span>, free_list, PCurrTnode ) == <span class="number">0</span> )<span class="comment">//将树的根节点入队</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Error enqueueing %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode)-&gt;text );</span><br><span class="line">                <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Enqueued %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode)-&gt;text );</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( <span class="built_in">queue</span>-&gt;LCount &gt; <span class="number">0</span> ) <span class="comment">//队非空时循环操作，队空结束循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( dequeue ( <span class="built_in">queue</span>, free_list, PCurrTnode ) == <span class="number">0</span> ) <span class="comment">// 队首元素出队，即PCurrTnode所指向的元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Error dequeueing %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode)-&gt;text );</span><br><span class="line">                <span class="keyword">return</span> ( EXIT_FAILURE );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Dequeued %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode)-&gt;text );</span><br><span class="line"></span><br><span class="line">df(PCurrTnode, level++);</span><br><span class="line"><span class="keyword">if</span> (PCurrTnode -&gt; link[LEFT] != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span> ( enqueue ( <span class="built_in">queue</span>, free_list, PCurrTnode -&gt; link[LEFT] ) == <span class="number">0</span> )<span class="comment">//将PCurrTnode所指节点的左孩子入队</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Error enqueueing %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode -&gt; link[LEFT])-&gt;text );</span><br><span class="line">                <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Enqueued %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode -&gt; link[LEFT])-&gt;text );</span><br><span class="line"><span class="keyword">if</span> (PCurrTnode -&gt; link[RIGHT] !=<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span> ( enqueue ( <span class="built_in">queue</span>, free_list, PCurrTnode -&gt; link[RIGHT] ) == <span class="number">0</span> )<span class="comment">//将PCurrTnode所指节点的右孩子入队</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Error enqueueing  %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode -&gt; link[RIGHT])-&gt;text );</span><br><span class="line">                <span class="built_in">exit</span> ( EXIT_FAILURE );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"Enqueued %s\n"</span>,</span><br><span class="line">                          ((pND2)PCurrTnode -&gt; link[RIGHT])-&gt;text );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TREE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> inbuf[BUFLEN], *s;</span><br><span class="line">    Bintree *tree;</span><br><span class="line">    Mynode *dummy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create a dummy node for the tree algorithms */</span></span><br><span class="line">    dummy = (Mynode *) InitBintreeNode(<span class="keyword">sizeof</span>(Mynode));</span><br><span class="line">    dummy-&gt;text[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">/* must contain valid data */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create a tree */</span></span><br><span class="line">    tree = NewBintree((Bnode *) dummy,</span><br><span class="line">                        CompareFunc, <span class="number">1</span>, <span class="keyword">sizeof</span>(Mynode));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Action (? for help): "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        fgets(inbuf, BUFLEN, <span class="built_in">stdin</span>);</span><br><span class="line">        s = inbuf + <span class="built_in">strlen</span>(inbuf);</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">iscntrl</span>(*s))</span><br><span class="line">            *s-- = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (inbuf[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                <span class="built_in">fputs</span>(</span><br><span class="line">                    <span class="string">"@file     - Load strings in file to tree\n"</span></span><br><span class="line">                    <span class="string">"d string  - Delete string from tree\n"</span></span><br><span class="line">                    <span class="string">"dup [0|1] - Disallow/allow duplicates\n"</span></span><br><span class="line">                    <span class="string">"s [file]  - Display tree (overwrite file)\n"</span></span><br><span class="line">                    <span class="string">"w         - Walk tree, running ShowFunc()\n"</span></span><br><span class="line"><span class="string">"t         - travel tree by level, running ShowFunc()\n"</span></span><br><span class="line">                    <span class="string">"q         - Quit\n"</span></span><br><span class="line">                    , <span class="built_in">stdout</span>);</span><br><span class="line">                fflush(<span class="built_in">stdout</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>:</span><br><span class="line">                LoadFile(tree, inbuf + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="keyword">if</span> (inbuf[<span class="number">1</span>] == <span class="string">'u'</span> &amp;&amp; inbuf[<span class="number">2</span>] == <span class="string">'p'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inbuf[<span class="number">3</span>] == <span class="string">' '</span> &amp;&amp;</span><br><span class="line">                        (inbuf[<span class="number">4</span>] == <span class="string">'0'</span> || inbuf[<span class="number">4</span>] == <span class="string">'1'</span>))</span><br><span class="line">                        tree -&gt; DuplicatesOk =</span><br><span class="line">                        inbuf[<span class="number">4</span>] == <span class="string">'0'</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">"Duplicates are "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    <span class="keyword">if</span> (tree -&gt; DuplicatesOk == <span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">fputs</span>(<span class="string">"not "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">"allowed.\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (inbuf[<span class="number">1</span>] != <span class="string">' '</span> || inbuf[<span class="number">2</span>] == <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">" Not a valid command\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    DeleteString(tree, inbuf + <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                <span class="keyword">if</span> (inbuf[<span class="number">1</span>] == <span class="string">' '</span> &amp;&amp; inbuf[<span class="number">2</span>] != <span class="number">0</span>)</span><br><span class="line">                    xWalkBintree(tree, inbuf + <span class="number">2</span>,</span><br><span class="line">                    inbuf[<span class="number">0</span>] == <span class="string">'s'</span> ? <span class="string">"w"</span> : <span class="string">"a"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    xWalkBintree(tree, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'w'</span>:</span><br><span class="line">                WalkBintree(tree, ShowFunc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                LevelTraBintree(tree, ShowFunc);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">/* comment */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">" Not a valid command\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h1><p>5.1 若键盘依次输入3个命令“@Lab4.DAT”、“s”和“t”，则程序运行结果为：</p><p><img src="https://miao.su/images/2019/02/06/p19f59d.png" alt="p19f59d.png"><br><img src="https://miao.su/images/2019/02/06/p25fd0d.png" alt="p25fd0d.png"></p><p>5.2 若键盘依次输入3个命令：“d 12”、“s”和“t”，则程序运行结果:</p><p><img src="https://miao.su/images/2019/02/06/p4c31ca.png" alt="p4c31ca.png"></p><p>5.3 若键盘依次输入3个命令：“d 20”、“s”和“t”，则程序运行结果：<br><img src="https://miao.su/images/2019/02/06/p5aec43.png" alt="p5aec43.png"></p><p><strong>附件：</strong><br>文件Lab4.DAT内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">10</span><br><span class="line">22</span><br><span class="line">12</span><br><span class="line">15</span><br><span class="line">06</span><br><span class="line">08</span><br><span class="line">01</span><br><span class="line">25</span><br><span class="line">00</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;center&gt;实验4 利用队列实现二叉树的层次遍历（4课时）&lt;/center&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/tags/Algorithm/"/>
    
      <category term="queue" scheme="http://looby.coding.me/betterming/tags/queue/"/>
    
      <category term="layer travel" scheme="http://looby.coding.me/betterming/tags/layer-travel/"/>
    
  </entry>
  
  <entry>
    <title>BFS之迷宫最小步数</title>
    <link href="http://looby.coding.me/betterming/post/e3e5434c.html"/>
    <id>http://looby.coding.me/betterming/post/e3e5434c.html</id>
    <published>2018-11-21T15:26:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题：给定一个n*m大小迷宫，@代表不可通过墙壁，.代表平地，S起点，T终点。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">.*.*.</span><br><span class="line">.*S*.</span><br><span class="line">.***.</span><br><span class="line">...T*</span><br></pre></td></tr></table></figure><p>代码与解析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">&#125;S, T, Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn]; <span class="comment">//迷宫信息</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//记录是否入过队</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;<span class="comment">//用X，Y数组来来表示上下左右移动大小</span></span><br><span class="line"><span class="keyword">int</span> Y[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试（x, y）是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= n || x &lt; <span class="number">0</span> || y &gt;= m || y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(inq[x][y] == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[x][y] == <span class="string">'*'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node top = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(top.x == T.x &amp;&amp; top.y == T.y) <span class="keyword">return</span> top.step;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> newX = top.x + X[i];</span><br><span class="line"><span class="keyword">int</span> newY = top.y + Y[i];</span><br><span class="line"><span class="keyword">if</span>(test(newX, newY))&#123;</span><br><span class="line">Node.x = newX;</span><br><span class="line">Node.y = newY;</span><br><span class="line">Node.step = top.step + <span class="number">1</span>;</span><br><span class="line">q.push(Node);</span><br><span class="line">inq[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">&#123;</span><br><span class="line">maze[i][j] = getchar();</span><br><span class="line">&#125;</span><br><span class="line">maze[i][m+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;S.x, &amp;S.y, &amp;T.x, &amp;T.y);</span><br><span class="line">S.step = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The layer: %d\n"</span>, BFS());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题：给定一个n*m大小迷宫，@代表不可通过墙壁，.代表平地，S起点，T终点。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/tags/Algorithm/"/>
    
      <category term="BFS" scheme="http://looby.coding.me/betterming/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Exercise6</title>
    <link href="http://looby.coding.me/betterming/post/8be67e2d.html"/>
    <id>http://looby.coding.me/betterming/post/8be67e2d.html</id>
    <published>2018-11-02T15:15:22.000Z</published>
    <updated>2019-05-19T13:09:11.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Case-Study-Dice-Poker"><a href="#Case-Study-Dice-Poker" class="headerlink" title="Case Study: Dice Poker"></a>Case Study: Dice Poker</h2><h3 id="1-Program-Specification"><a href="#1-Program-Specification" class="headerlink" title="1. Program Specification"></a>1. Program Specification</h3><p>&ensp;&ensp;Our goal is to write a game program that allows a user to play video poker using dice. The program will display a hand consisting of five dice. The basic set of rules is as follows:<br><a id="more"></a></p><ul><li>The player starts with $100.</li><li>Each round costs $10 to play. This amount is subtracted from the player’s money at the start of the round.</li><li>The player initially rolls a completely random hand (i.e., all five dice are rolled).</li><li>The player gets two chances to enhance the hand by rerolling some or all of the dice.</li><li>At the end of the hand, the player’s money is updated according to the following payout schedule:</li></ul><table><thead><tr><th>hand</th><th>pay</th></tr></thead><tbody><tr><td>Two Pairs</td><td>$5</td></tr><tr><td>Three of a Kind</td><td>$8</td></tr><tr><td>Full House (A Pair and a Three of a Kind)</td><td>$12</td></tr><tr><td>Four of a Kind</td><td>$15</td></tr><tr><td>Straight (1-5 or 2-6)</td><td>$20</td></tr><tr><td>Five of a Kind</td><td>$30</td></tr></tbody></table><p>&ensp;&ensp;Ultimately, we want this program to present a nice graphical interface. Our interaction will be through mouse clicks. The interface should have the following characteristics:</p><ul><li>The current score (amount of money) is constantly displayed.</li><li>The program automatically terminates if the player goes broke.</li><li>The player may choose to quit at appropriate points during play.</li><li>The interface will present visual cues to indicate what is going on at any given moment and what the valid user responses are.</li></ul><p>The interface looks like:</p><p><img src="https://miao.su/images/2019/02/06/Pokere55ca.png" alt="Pokere55ca.png"></p><h3 id="2-Identifying-Candidate-Objects"><a href="#2-Identifying-Candidate-Objects" class="headerlink" title="2. Identifying Candidate Objects"></a>2. Identifying Candidate Objects</h3><p>Candidate Objects including:</p><ul><li>the Dice class<ul><li>constuctor</li><li>rollAll</li><li>roll</li><li>values</li><li>score</li></ul></li><li>A PokerApp object<ul><li>run</li><li>playRound</li><li>doRolls</li></ul></li><li>A PokerInterface object<ul><li>setMoney</li><li>setDice</li><li>wantToPlay</li><li>showResult</li><li>chooseDice</li></ul></li></ul><h3 id="3-Implementing-the-Model"><a href="#3-Implementing-the-Model" class="headerlink" title="3.Implementing the Model"></a>3.Implementing the Model</h3><h4 id="3-1-Implementing-Dice"><a href="#3-1-Implementing-Dice" class="headerlink" title="3.1 Implementing Dice"></a>3.1 Implementing Dice</h4><p>&ensp;&ensp;The Dice class implements a collection of dice, which are just changing numbers. The obvious representation is to use a list of five ints.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from random import *</span><br><span class="line"></span><br><span class="line">class Dice:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.dice = [0]*5</span><br><span class="line">        self.rollAll()</span><br><span class="line"></span><br><span class="line">    def roll(self, which):</span><br><span class="line">        for pos in which:</span><br><span class="line">            self.dice[pos] = randrange(1, 7)</span><br><span class="line"></span><br><span class="line">    def rollAll(self):</span><br><span class="line">        self.roll(range(5))</span><br><span class="line"></span><br><span class="line">    def values(self):</span><br><span class="line">        return self.dice[:]</span><br><span class="line"></span><br><span class="line">    def score(self):</span><br><span class="line">        # Create the counts list</span><br><span class="line">        # Counts[i] will be the number of times that the value i occurs in dice.</span><br><span class="line">        # if the dice are: [3,2,5,2,3] then the counts list would be [0,0,2,2,0,1,0]</span><br><span class="line">        counts = [0]*7</span><br><span class="line">        for value in self.dice:</span><br><span class="line">            counts[value] = counts[value] + 1</span><br><span class="line"></span><br><span class="line">        # score the hand</span><br><span class="line">        if 5 in counts:</span><br><span class="line">            return &quot;Five of a Kind&quot; , 30</span><br><span class="line">        elif 4 in counts:</span><br><span class="line">            return &quot;Four of a Kind&quot; , 15</span><br><span class="line">        elif (3 in counts) and (2 in counts) :</span><br><span class="line">            return &quot;Full House&quot;, 12</span><br><span class="line">        elif 3 in counts:</span><br><span class="line">            return &quot;Three of a Kind&quot;, 8</span><br><span class="line">        elif not (2 in counts) and (counts[1] == 0 or counts[6] == 0):</span><br><span class="line">            return &quot;Straight&quot;, 20</span><br><span class="line">        elif counts.count(2) == 2:</span><br><span class="line">            return &quot;Two Pairs&quot;, 5</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Garb age&quot;, 0</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;At this point, we could try out the Dice class to make sure that it is working correctly. Here is a short interaction showing some of what the class can do:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from dice import Dice</span><br><span class="line">d = Dice()</span><br><span class="line">print(d.values())</span><br><span class="line">print(d.score())</span><br></pre></td></tr></table></figure><h4 id="3-2-Implementing-PokerApp"><a href="#3-2-Implementing-PokerApp" class="headerlink" title="3.2  Implementing PokerApp"></a>3.2  Implementing PokerApp</h4><p>&ensp;&ensp;Now we are ready to turn our attention to the task of actually implementing the poker game. We can use top-down design to flesh out the details and also suggest what methods will have to be implemented in the Poker Interface class.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from dice import Dice</span><br><span class="line">class PokerApp:</span><br><span class="line">    def __init__(self, interface):</span><br><span class="line">        self.dice = Dice()</span><br><span class="line">        self.money = 100</span><br><span class="line">        self.interface = interface</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while self.money &gt;= 10 and self.interface.wantToPlay():</span><br><span class="line">            self.playRound()</span><br><span class="line">        self.interface.close()</span><br><span class="line"></span><br><span class="line">    def playRound(self):</span><br><span class="line">        self.money = self.money - 10</span><br><span class="line">        self.interface.setMoney(self.money)</span><br><span class="line">        self.doRolls()</span><br><span class="line">        result, score = self.dice.score()</span><br><span class="line">        self. interface. showResult (result, score)</span><br><span class="line">        self.money = self.money + score</span><br><span class="line">        self.interface.setMoney(self.money)</span><br><span class="line"></span><br><span class="line">    def doRolls(self):</span><br><span class="line">        self.dice.rollAll()</span><br><span class="line">        roll = 1</span><br><span class="line">        self.interface.setDice(self.dice.values())</span><br><span class="line">        toRoll = self.interface.chooseDice()</span><br><span class="line">        while roll &lt; 3 and toRoll != []:</span><br><span class="line">            self.dice.roll(toRoll)</span><br><span class="line">            roll = roll + 1</span><br><span class="line">            self.interface.setDice(self.dice.values())</span><br><span class="line">            if roll &lt; 3:</span><br><span class="line">                toRoll = self.interface.chooseDice()</span><br></pre></td></tr></table></figure><h4 id="3-3-A-Text-Based-Ul"><a href="#3-3-A-Text-Based-Ul" class="headerlink" title="3.3 A Text-Based Ul"></a>3.3 A Text-Based Ul</h4><p>&ensp;&ensp;In designing PokerApp, we have also developed a specification for a generic Pokerinterface class. Our interface must support the methods for displaying information: setMoney, setDice, and showResul t. It must also have methods that allow for input from the user: wantToPlay and chooseDice. These methods can be implemented in many different ways, producing programs that look quite different even though the underlying model, PokerApp, remains the same.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TextInterface:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;Welcome to video poker.&quot;)</span><br><span class="line"></span><br><span class="line">    def setMoney(self, amt):</span><br><span class="line">        print(&quot;You currently have $&#123;0&#125;.&quot;.format(amt))</span><br><span class="line"></span><br><span class="line">    def setDice(self, values):</span><br><span class="line">        print(&quot;Dice:&quot;, values)</span><br><span class="line"></span><br><span class="line">    def wantToPlay(self):</span><br><span class="line">        ans = input(&quot;Do you wish to try your luck? &quot;)</span><br><span class="line">        return ans[0] in &quot;yY&quot;</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        print(&quot;\nThanks for playing!&quot;)</span><br><span class="line"></span><br><span class="line">    def showResult(self, msg, score):</span><br><span class="line">        print(&quot;&#123;0&#125;. You win $&#123;1&#125;.&quot;.format(msg, score))</span><br><span class="line"></span><br><span class="line">    def chooseDice(self):</span><br><span class="line">        return eval(input(&quot;Enter list of which to change ([] to stop) &quot;))</span><br></pre></td></tr></table></figure><p> &ensp;&ensp;Using this interface, we can test out our PokerApp program to see whether we have implemented a correct model. Here is a complete program making use of the modules that we have developed:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pokerapp import PokerApp</span><br><span class="line">from textpoker import TextInterface</span><br><span class="line"></span><br><span class="line">inter = TextInterface()</span><br><span class="line">app = PokerApp(inter)</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;Basically, all this program does is create a text -based interface and then build a PokerApp using this interface and start it running. Instead of creating a separate module for this, we could also just add the necessary launching code at the end of our textpoker module. When running this program, we get a rough but usable interaction:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Welcome to video poker.</span><br><span class="line">Do you wish to try your luck? y</span><br><span class="line">You currently have $90 .</span><br><span class="line">Dice: [6 , 4, 4, 2, 4]</span><br><span class="line">Enter list of which to change ([] to stop) [0 ,4]</span><br><span class="line">Dice: [1, 4, 4, 2, 2]</span><br><span class="line">Enter list of which to change ([] to stop) [0]</span><br><span class="line">Dice: [2 , 4, 4, 2, 2]</span><br><span class="line">Full House. You win $12.</span><br><span class="line">You currently have $102 .</span><br><span class="line">Do you wish to try your luck? y</span><br><span class="line">You currently have $92 .</span><br><span class="line">Dice: [5 , 6, 4, 4, 5]</span><br><span class="line">Enter list of which to change ( [] to stop) [1]</span><br><span class="line">Dice: [5&apos; 5&apos; 4&apos; 4&apos; 5]</span><br><span class="line">Enter list of which to change ( [] to stop) []</span><br><span class="line">Full House. You win $12.</span><br><span class="line">You currently have $104 .</span><br><span class="line">Do you wish to try your luck? y</span><br><span class="line">You currently have $94 .</span><br><span class="line">Dice: [3&apos; 2, 1, 1, 1]</span><br><span class="line">Enter list of which to change ( [] to stop) [0&apos; 1]</span><br><span class="line">Dice: [5&apos; 6&apos; 1, 1, 1]</span><br><span class="line">Enter list of which to change ( [] to stop) [0&apos; 1]</span><br><span class="line">Dice: [1&apos; 5&apos; 1, 1, 1]</span><br><span class="line">Four of a Kind. You win $15.</span><br><span class="line">You currently have $109 .</span><br><span class="line">Do you wish to try your luck? n</span><br><span class="line">Thanks for playing!</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;You can see how this interface provides just enough so that we can test out the model. In fact, we’ve got a game that’s already quite a bit of fun to play!</p><h3 id="4-Developing-a-GUI"><a href="#4-Developing-a-GUI" class="headerlink" title="4. Developing a GUI"></a>4. Developing a GUI</h3><p>&ensp;&ensp;Now that we have a working program, let’s turn our attention to a graphical interface. Our first step must be to decide exactly how we want our interface to look and function. The interface will have to support the various methods found in the text-based version and will also probably have some additional helper methods.</p><h4 id="4-1-Designing-the-Interaction"><a href="#4-1-Designing-the-Interaction" class="headerlink" title="4.1 Designing the Interaction"></a>4.1 Designing the Interaction</h4><p>&ensp;&ensp;Let’s start with the basic methods that must be supported and decide exactly how interaction with the user will occur. Clearly, in a graphical interface, the faces of the dice and the current score should be continuously displayed. The setDice and setMoney methods will be used to change those displays. That leaves one output method, showResult, that we need to accommodate. One common way to handle this sort of transient information is with a message at the bottom of the window. This is sometimes called a status bar.<br>&ensp;&ensp;To get information from the user, we will make use of buttons. In wantToPlay, the user will have to decide between either rolling the dice or quitting. We could include “Roll Dice” and “Quit” buttons for this choice. That leaves us with figuring out how the user should choose dice.<br>&ensp;&ensp;To implement chooseDice, we could provide a button for each die and have the user click the buttons for the dice they want to roll. When the user is done choosing the dice, they could click the “Roll Dice” button again to roll the selected dice. Elaborating on this idea, it would be nice if we allowed the user to change his or her mind while selecting the dice. Perhaps clicking the button of a currently selected die would cause it to become deselected. The clicking of the button will serve as a sort of toggle that selects/unselects a particular die. The user commits to a certain selection by clicking on “Roll Dice.”<br>&ensp;&ensp;Our vision for chooseDice suggests a couple of tweaks for the interface. First, we should have some way of showing the user which dice are currently selected. There are lots of ways we could do this. One simple approach would be to change the color of the dice. Let’s “gray out” the pips on the dice selected for rolling. Second, we need a good way for the user to indicate that they wish to stop rolling. That is, they would like the dice scored just as they stand. We could handle this by having them click the “Roll Dice” button when no dice are selected, hence asking the program to roll no dice. Another approach would be to provide a separate button to click that causes the dice to be scored. The latter approach seems a bit more intuitive/informative. Let’s add a “Score” button to the interface.<br>&ensp;&ensp;Now we have a basic idea of how the interface will function. We still need to figure out how it will look. What is the exact layout of the widgets? The figure above is a sample of how the interface might look. I’m sure those of you with a more artistic eye can come up with a more pleasing interface, but we’ll use this one as our working design.</p><h4 id="4-2-Managing-the-Widgets"><a href="#4-2-Managing-the-Widgets" class="headerlink" title="4.2 Managing the Widgets"></a>4.2 Managing the Widgets</h4><p>&ensp;&ensp;The graphical interface that we are developing makes use of buttons and dice. Our intent is to reuse the <strong>Button</strong> and <strong>DieView</strong> classes.</p><p><strong>Button</strong></p><p>This class needs the graphics class that we developed in previous exercise.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">from graphics import *</span><br><span class="line"></span><br><span class="line">class Button:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    A button is a labeled rectangle in a window.</span><br><span class="line">    It is activated or deactivated with the activate()</span><br><span class="line">    and deactivate() methods.The clicked(p) method</span><br><span class="line">    returns true if the button is active and pi s inside it.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, win, center, width, height, label):</span><br><span class="line"></span><br><span class="line">        w,h = width/2.0, height/2.0</span><br><span class="line">        x = center.getX()</span><br><span class="line">        y = center.getY()</span><br><span class="line">        self.xmax, self.xmin = x + w, x - w</span><br><span class="line">        self.ymax, self.ymin = y + h, y - h</span><br><span class="line">        p1 = Point(self.xmin, self.ymin)</span><br><span class="line">        p2 = Point(self.xmax, self.ymax)</span><br><span class="line">        self.rect = Rectangle(p1, p2)</span><br><span class="line">        self.rect.setFill(&apos;gray&apos;)</span><br><span class="line">        self.rect.draw(win)</span><br><span class="line">        self.label = Text(center, label)</span><br><span class="line">        self.label.draw(win)</span><br><span class="line">        self.deactivate()</span><br><span class="line"></span><br><span class="line">    def clicked(self, p):</span><br><span class="line">        return (self.active and self.xmin &lt;= p.getX() &lt;= self.xmax and self.ymin &lt;= p.getY() &lt;= self.ymax)</span><br><span class="line"></span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label.getText()</span><br><span class="line"></span><br><span class="line">    def activate(self):</span><br><span class="line">        self.label.setFill(&apos;black&apos;)</span><br><span class="line">        self.rect.setWidth(2)</span><br><span class="line">        self.active = True</span><br><span class="line"></span><br><span class="line">    def deactivate(self):</span><br><span class="line">        self.label.setFill(&quot;gray&quot;)</span><br><span class="line">        self.rect.setWidth(1)</span><br><span class="line">        self.active = False</span><br></pre></td></tr></table></figure><p><strong>DieView</strong></p><p>the class constructor draws a square and seven circles to represent the positions where the pips of various values will appear.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">from graphics import *</span><br><span class="line">class DieView:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    DieView is a widget that displays a graphical representation of a standard six-sided die.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, win, center, size):</span><br><span class="line">        &quot;&quot;&quot;Create a view of a die, e.g. : d1 = GDie(myWin, Point (40,50) , 20) creates a die centered at (40,50) having sides of length 20.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # first define some standard values</span><br><span class="line">        self.win = win</span><br><span class="line">        self.background = &quot;white&quot;  # color of die face</span><br><span class="line">        self.foreground = &quot;black&quot;  # color of the pips</span><br><span class="line">        self.psize = 0.1 * size #radius of each pip</span><br><span class="line">        hsize = size/2.0 # half of size</span><br><span class="line">        offset = 0.6 * hsize # distance from center to outer pips</span><br><span class="line"></span><br><span class="line">        # create a square for the face</span><br><span class="line">        cx, cy = center.getX(), center.getY()</span><br><span class="line">        p1 = Point(cx - hsize, cy - hsize)</span><br><span class="line">        p2 = Point(cx + hsize, cy + hsize)</span><br><span class="line">        rect = Rectangle(p1, p2)</span><br><span class="line">        rect.draw(win)</span><br><span class="line">        rect.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Create 7 circles for standard pip locations</span><br><span class="line">        self.pips = [self.__makePip(cx - offset, cy - offset), self.__makePip(cx - offset, cy), self.__makePip(cx - offset, cy + offset), self.__makePip(cx, cy), self.__makePip(cx + offset, cy - offset), self.__makePip(cx + offset, cy), self.__makePip(cx + offset, cy + offset)]</span><br><span class="line"></span><br><span class="line">        # Create a table for which pips are on for each value</span><br><span class="line">        self.onTable = [[], [3], [2, 4], [2, 3, 4], [0, 2, 4, 6],[0,2,3,4,6],[0, 1, 2, 4, 5, 6]]</span><br><span class="line">        self.setValue(1)</span><br><span class="line"></span><br><span class="line">    def __makePip(self, x, y):</span><br><span class="line">        &quot;&quot;&quot;Internal helper method to draw a pip at(x, y)&quot;&quot;&quot;</span><br><span class="line">        pip = Circle(Point(x, y), self.psize)</span><br><span class="line">        pip.setFill(self.background)</span><br><span class="line">        pip.setOutline(self.background)</span><br><span class="line">        pip.draw(self.win)</span><br><span class="line">        return pip</span><br><span class="line"></span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        &quot;&quot;&quot; Set this die to display value.&quot;&quot;&quot;</span><br><span class="line">        # Turn all the pips off</span><br><span class="line">        for pip in self.pips:</span><br><span class="line">            pip.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Turn the appropriate pips back on</span><br><span class="line">        for i in self.onTable[value]:</span><br><span class="line">            self.pips[i].setFill(self.foreground)</span><br><span class="line"></span><br><span class="line">class ColorDieView(DieView):</span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        DieView.setValue(self, value)</span><br><span class="line"></span><br><span class="line">    def setColor(self, color):</span><br><span class="line">        self.foreground = color</span><br><span class="line">        self.setValue(self.value)</span><br></pre></td></tr></table></figure><h4 id="4-3-Creating-the-Interface"><a href="#4-3-Creating-the-Interface" class="headerlink" title="4.3 Creating the Interface"></a>4.3 Creating the Interface</h4><p>&ensp;&ensp;Now that we have our widgets under control, we are ready to actually implement our GUI poker interface. The constructor will create all of our widgets, setting up the interface for later interactions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">from button import Button</span><br><span class="line">from graphics import *</span><br><span class="line">from dieview2 import DieView, ColorDieView</span><br><span class="line">from dice import Dice</span><br><span class="line"></span><br><span class="line">class Graphicsinterface:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.win = GraphWin(&quot;Dice Poker&quot;, 600, 400)</span><br><span class="line">        self.win.setBackground(&quot;green3&quot;)</span><br><span class="line">        banner = Text(Point(300, 30), &quot;Python Poker Parlor&quot;)</span><br><span class="line">        banner.setSize(24)</span><br><span class="line">        banner.setFill(&quot;yellow2&quot;)</span><br><span class="line">        banner.setStyle(&quot;bold&quot;)</span><br><span class="line">        banner.draw(self.win)</span><br><span class="line">        self.msg = Text(Point(300, 380), &quot;Welcome to the Dice Table&quot;)</span><br><span class="line">        self.msg.setSize(18)</span><br><span class="line">        self.msg.draw(self.win)</span><br><span class="line">        self.createDice(Point(300, 100), 75)</span><br><span class="line">        self.buttons = []</span><br><span class="line">        self.addDiceButtons(Point(300, 170), 75, 30)</span><br><span class="line">        b = Button(self.win, Point(300, 230), 400, 40, &quot;Roll Dice&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        b = Button(self.win, Point(300, 280), 150, 40, &quot;Score&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        b = Button(self.win, Point(570, 375), 40, 30, &quot;Quit&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        self.money = Text(Point(300, 325), &quot;$100&quot;)</span><br><span class="line">        self.money.setSize(18)</span><br><span class="line">        self.money.draw(self.win)</span><br><span class="line"></span><br><span class="line">    def choose(self, choices):</span><br><span class="line">        buttons = self.buttons</span><br><span class="line"></span><br><span class="line">        # activate choice buttons, deactivate others</span><br><span class="line">        for b in buttons:</span><br><span class="line">            if b.getLabel() in choices:</span><br><span class="line">                b.activate()</span><br><span class="line">            else:</span><br><span class="line">                b.deactivate()</span><br><span class="line"></span><br><span class="line">        # get mouse clicks unt il an active button is clicked</span><br><span class="line">        while True:</span><br><span class="line">            p = self.win.getMouse()</span><br><span class="line">            for b in buttons:</span><br><span class="line">                if b.clicked(p):</span><br><span class="line">                    return b.getLabel() # function ex it here.</span><br><span class="line"></span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        # Turn all the pips off</span><br><span class="line">        for pip in self.pips:</span><br><span class="line">            pip.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Turn the appropriate pips back on</span><br><span class="line">            for i in self.onTable[value]:</span><br><span class="line">                self.pips[i].setFill(self.foreground)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def createDice(self, center, size):</span><br><span class="line">        center.move(-3 * size, 0)</span><br><span class="line">        self.dice = []</span><br><span class="line">        for i in range(5):</span><br><span class="line">            view = ColorDieView(self.win, center, size)</span><br><span class="line">            self.dice.append(view)</span><br><span class="line">            center.move(1.5 * size, 0)</span><br><span class="line"></span><br><span class="line">    def setColor(self, color):</span><br><span class="line">        self.foreground = color</span><br><span class="line">        self.setValue(self.value)</span><br><span class="line"></span><br><span class="line">    def addDiceButtons(self, center, width, height):</span><br><span class="line">        center.move(-3 * width, 0)</span><br><span class="line"></span><br><span class="line">        for i in range(1, 6):</span><br><span class="line">            label = &quot;Die &#123;0&#125;&quot;.format(i)</span><br><span class="line">            b = Button(self.win, center, width, height, label)</span><br><span class="line">            self.buttons.append(b)</span><br><span class="line">            center.move(1.5 * width, 0)</span><br><span class="line"></span><br><span class="line">    def setMoney(self, amt):</span><br><span class="line">        self.money.setText(&quot;$&#123;0&#125;&quot;.format(amt))</span><br><span class="line"></span><br><span class="line">    def showResult(self, msg, score):</span><br><span class="line">        if score &gt; 0:</span><br><span class="line">            text = &quot;&#123;0&#125; ! You win $&#123;1&#125;&quot;.format(msg, score)</span><br><span class="line">        else:</span><br><span class="line">            text = &quot;You rolled &#123;0&#125;&quot;.format(msg)</span><br><span class="line">        self.msg.setText(text)</span><br><span class="line"></span><br><span class="line">    def setDice(self, values):</span><br><span class="line">        for i in range(5):</span><br><span class="line">            self.dice[i].setValue(values[i])</span><br><span class="line"></span><br><span class="line">    def wantToPlay(self):</span><br><span class="line">        ans = self.choose([&quot;Roll Dice&quot;, &quot;Quit&quot;])</span><br><span class="line">        self.msg.setText(&quot;&quot;)</span><br><span class="line">        return ans == &quot;Roll Dice&quot;</span><br><span class="line"></span><br><span class="line">    def chooseDice(self):</span><br><span class="line">        # choices is a list of the indexes of the selected dice</span><br><span class="line">        choices = [] # No dice chosen yet</span><br><span class="line">        while True:</span><br><span class="line">            # wait for user to click a valid button</span><br><span class="line">            b = self.choose([&quot;Die 1&quot;, &quot;Die 2&quot;, &quot;Die 3&quot;, &quot;Die 4&quot;, &quot;Die 5&quot;, &quot;Roll Dice&quot;, &quot;Score&quot;])</span><br><span class="line"></span><br><span class="line">            if b[0] == &quot;D&quot;:</span><br><span class="line">                i = int(b[4]) - 1</span><br><span class="line">                if i in choices:</span><br><span class="line">                    choices.remove(i)</span><br><span class="line">                    self.dice[i].setColor(&quot;black&quot;)</span><br><span class="line">                else:</span><br><span class="line">                    choices.append(i)</span><br><span class="line">                    self.dice[i].setColor(&quot;gray&quot;)</span><br><span class="line">            else:</span><br><span class="line">                for d in self.dice:</span><br><span class="line">                    d.setColor(&quot;black&quot;)</span><br><span class="line">                if b == &quot;Score&quot;:</span><br><span class="line">                    return []</span><br><span class="line">                elif choices != []:</span><br><span class="line">                    return choices</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.win.close()</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;Finally, we need a few lines to actually get our graphical poker-playing program started. This code is exactly like the start code for the textual version, except that we use a Graphicsinterface in place of the Textinterface:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from graphicspoker import Graphicsinterface</span><br><span class="line">from pokerapp import PokerApp</span><br><span class="line"></span><br><span class="line">inter = Graphicsinterface()</span><br><span class="line">app = PokerApp(inter)</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h3 id="5-The-Completed-Code"><a href="#5-The-Completed-Code" class="headerlink" title="5. The Completed Code:"></a>5. The Completed Code:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line">from graphics import *</span><br><span class="line">from random import randrange</span><br><span class="line">from random import *</span><br><span class="line"></span><br><span class="line">class Dice:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.dice = [0]*5</span><br><span class="line">        self.rollAll()</span><br><span class="line"></span><br><span class="line">    def roll(self, which):</span><br><span class="line">        for pos in which:</span><br><span class="line">            self.dice[pos] = randrange(1, 7)</span><br><span class="line"></span><br><span class="line">    def rollAll(self):</span><br><span class="line">        self.roll(range(5))</span><br><span class="line"></span><br><span class="line">    def values(self):</span><br><span class="line">        return self.dice[:]</span><br><span class="line"></span><br><span class="line">    def score(self):</span><br><span class="line">        # Create the counts list</span><br><span class="line">        # Counts[i] will be the number of times that the value i occurs in dice.</span><br><span class="line">        # if the dice are: [3,2,5,2,3] then the counts list would be [0,0,2,2,0,1,0]</span><br><span class="line">        counts = [0]*7</span><br><span class="line">        for value in self.dice:</span><br><span class="line">            counts[value] = counts[value] + 1</span><br><span class="line"></span><br><span class="line">        # score the hand</span><br><span class="line">        if 5 in counts:</span><br><span class="line">            return &quot;Five of a Kind&quot; , 30</span><br><span class="line">        elif 4 in counts:</span><br><span class="line">            return &quot;Four of a Kind&quot; , 15</span><br><span class="line">        elif (3 in counts) and (2 in counts) :</span><br><span class="line">            return &quot;Full House&quot;, 12</span><br><span class="line">        elif 3 in counts:</span><br><span class="line">            return &quot;Three of a Kind&quot;, 8</span><br><span class="line">        elif not (2 in counts) and (counts[1] == 0 or counts[6] == 0):</span><br><span class="line">            return &quot;Straight&quot;, 20</span><br><span class="line">        elif counts.count(2) == 2:</span><br><span class="line">            return &quot;Two Pairs&quot;, 5</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Garbage&quot;, 0</span><br><span class="line"></span><br><span class="line">class PokerApp:</span><br><span class="line">    def __init__(self, interface):</span><br><span class="line">        self.dice = Dice()</span><br><span class="line">        self.money = 100</span><br><span class="line">        self.interface = interface</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while self.money &gt;= 10 and self.interface.wantToPlay():</span><br><span class="line">            self.playRound()</span><br><span class="line">        self.interface.close()</span><br><span class="line"></span><br><span class="line">    def playRound(self):</span><br><span class="line">        self.money = self.money - 10</span><br><span class="line">        self.interface.setMoney(self.money)</span><br><span class="line">        self.doRolls()</span><br><span class="line">        result, score = self.dice.score()</span><br><span class="line">        self. interface. showResult (result, score)</span><br><span class="line">        self.money = self.money + score</span><br><span class="line">        self.interface.setMoney(self.money)</span><br><span class="line"></span><br><span class="line">    def doRolls(self):</span><br><span class="line">        self.dice.rollAll()</span><br><span class="line">        roll = 1</span><br><span class="line">        self.interface.setDice(self.dice.values())</span><br><span class="line">        toRoll = self.interface.chooseDice()</span><br><span class="line">        while roll &lt; 3 and toRoll != []:</span><br><span class="line">            self.dice.roll(toRoll)</span><br><span class="line">            roll = roll + 1</span><br><span class="line">            self.interface.setDice(self.dice.values())</span><br><span class="line">            if roll &lt; 3:</span><br><span class="line">                toRoll = self.interface.chooseDice()</span><br><span class="line"></span><br><span class="line">class Button:</span><br><span class="line">    def __init__(self, win, center, width, height, label):</span><br><span class="line"></span><br><span class="line">        w,h = width/2.0, height/2.0</span><br><span class="line">        x = center.getX()</span><br><span class="line">        y = center.getY()</span><br><span class="line">        self.xmax, self.xmin = x + w, x - w</span><br><span class="line">        self.ymax, self.ymin = y + h, y - h</span><br><span class="line">        p1 = Point(self.xmin, self.ymin)</span><br><span class="line">        p2 = Point(self.xmax, self.ymax)</span><br><span class="line">        self.rect = Rectangle(p1, p2)</span><br><span class="line">        self.rect.setFill(&apos;gray&apos;)</span><br><span class="line">        self.rect.draw(win)</span><br><span class="line">        self.label = Text(center, label)</span><br><span class="line">        self.label.draw(win)</span><br><span class="line">        self.deactivate()</span><br><span class="line"></span><br><span class="line">    def clicked(self, p):</span><br><span class="line">        return (self.active and self.xmin &lt;= p.getX() &lt;= self.xmax and self.ymin &lt;= p.getY() &lt;= self.ymax)</span><br><span class="line"></span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label.getText()</span><br><span class="line"></span><br><span class="line">    def activate(self):</span><br><span class="line">        self.label.setFill(&apos;black&apos;)</span><br><span class="line">        self.rect.setWidth(2)</span><br><span class="line">        self.active = True</span><br><span class="line"></span><br><span class="line">    def deactivate(self):</span><br><span class="line">        self.label.setFill(&quot;gray&quot;)</span><br><span class="line">        self.rect.setWidth(1)</span><br><span class="line">        self.active = False</span><br><span class="line"></span><br><span class="line">class DieView:</span><br><span class="line">    &quot;&quot;&quot; DieView is a widget that displays a graphical representation of a standard six-sided die.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, win, center, size):</span><br><span class="line">        &quot;&quot;&quot;Create a view of a die, e.g. : d1 = GDie(myWin, Point (40,50) , 20) creates a die centered at (40,50) having sides of length 20.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # first define some standard values</span><br><span class="line">        self.win = win</span><br><span class="line">        self.background = &quot;white&quot;  # color of die face</span><br><span class="line">        self.foreground = &quot;black&quot;  # color of the pips</span><br><span class="line">        self.psize = 0.1 * size #radius of each pip</span><br><span class="line">        hsize = size/2.0 # half of size</span><br><span class="line">        offset = 0.6 * hsize # distance from center to outer pips</span><br><span class="line"></span><br><span class="line">        # create a square for the face</span><br><span class="line">        cx, cy = center.getX(), center.getY()</span><br><span class="line">        p1 = Point(cx - hsize, cy - hsize)</span><br><span class="line">        p2 = Point(cx + hsize, cy + hsize)</span><br><span class="line">        rect = Rectangle(p1, p2)</span><br><span class="line">        rect.draw(win)</span><br><span class="line">        rect.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Create 7 circles for standard pip locations</span><br><span class="line">        self.pips = [self.__makePip(cx - offset, cy - offset), self.__makePip(cx - offset, cy), self.__makePip(cx - offset, cy + offset), self.__makePip(cx, cy), self.__makePip(cx + offset, cy - offset), self.__makePip(cx + offset, cy), self.__makePip(cx + offset, cy + offset)]</span><br><span class="line"></span><br><span class="line">        # Create a table for which pips are on for each value</span><br><span class="line">        self.onTable = [[], [3], [2, 4], [2, 3, 4], [0, 2, 4, 6],[0,2,3,4,6],[0, 1, 2, 4, 5, 6]]</span><br><span class="line">        self.setValue(1)</span><br><span class="line"></span><br><span class="line">    def __makePip(self, x, y):</span><br><span class="line">        &quot;&quot;&quot;Internal helper method to draw a pip at(x, y)&quot;&quot;&quot;</span><br><span class="line">        pip = Circle(Point(x, y), self.psize)</span><br><span class="line">        pip.setFill(self.background)</span><br><span class="line">        pip.setOutline(self.background)</span><br><span class="line">        pip.draw(self.win)</span><br><span class="line">        return pip</span><br><span class="line"></span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        &quot;&quot;&quot; Set this die to display value.&quot;&quot;&quot;</span><br><span class="line">        # Turn all the pips off</span><br><span class="line">        for pip in self.pips:</span><br><span class="line">            pip.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Turn the appropriate pips back on</span><br><span class="line">        for i in self.onTable[value]:</span><br><span class="line">            self.pips[i].setFill(self.foreground)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ColorDieView(DieView):</span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        DieView.setValue(self, value)</span><br><span class="line"></span><br><span class="line">    def setColor(self, color):</span><br><span class="line">        self.foreground = color</span><br><span class="line">        self. setValue(self.value)</span><br><span class="line"></span><br><span class="line">class Graphicsinterface:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.win = GraphWin(&quot;Dice Poker&quot;, 600, 400)</span><br><span class="line">        self.win.setBackground(&quot;green3&quot;)</span><br><span class="line">        banner = Text(Point(300, 30), &quot;Python Poker Parlor&quot;)</span><br><span class="line">        banner.setSize(24)</span><br><span class="line">        banner.setFill(&quot;yellow2&quot;)</span><br><span class="line">        banner.setStyle(&quot;bold&quot;)</span><br><span class="line">        banner.draw(self.win)</span><br><span class="line">        self.msg = Text(Point(300, 380), &quot;Welcome to the Dice Table&quot;)</span><br><span class="line">        self.msg.setSize(18)</span><br><span class="line">        self.msg.draw(self.win)</span><br><span class="line">        self.createDice(Point(300, 100), 75)</span><br><span class="line">        self.buttons = []</span><br><span class="line">        self.addDiceButtons(Point(300, 170), 75, 30)</span><br><span class="line">        b = Button(self.win, Point(300, 230), 400, 40, &quot;Roll Dice&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        b = Button(self.win, Point(300, 280), 150, 40, &quot;Score&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        b = Button(self.win, Point(570, 375), 40, 30, &quot;Quit&quot;)</span><br><span class="line">        self.buttons.append(b)</span><br><span class="line">        self.money = Text(Point(300, 325), &quot;$100&quot;)</span><br><span class="line">        self.money.setSize(18)</span><br><span class="line">        self.money.draw(self.win)</span><br><span class="line"></span><br><span class="line">    def choose(self, choices):</span><br><span class="line">        buttons = self.buttons</span><br><span class="line"></span><br><span class="line">        # activate choice buttons, deactivate others</span><br><span class="line">        for b in buttons:</span><br><span class="line">            if b.getLabel() in choices:</span><br><span class="line">                b.activate()</span><br><span class="line">            else:</span><br><span class="line">                b.deactivate()</span><br><span class="line"></span><br><span class="line">        # get mouse clicks unt il an active button is clicked</span><br><span class="line">        while True:</span><br><span class="line">            p = self.win.getMouse()</span><br><span class="line">            for b in buttons:</span><br><span class="line">                if b.clicked(p):</span><br><span class="line">                    return b.getLabel() # function ex it here.</span><br><span class="line"></span><br><span class="line">    def setValue(self, value):</span><br><span class="line">        # Turn all the pips off</span><br><span class="line">        for pip in self.pips:</span><br><span class="line">            pip.setFill(self.background)</span><br><span class="line"></span><br><span class="line">        # Turn the appropriate pips back on</span><br><span class="line">            for i in self.onTable[value]:</span><br><span class="line">                self.pips[i].setFill(self.foreground)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def createDice(self, center, size):</span><br><span class="line">        center.move(-3 * size, 0)</span><br><span class="line">        self.dice = []</span><br><span class="line">        for i in range(5):</span><br><span class="line">            view = ColorDieView(self.win, center, size)</span><br><span class="line">            self.dice.append(view)</span><br><span class="line">            center.move(1.5 * size, 0)</span><br><span class="line"></span><br><span class="line">    def setColor(self, color):</span><br><span class="line">        self.foreground = color</span><br><span class="line">        self.setValue(self.value)</span><br><span class="line"></span><br><span class="line">    def addDiceButtons(self, center, width, height):</span><br><span class="line">        center.move(-3 * width, 0)</span><br><span class="line"></span><br><span class="line">        for i in range(1, 6):</span><br><span class="line">            label = &quot;Die &#123;0&#125;&quot;.format(i)</span><br><span class="line">            b = Button(self.win, center, width, height, label)</span><br><span class="line">            self.buttons.append(b)</span><br><span class="line">            center.move(1.5 * width, 0)</span><br><span class="line"></span><br><span class="line">    def setMoney(self, amt):</span><br><span class="line">        self.money.setText(&quot;$&#123;0&#125;&quot;.format(amt))</span><br><span class="line"></span><br><span class="line">    def showResult(self, msg, score):</span><br><span class="line">        if score &gt; 0:</span><br><span class="line">            text = &quot;&#123;0&#125; ! You win $&#123;1&#125;&quot;.format(msg, score)</span><br><span class="line">        else:</span><br><span class="line">            text = &quot;You rolled &#123;0&#125;&quot;.format(msg)</span><br><span class="line">        self.msg.setText(text)</span><br><span class="line"></span><br><span class="line">    def setDice(self, values):</span><br><span class="line">        for i in range(5):</span><br><span class="line">            self.dice[i].setValue(values[i])</span><br><span class="line"></span><br><span class="line">    def wantToPlay(self):</span><br><span class="line">        ans = self.choose([&quot;Roll Dice&quot;, &quot;Quit&quot;])</span><br><span class="line">        self.msg.setText(&quot;&quot;)</span><br><span class="line">        return ans == &quot;Roll Dice&quot;</span><br><span class="line"></span><br><span class="line">    def chooseDice(self):</span><br><span class="line">        # choices is a list of the indexes of the selected dice</span><br><span class="line">        choices = [] # No dice chosen yet</span><br><span class="line">        while True:</span><br><span class="line">            # wait for user to click a valid button</span><br><span class="line">            b = self.choose([&quot;Die 1&quot;, &quot;Die 2&quot;, &quot;Die 3&quot;, &quot;Die 4&quot;, &quot;Die 5&quot;, &quot;Roll Dice&quot;, &quot;Score&quot;])</span><br><span class="line"></span><br><span class="line">            if b[0] == &quot;D&quot;:</span><br><span class="line">                i = int(b[4]) - 1</span><br><span class="line">                if i in choices:</span><br><span class="line">                    choices.remove(i)</span><br><span class="line">                    self.dice[i].setColor(&quot;black&quot;)</span><br><span class="line">                else:</span><br><span class="line">                    choices.append(i)</span><br><span class="line">                    self.dice[i].setColor(&quot;gray&quot;)</span><br><span class="line">            else:</span><br><span class="line">                for d in self.dice:</span><br><span class="line">                    d.setColor(&quot;black&quot;)</span><br><span class="line">                if b == &quot;Score&quot;:</span><br><span class="line">                    return []</span><br><span class="line">                elif choices != []:</span><br><span class="line">                    return choices</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.win.close()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    inter = Graphicsinterface()</span><br><span class="line">    app = PokerApp(inter)</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><br></p><p><img src="https://miao.su/images/2019/05/19/resa67f0.gif" alt="resa67f0.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Case-Study-Dice-Poker&quot;&gt;&lt;a href=&quot;#Case-Study-Dice-Poker&quot; class=&quot;headerlink&quot; title=&quot;Case Study: Dice Poker&quot;&gt;&lt;/a&gt;Case Study: Dice Poker&lt;/h2&gt;&lt;h3 id=&quot;1-Program-Specification&quot;&gt;&lt;a href=&quot;#1-Program-Specification&quot; class=&quot;headerlink&quot; title=&quot;1. Program Specification&quot;&gt;&lt;/a&gt;1. Program Specification&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;Our goal is to write a game program that allows a user to play video poker using dice. The program will display a hand consisting of five dice. The basic set of rules is as follows:&lt;br&gt;
    
    </summary>
    
      <category term="Python Exercise" scheme="http://looby.coding.me/betterming/categories/Python-Exercise/"/>
    
    
      <category term="game" scheme="http://looby.coding.me/betterming/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>BST Summary</title>
    <link href="http://looby.coding.me/betterming/post/fdb1de24.html"/>
    <id>http://looby.coding.me/betterming/post/fdb1de24.html</id>
    <published>2018-10-29T02:02:00.000Z</published>
    <updated>2019-02-06T14:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-Structure-–-BST"><a href="#Data-Structure-–-BST" class="headerlink" title="Data Structure – BST"></a>Data Structure – BST</h1><h2 id="1-定义："><a href="#1-定义：" class="headerlink" title="1. 定义："></a>1. 定义：</h2><p>BST(Binary Search Tree)或者是一棵空树，或者是具有下列性质的二叉树：</p><ul><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>左、右子树也分别为二叉排序树；</li><li>没有键值相等的节点。</li></ul><a id="more"></a><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h2><p>主要包括：查找、插入、建立、删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">struct node &#123;</span><br><span class="line">int data;</span><br><span class="line">node *lchild;</span><br><span class="line">node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 新建节点，返回一个节点指针</span><br><span class="line">node* newNode(int v)&#123;</span><br><span class="line">node* Node = new node;</span><br><span class="line">Node-&gt;data = v;</span><br><span class="line">Node-&gt;lchild = Node-&gt;rchild = NULL;</span><br><span class="line">return Node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// search x 只需搜索一边子树即可,O(h) h表示树高</span><br><span class="line">void search(node* root, int x)&#123;</span><br><span class="line">if(root == NULL) &#123;</span><br><span class="line">printf(&quot;search failed!\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(x == root-&gt;data) printf(&quot;%d\n&quot;, root-&gt;data);</span><br><span class="line">else if(x &lt; root-&gt;data) search(root-&gt;lchild, int x);</span><br><span class="line">else search(root-&gt;rchild, int x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// insert x 当root==NULL时，即为插入之处 O(h)</span><br><span class="line"></span><br><span class="line">void insert(node* &amp;root, int x)&#123;</span><br><span class="line">if(root == NULL)&#123;</span><br><span class="line">root = newNode(x);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(x == root-&gt;data) return;</span><br><span class="line">else if(x &lt; root-&gt;data) insert(root-&gt;lchild, x);</span><br><span class="line">else insert(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// BST的建立(注意：同一组数据，如果插入的顺序不同最后形成的BST可能也不同)</span><br><span class="line">// 复杂度O(h)*n = O(nlog2n)</span><br><span class="line"></span><br><span class="line">node *Create(int data[], int n)&#123;</span><br><span class="line">node* root = NULL;</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">insert(root, data[i]);</span><br><span class="line">&#125;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//BST的节点删除，删除根节点</span><br><span class="line">//删除根节点后，用直接后继或者直接前驱来替换</span><br><span class="line">//直接前驱：左子树一直向右直到某一节点的右子树为NULL的节点</span><br><span class="line">//直接后继：右子树一直向左直到某一节点的左子树为NULL的节点</span><br><span class="line"></span><br><span class="line">//FindMin()函数用于寻找树root的最小权值节点</span><br><span class="line"></span><br><span class="line">node* FindMin(node* root)&#123;</span><br><span class="line">while(root-&gt;lchild != NULL) root = root-&gt;lchild;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//FindMax()函数用于寻找树root的最大权值节点</span><br><span class="line"></span><br><span class="line">node* FindMax(node* root)&#123;</span><br><span class="line">while(root-&gt;rchild != NULL) root = root-&gt;rchild;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">BST删除节点步骤:</span><br><span class="line">1. 当前节点root空，直接返回</span><br><span class="line">2. 当前节点root的data值等于x，进入删除操作</span><br><span class="line">a)当前节点root为叶子节点，直接删除。</span><br><span class="line"> b)当前节点root存在左子树，找到前驱pre，覆盖root，删除pre</span><br><span class="line"> c)当前节点root存在右子树，找到后继next，覆盖root，删除next</span><br><span class="line">3. 若当前节点root权值大于x，则root = root-&gt;lchild 递归删除</span><br><span class="line">4. 若当前节点root权值小于x，则root = root-&gt;rchild 递归删除</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">void deleteNode(node* &amp;root, int x)&#123;</span><br><span class="line">if(root == NULL) return;</span><br><span class="line"></span><br><span class="line">if(root-&gt;data == x) &#123;</span><br><span class="line">if(root-&gt;lchild == NULL &amp;&amp; root-&gt;rchild == NULL) root = NULL;</span><br><span class="line">else if(root-&gt;lchild != NULL) &#123;</span><br><span class="line">node *pre = FindMax(root-&gt;lchild);</span><br><span class="line">root-&gt;data = pre-&gt;data;</span><br><span class="line">deleteNode(root-&gt;lchild, pre-&gt;data);  //删除pre节点</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">node* next = FindMin(root-&gt;rchild);</span><br><span class="line">root-&gt;data = next-&gt;data;</span><br><span class="line">deleteNode(root-&gt;rchild, next-&gt;data); //删除next 节点</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(root-&gt;data &gt; x) deleteNode(root-&gt;lchild, x);</span><br><span class="line">else deleteNode(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-应用"><a href="#3-应用" class="headerlink" title="3. 应用"></a>3. 应用</h2><p>利用PAT1043_Is It a Binary Search Tree 来练习一下BST。</p><blockquote><p>1043 Is It a Binary Search Tree （25 分）<br>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p><ul><li>The left subtree of a node contains only nodes with keys less than the node’s key.</li><li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p>If we swap the left and right subtrees of every node, then the resulting tree is called the Mirror Image of a BST.<br>Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.</p></blockquote><p>Input Specification:</p><blockquote><p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤1000). Then N integer keys are given in the next line. All the numbers in a line are separated by a space.</p></blockquote><p>Output Specification:</p><blockquote><p>For each test case, first print in a line YES if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or NO if not. Then if the answer is YES, print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p></blockquote><p>Sample Input 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 5 7 10 8 11</span><br></pre></td></tr></table></figure></p><p>Sample Output 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">5 7 6 8 11 10 8</span><br></pre></td></tr></table></figure></p><p>Sample Input 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure></p><p>Sample Output 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">11 8 10 7 5 6 8</span><br></pre></td></tr></table></figure></p><p>Sample Input 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 8 5 10 9 11</span><br></pre></td></tr></table></figure></p><p>Sample Output 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure></p><p><strong>Code and Analysis</strong>:<br>(1) 题意：判断给定序列是不是BST或者BST的镜像的先序遍历序列。是，输出YES和后序遍历序列；否，输出NO结束。<br>(2) 思路步骤：</p><ul><li>对给定的序列建立BST</li><li>对BST先序遍历，后序遍历，BST镜像先序遍历，BST镜像后序遍历</li><li>将给定序列与BST先序遍历，BST镜像先序遍历比较，相等，输出YES和对应后序序列，不相等，输出NO。</li></ul><p>(3) 数据结构：用vector<int>存储给定序列origin, BST先序序列pre, BST后序序列post, BST镜像先序序列preM, BST镜像后序序列postM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">int data;</span><br><span class="line">node* lchild;</span><br><span class="line">node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void insert(node* &amp;root, int x)&#123;</span><br><span class="line">if(root == NULL) &#123;</span><br><span class="line">root = new node;</span><br><span class="line">root-&gt;data = x;</span><br><span class="line">root-&gt;lchild = root-&gt;rchild = NULL;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else if(root-&gt;data &gt; x) insert(root-&gt;lchild, x);</span><br><span class="line">else insert(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line">// 先序遍历：中左右 --- 镜像先序遍历：中右左</span><br><span class="line">// 后序遍历：左右中 --- 镜像后序遍历：右左中</span><br><span class="line">// 中序遍历：左中右 --- 镜像中序遍历：右中左</span><br><span class="line">void preOrder(node* root, vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">if(root == NULL) return;</span><br><span class="line">vi.push_back(root-&gt;data);</span><br><span class="line">preOrder(root-&gt;lchild, vi);</span><br><span class="line">preOrder(root-&gt;rchild, vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void preMirror(node* root, vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">if(root == NULL) return;</span><br><span class="line">vi.push_back(root-&gt;data);</span><br><span class="line">preMirror(root-&gt;rchild, vi);</span><br><span class="line">preMirror(root-&gt;lchild, vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void postOrder(node* root, vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">if(root == NULL) return;</span><br><span class="line">postOrder(root-&gt;lchild, vi);</span><br><span class="line">postOrder(root-&gt;rchild, vi);</span><br><span class="line">vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void postMirror(node* root, vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">if(root == NULL) return;</span><br><span class="line">postMirror(root-&gt;rchild, vi);</span><br><span class="line">postMirror(root-&gt;lchild, vi);</span><br><span class="line">vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; origin, pre, post, preM, postM;</span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">int n, data;</span><br><span class="line">node* root = new node;</span><br><span class="line">root = NULL;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;data);</span><br><span class="line">origin.push_back(data);</span><br><span class="line">insert(root, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preOrder(root, pre);</span><br><span class="line">preMirror(root, preM);</span><br><span class="line">postOrder(root, post);</span><br><span class="line">postMirror(root, postM);</span><br><span class="line"></span><br><span class="line">if(origin == pre)&#123;</span><br><span class="line">printf(&quot;YES\n&quot;);</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;,post[i]);</span><br><span class="line">if(i &lt; n-1) printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(origin == preM)&#123;</span><br><span class="line">printf(&quot;YES\n&quot;);</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, postM[i]);</span><br><span class="line">if(i &lt; n-1) printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else printf(&quot;NO\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">7</span><br><span class="line">8 6 5 7 10 8 11</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></int></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Data-Structure-–-BST&quot;&gt;&lt;a href=&quot;#Data-Structure-–-BST&quot; class=&quot;headerlink&quot; title=&quot;Data Structure – BST&quot;&gt;&lt;/a&gt;Data Structure – BST&lt;/h1&gt;&lt;h2 id=&quot;1-定义：&quot;&gt;&lt;a href=&quot;#1-定义：&quot; class=&quot;headerlink&quot; title=&quot;1. 定义：&quot;&gt;&lt;/a&gt;1. 定义：&lt;/h2&gt;&lt;p&gt;BST(Binary Search Tree)或者是一棵空树，或者是具有下列性质的二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;/li&gt;
&lt;li&gt;若右子树不空，则右子树上所有结点的值均大于它的根结点的值；&lt;/li&gt;
&lt;li&gt;左、右子树也分别为二叉排序树；&lt;/li&gt;
&lt;li&gt;没有键值相等的节点。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="BST" scheme="http://looby.coding.me/betterming/tags/BST/"/>
    
      <category term="PAT" scheme="http://looby.coding.me/betterming/tags/PAT/"/>
    
      <category term="Traversal" scheme="http://looby.coding.me/betterming/tags/Traversal/"/>
    
      <category term="Order" scheme="http://looby.coding.me/betterming/tags/Order/"/>
    
  </entry>
  
  <entry>
    <title>Exercise5</title>
    <link href="http://looby.coding.me/betterming/post/12ef2f97.html"/>
    <id>http://looby.coding.me/betterming/post/12ef2f97.html</id>
    <published>2018-10-28T03:00:25.000Z</published>
    <updated>2019-05-19T13:05:03.714Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是我们老师布置的作业，以下是我的一些总结。</p><h2 id="1-Programming-Exercise"><a href="#1-Programming-Exercise" class="headerlink" title="1. Programming Exercise"></a>1. Programming Exercise</h2><ul><li>Modify the cannonball simulation from the chapter so that it also calculates the maximum height achieved by the cannonball.<a id="more"></a></li><li>Program Specification<ul><li>Suppose we want to write a program that simulates the flight of a cannonball (or any other projectile such as a bullet, baseball, or shot put). We are particularly interested in finding out how far the cannonball will travel when fired at various launch angles and initial velocities. The input to the program will be the launch angle (in degrees), the initial velocity (in meters per second), and the initial height (in meters) of the cannonball. The output will be the distance that the projectile travels before striking the ground (in meters).</li><li>In addition, the program also can calculate the maximum height.</li></ul></li></ul><h2 id="2-Code-and-Analysis"><a href="#2-Code-and-Analysis" class="headerlink" title="2. Code and Analysis"></a>2. Code and Analysis</h2><h3 id="2-1-The-First-Version"><a href="#2-1-The-First-Version" class="headerlink" title="2.1 The First Version"></a>2.1 The First Version</h3><p>&ensp;&ensp;Let’s start by designing an algorithm. Given the problem statement, it’s clear that we need to consider the flight of the cannonball in two dimensions: height, so we know when it hits the ground; and distance, to keep track of how far it goes. We can think of the position of the cannonball as a point ( x, y) in a 2D graph where the value of y gives the height above the ground and the value of x gives the distance from the starting point.</p><p>&ensp;&ensp;The Projectile class must have an <strong> init </strong> method that uses these values to initialize the instance variables of cball. But what should the instance variables be? Of course, they will be the four pieces of information that characterize the flight of the cannonball: xpos, ypos, xvel, yvel and MaxHeight.</p><p>&ensp;&ensp; Notice how we have created five instance variables inside the object using the self dot notation. The value of theta is not needed after <strong> ini t </strong> terminates, so it is just a normal (local) function variable. The methods for accessing the position of our projectiles are straightforward; the current position is given by the instance variables xpos, ypos and MaxHeight. We just need a couple of methods that return these values.</p><p>&ensp;&ensp;Finally, we come to the update method. This method takes a single normal parameter that represents an interval of time. We need to update the state of the projectile to account for the passage of that much time. Here’s the code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">from math import sin, cos, radians</span><br><span class="line"></span><br><span class="line">class Projectile:</span><br><span class="line">    def __init__(self, angle, velocity, height):</span><br><span class="line">        self.xpos = 0.0</span><br><span class="line">        self.ypos = height</span><br><span class="line">        theta = radians(angle)</span><br><span class="line">        self.xvel = velocity * cos(theta)</span><br><span class="line">        self.yvel = velocity * sin(theta)</span><br><span class="line">        self.MaxHeight = self.ypos</span><br><span class="line"></span><br><span class="line">    def update(self, time):</span><br><span class="line">        self.xpos = self.xpos + time * self.xvel</span><br><span class="line">        yvel1 = self.yvel - 9.8 * time</span><br><span class="line">        self.ypos = self.ypos + time * (self.yvel + yvel1) / 2.0</span><br><span class="line">        self.yvel = yvel1</span><br><span class="line">        if self.ypos &gt; self.MaxHeight:</span><br><span class="line">            self.MaxHeight = self.ypos</span><br><span class="line"></span><br><span class="line">    def getY(self):</span><br><span class="line">        return self.ypos</span><br><span class="line"></span><br><span class="line">    def getX(self):</span><br><span class="line">        return self.xpos</span><br><span class="line"></span><br><span class="line">    def getMaxHeight(self):</span><br><span class="line">        return self.MaxHeight</span><br><span class="line"></span><br><span class="line">def getInputs():</span><br><span class="line">    a = float(input(&quot;Enter the launch angle (in degrees): &quot;))</span><br><span class="line">    v = float(input(&quot;Enter the initial velocity (in meters/sec): &quot;))</span><br><span class="line">    h = float(input(&quot;Enter the initial height (in meters): &quot;))</span><br><span class="line">    t = float(input(&quot;Enter the time interval between position calculations: &quot;))</span><br><span class="line"></span><br><span class="line">    return a, v, h, t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    angle, vel, h0, time = getInputs()</span><br><span class="line">    cball = Projectile(angle, vel, h0)</span><br><span class="line">    cball.update(time)</span><br><span class="line">    while cball.getY() &gt;= 0:</span><br><span class="line">        cball.update(time)</span><br><span class="line">    print(&quot;\nDistance traveled: &#123;0:0.1f&#125; meters.&quot;. format(cball.getX()))</span><br><span class="line">    print(cball.xvel)</span><br><span class="line">    print(cball.getMaxHeight())</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2019/02/06/FirstVersione9cf6.png" alt="FirstVersione9cf6.png"></p><h3 id="2-2-The-Second-Version"><a href="#2-2-The-Second-Version" class="headerlink" title="2.2 The Second Version"></a>2.2 The Second Version</h3><p>&ensp;&ensp;Based on the first version,  let’s use our new object ideas to add a nicer interface to the cannonball example that started the chapter. Instead of having a boring text -based interface, the program would be more fun to use if it had a graphical interface. It would be nice to actually “see” where the canonball ends up and how it gets there. Figure 10.4 shows what I have in mind. Here you can see a cannonball currently in flight as well as where two previous shots ended.</p><h4 id="2-2-1-Creating-a-Graphics-Window"><a href="#2-2-1-Creating-a-Graphics-Window" class="headerlink" title="2.2.1 Creating a Graphics Window"></a>2.2.1 Creating a Graphics Window</h4><p>&ensp;&ensp;The first step in the program is to create a graphics window and draw the appropriate scale line across the bottom. Using our graphics library; this is straightforward. Here’s the start of the program:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    # create animation window</span><br><span class="line">    win = GraphWin(&quot;Projectile Animation&quot;, 640, 480, autoflush = False)</span><br><span class="line">    win.setCoords(-10, -10, 210, 155)</span><br><span class="line"></span><br><span class="line">    # draw baseline</span><br><span class="line">    Line(Point(-10, 0), Point(210, 0)).draw(win)</span><br><span class="line"></span><br><span class="line">    # draw labeled tricks every 50 meters</span><br><span class="line">    for x in range(0, 210, 50):</span><br><span class="line">        Text(Point(x, -5), str(x)).draw(win)</span><br><span class="line">        Line(Point(x, 0), Point(x, 2)).draw(win)</span><br></pre></td></tr></table></figure></p><p><img src="https://miao.su/images/2019/02/06/cannonball1a396b.png" alt="cannonball1a396b.png"></p><p><br></p><h4 id="2-2-2-ShotTracker-Class"><a href="#2-2-2-ShotTracker-Class" class="headerlink" title="2.2.2 ShotTracker Class"></a>2.2.2 ShotTracker Class</h4><p>&ensp;&ensp;The next thing we need is a graphical object that acts like a cannonball. We can use our existing Projectile class to model the flight of a cannonball, but a Projectile is not a graphics object; we can’t draw it in the window. On the other hand, a Circle is a good candidate for the graphical representation of the cannonball, but it does not know how to model projectile flight. What we really want is something that has elements of both. We can create this new hybrid circle-projectile by defining a suitable class for it. Let’s call it a ShotTracker.</p><p>&ensp;&ensp;Our Shot Tracker will contain both a Projectile and a Circle. Its job is to make sure that these instance variables stay in sync with each other.</p><p>&ensp;&ensp;Notice how the parameters provide all of the information needed to create both a Projectile and a Circle, which are stored in the instance variables proj and marker, respectively. I used the name marker because the circle is graphically marking the projectile’s current location. I chose the radius 3 because it shows up nicely in the animation. Realistically, a 3-meter radius would be way too large for an actual cannonball. Now that we have a suitable projectile and circle, we just need to ensure that whenever an update occurs, both the projectile and the position of the circle are modified appropriately. We can do that by giving our ShotTracker an update method that handles both pieces. Updating the Projectile object is a simple matter of calling its own update method with the appropriate time interval. For the circle, we calculate the distance it must move in the x and y directions to put the center of the circle where the updated projectile is located.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class ShotTracker(object):</span><br><span class="line">    def __init__(self, win, angle, velocity, height):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        win is the GraphWin to display the shot. angle, velocity,</span><br><span class="line">        and height are initial projectile parameters.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.proj = Projectile(angle, velocity, height)</span><br><span class="line">        self.marker = Circle(Point(0, height), 3)</span><br><span class="line">        self.marker.setFill(&quot;red&quot;)</span><br><span class="line">        self.marker.setOutline(&quot;red&quot;)</span><br><span class="line">        self.marker.draw(win)</span><br><span class="line"></span><br><span class="line">    def update(self, dt):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Move the shot dt seconds farther along its flight</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # update the projectile</span><br><span class="line">        self.proj.update(dt)</span><br><span class="line"></span><br><span class="line">        # move the circle to the new projectile location</span><br><span class="line">        center = self.marker.getCenter()</span><br><span class="line">        dx = self.proj.getX() - center.getX()</span><br><span class="line">        dy = self.proj.getY() - center.getY()</span><br><span class="line">        self.marker.move(dx, dy)</span><br><span class="line"></span><br><span class="line">    def getX(self):</span><br><span class="line">        return self.proj.getX()</span><br><span class="line"></span><br><span class="line">    def getY(self):</span><br><span class="line">        return self.proj.getY()</span><br><span class="line"></span><br><span class="line">    def getMaxHeight(self):</span><br><span class="line">        return self.proj.getMaxHeight()</span><br><span class="line"></span><br><span class="line">    def undraw(self):</span><br><span class="line">        self.marker.undraw()</span><br></pre></td></tr></table></figure><h4 id="2-2-3-Creating-a-Button-Class"><a href="#2-2-3-Creating-a-Button-Class" class="headerlink" title="2.2.3 Creating a Button Class"></a>2.2.3 Creating a Button Class</h4><p>&ensp;&ensp;Our buttons will support the following methods:</p><ul><li><strong>constructor</strong> Creates a button in a window. We will have to specify the window in which the button will be displayed, the location/size of the button, and the label that will be on the button.</li><li><strong>activate</strong> Sets the state of the button to active.</li><li><strong>deactivate</strong> Sets the state of the button to inactive.</li><li><strong>clicked</strong> Indicates whether the button was clicked. If the button is active, this method will determine if the point clicked is inside the button region. The point will have to be sent as a parameter to the method.</li><li><strong>getLabel</strong> Returns the label string of the button. This is provided so that we can identify a particular button.<br>Here’s the code:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Button:</span><br><span class="line">    def __init__(self, win, center, width, height, label):</span><br><span class="line"></span><br><span class="line">        w,h = width/2.0, height/2.0</span><br><span class="line">        x = center.getX()</span><br><span class="line">        y = center.getY()</span><br><span class="line">        self.xmax, self.xmin = x + w, x - w</span><br><span class="line">        self.ymax, self.ymin = y + h, y - h</span><br><span class="line">        p1 = Point(self.xmin, self.ymin)</span><br><span class="line">        p2 = Point(self.xmax, self.ymax)</span><br><span class="line">        self.rect = Rectangle(p1, p2)</span><br><span class="line">        self.rect.setFill(&apos;gray&apos;)</span><br><span class="line">        self.rect.draw(win)</span><br><span class="line">        self.label = Text(center, label)</span><br><span class="line">        self.label.draw(win)</span><br><span class="line">        self.deactivate()</span><br><span class="line"></span><br><span class="line">    def clicked(self, p):</span><br><span class="line">        return (self.active and self.xmin &lt;= p.getX() &lt;= self.xmax and self.ymin &lt;= p.getY() &lt;= self.ymax)</span><br><span class="line"></span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label.getText()</span><br><span class="line"></span><br><span class="line">    def activate(self):</span><br><span class="line">        self.label.setFill(&apos;black&apos;)</span><br><span class="line">        self.rect.setWidth(2)</span><br><span class="line">        self.active = True</span><br><span class="line"></span><br><span class="line">    def deactivate(self):</span><br><span class="line">        self.label.setFill(&quot;gray&quot;)</span><br><span class="line">        self.rect.setWidth(1)</span><br><span class="line">        self.active = False</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-4-Creating-an-Input-Dialog"><a href="#2-2-4-Creating-an-Input-Dialog" class="headerlink" title="2.2.4 Creating an Input Dialog"></a>2.2.4 Creating an Input Dialog</h4><p>&ensp;&ensp;Before we actually put a cannonball in flight, we’ll need to get the projectile parameters angle, velocity, and initial height from the user. We could do this using input, just as in the original program. But as long as we’re designing a graphical interface, we may as well handle the input in a more graphical fashion as well. A common way of getting user input in a GUI is to use a dialog box. For example, in Chapter 5 I discussed using pre-built system dialogs that allow users to select file names. Using the graphics library, we can easily create our own simple dialogs to get information from the user. A dialog box is a sort of miniGUI that serves as an independent component of a larger program. Something like Figure 10.5 will do the trick. The user can change the input values and select either “Fire!” to launch the cannonball or “Quit” to exit the program. As you can see, this is just a Graph Win containing a few Text, Entry, and Button objects.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class InputDialog:</span><br><span class="line">    def __init__(self, angle, vel, height):</span><br><span class="line"></span><br><span class="line">        self.win = GraphWin(&quot;Initial Values&quot;, 200, 300)</span><br><span class="line">        win = self.win</span><br><span class="line">        win.setCoords(0, 5.5, 4, .5)</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 1), &quot;Angle&quot;).draw(win)</span><br><span class="line">        self.angle = Entry(Point(3, 1), 5).draw(win)</span><br><span class="line">        self.angle.setText(str(angle))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 2), &quot;Velocity&quot;).draw(win)</span><br><span class="line">        self.vel = Entry(Point(3, 2), 5).draw(win)</span><br><span class="line">        self.vel.setText(str(vel))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 3), &quot;Height&quot;).draw(win)</span><br><span class="line">        self.height = Entry(Point(3, 3), 5).draw(win)</span><br><span class="line">        self.height.setText(str(height))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 4), &quot;MaxHeight&quot;).draw(win)</span><br><span class="line">        self.maxheight = Entry(Point(3, 4), 5).draw(win)</span><br><span class="line"></span><br><span class="line">        self.fire = Button(win, Point(1, 5), 1.25, .5, &quot;Fire!&quot;)</span><br><span class="line">        self.fire.activate()</span><br><span class="line"></span><br><span class="line">        self.quit = Button(win, Point(3, 5), 1.25, .5, &quot;Quit&quot;)</span><br><span class="line">        self.quit.activate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def interact(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        wait for user to click Quit or Fire button</span><br><span class="line">        Returns a string indicating which button was clicked</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            pt = self.win.getMouse()</span><br><span class="line">            if self.quit.clicked(pt):</span><br><span class="line">                return &quot;Quit&quot;</span><br><span class="line">            if self.fire.clicked(pt):</span><br><span class="line">                return &quot;Fire!&quot;</span><br><span class="line"></span><br><span class="line">    def getValues(self):</span><br><span class="line">        a = float(self.angle.getText())</span><br><span class="line">        v = float(self.vel.getText())</span><br><span class="line">        h = float(self.height.getText())</span><br><span class="line"></span><br><span class="line">        return a, v, h</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.win.close()</span><br></pre></td></tr></table></figure></p><h4 id="2-2-5-The-Main-Event-Loop"><a href="#2-2-5-The-Main-Event-Loop" class="headerlink" title="2.2.5 The Main Event Loop"></a>2.2.5 The Main Event Loop</h4><p>&ensp;&ensp;Now we are ready to finish our program by filling in the main event loop. Here’s the completed main function:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    # create animation window</span><br><span class="line">    win = GraphWin(&quot;Projectile Animation&quot;, 640, 480, autoflush = False)</span><br><span class="line">    win.setCoords(-10, -10, 210, 155)</span><br><span class="line"></span><br><span class="line">    # draw baseline</span><br><span class="line">    Line(Point(-10, 0), Point(210, 0)).draw(win)</span><br><span class="line">    # draw labeled tricks every 50 meters</span><br><span class="line">    for x in range(0, 210, 50):</span><br><span class="line">        Text(Point(x, -5), str(x)).draw(win)</span><br><span class="line">        Line(Point(x, 0), Point(x, 2)).draw(win)</span><br><span class="line"></span><br><span class="line">    angle, vel, height = 45.0, 40.0, 2.0</span><br><span class="line">    inputwin = InputDialog(angle, vel, height)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        # interact with the user</span><br><span class="line"></span><br><span class="line">        choice = inputwin.interact()</span><br><span class="line">        #inputwin.close()</span><br><span class="line"></span><br><span class="line">        if choice == &quot;Quit&quot;:  # loop exit break</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        angle, vel, height = inputwin.getValues()</span><br><span class="line">        shot = ShotTracker(win, angle, vel, height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        while 0 &lt;= shot.getY() &lt;=155 and -10 &lt; shot.getX() &lt;= 210:</span><br><span class="line">            shot.update(1 / 50)</span><br><span class="line">            update(50)</span><br><span class="line">            inputwin.maxheight.setText(str(shot.getMaxHeight()))</span><br><span class="line"></span><br><span class="line">        #inputwin.close()</span><br><span class="line"></span><br><span class="line">    win.close()</span><br></pre></td></tr></table></figure></p><p><strong>The completed program looks like this</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">from math import *</span><br><span class="line">import math</span><br><span class="line">from turtle import *</span><br><span class="line">from graphics import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Projectile(object):</span><br><span class="line">    def __init__(self, angle, velocity, height):</span><br><span class="line">        self.xpos = 0.0</span><br><span class="line">        self.ypos = height</span><br><span class="line">        theta = math.pi * angle / 180</span><br><span class="line">        self.xvel = velocity * cos(theta)</span><br><span class="line">        self.yvel = velocity * sin(theta)</span><br><span class="line">        self.MaxHeight = self.ypos   #保存最大高度</span><br><span class="line"></span><br><span class="line">    def update(self, time):</span><br><span class="line">        self.xpos = self.xpos + time * self.xvel</span><br><span class="line">        yvel1 = self.yvel - 9.8 * time</span><br><span class="line">        self.ypos = self.ypos + time * (self.yvel + yvel1) / 2.0</span><br><span class="line">        self.yvel = yvel1</span><br><span class="line"></span><br><span class="line">        # 获取最大高度保存到Self.MaxHeight中</span><br><span class="line">        if self.ypos &gt; self.MaxHeight:</span><br><span class="line">            self.MaxHeight = self.ypos</span><br><span class="line"></span><br><span class="line">    def getY(self):</span><br><span class="line">        return self.ypos</span><br><span class="line"></span><br><span class="line">    def getX(self):</span><br><span class="line">        return self.xpos</span><br><span class="line"></span><br><span class="line">    def getMaxHeight(self):</span><br><span class="line">        return self.MaxHeight</span><br><span class="line"></span><br><span class="line"># def getInputs():</span><br><span class="line">#     a = float(input(&quot;Enter the launch angle (in degrees): &quot;))</span><br><span class="line">#     v = float(input(&quot;Enter the initial velocity (in meters/sec): &quot;))</span><br><span class="line">#     h = float(input(&quot;Enter the initial height (in meters): &quot;))</span><br><span class="line">#     t = float(input(&quot;Enter the time interval between position calculations: &quot;))</span><br><span class="line">#</span><br><span class="line">#     return a, v, h, t</span><br><span class="line"></span><br><span class="line">class ShotTracker(object):</span><br><span class="line">    def __init__(self, win, angle, velocity, height):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        win is the GraphWin to display the shot. angle, velocity,</span><br><span class="line">        and height are initial projectile parameters.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.proj = Projectile(angle, velocity, height)</span><br><span class="line">        self.marker = Circle(Point(0, height), 3)</span><br><span class="line">        self.marker.setFill(&quot;red&quot;)</span><br><span class="line">        self.marker.setOutline(&quot;red&quot;)</span><br><span class="line">        self.marker.draw(win)</span><br><span class="line"></span><br><span class="line">    def update(self, dt):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Move the shot dt seconds farther along its flight</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # update the projectile</span><br><span class="line">        self.proj.update(dt)</span><br><span class="line"></span><br><span class="line">        # move the circle to the new projectile location</span><br><span class="line">        center = self.marker.getCenter()</span><br><span class="line">        dx = self.proj.getX() - center.getX()</span><br><span class="line">        dy = self.proj.getY() - center.getY()</span><br><span class="line">        self.marker.move(dx, dy)</span><br><span class="line"></span><br><span class="line">    def getX(self):</span><br><span class="line">        return self.proj.getX()</span><br><span class="line"></span><br><span class="line">    def getY(self):</span><br><span class="line">        return self.proj.getY()</span><br><span class="line"></span><br><span class="line">    def getMaxHeight(self):</span><br><span class="line">        return self.proj.getMaxHeight()</span><br><span class="line"></span><br><span class="line">    def undraw(self):</span><br><span class="line">        self.marker.undraw()</span><br><span class="line"></span><br><span class="line">class Button:</span><br><span class="line">    def __init__(self, win, center, width, height, label):</span><br><span class="line"></span><br><span class="line">        w,h = width/2.0, height/2.0</span><br><span class="line">        x = center.getX()</span><br><span class="line">        y = center.getY()</span><br><span class="line">        self.xmax, self.xmin = x + w, x - w</span><br><span class="line">        self.ymax, self.ymin = y + h, y - h</span><br><span class="line">        p1 = Point(self.xmin, self.ymin)</span><br><span class="line">        p2 = Point(self.xmax, self.ymax)</span><br><span class="line">        self.rect = Rectangle(p1, p2)</span><br><span class="line">        self.rect.setFill(&apos;gray&apos;)</span><br><span class="line">        self.rect.draw(win)</span><br><span class="line">        self.label = Text(center, label)</span><br><span class="line">        self.label.draw(win)</span><br><span class="line">        self.deactivate()</span><br><span class="line"></span><br><span class="line">    def clicked(self, p):</span><br><span class="line">        return (self.active and self.xmin &lt;= p.getX() &lt;= self.xmax and self.ymin &lt;= p.getY() &lt;= self.ymax)</span><br><span class="line"></span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label.getText()</span><br><span class="line"></span><br><span class="line">    def activate(self):</span><br><span class="line">        self.label.setFill(&apos;black&apos;)</span><br><span class="line">        self.rect.setWidth(2)</span><br><span class="line">        self.active = True</span><br><span class="line"></span><br><span class="line">    def deactivate(self):</span><br><span class="line">        self.label.setFill(&quot;gray&quot;)</span><br><span class="line">        self.rect.setWidth(1)</span><br><span class="line">        self.active = False</span><br><span class="line"></span><br><span class="line">class InputDialog:</span><br><span class="line">    def __init__(self, angle, vel, height):</span><br><span class="line">        self.win = GraphWin(&quot;Initial Values&quot;, 200, 300)</span><br><span class="line">        win = self.win</span><br><span class="line">        win.setCoords(0, 5.5, 4, .5)</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 1), &quot;Angle&quot;).draw(win)</span><br><span class="line">        self.angle = Entry(Point(3, 1), 5).draw(win)</span><br><span class="line">        self.angle.setText(str(angle))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 2), &quot;Velocity&quot;).draw(win)</span><br><span class="line">        self.vel = Entry(Point(3, 2), 5).draw(win)</span><br><span class="line">        self.vel.setText(str(vel))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 3), &quot;Height&quot;).draw(win)</span><br><span class="line">        self.height = Entry(Point(3, 3), 5).draw(win)</span><br><span class="line">        self.height.setText(str(height))</span><br><span class="line"></span><br><span class="line">        Text(Point(1, 4), &quot;MaxHeight&quot;).draw(win)</span><br><span class="line">        self.maxheight = Entry(Point(3, 4), 5).draw(win)</span><br><span class="line"></span><br><span class="line">        self.fire = Button(win, Point(1, 5), 1.25, .5, &quot;Fire!&quot;)</span><br><span class="line">        self.fire.activate()</span><br><span class="line"></span><br><span class="line">        self.quit = Button(win, Point(3, 5), 1.25, .5, &quot;Quit&quot;)</span><br><span class="line">        self.quit.activate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def interact(self):</span><br><span class="line">        &quot;&quot;&quot; wait for user to click Quit or Fire button</span><br><span class="line">        Returns a string indicating which button was clicked</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            pt = self.win.getMouse()</span><br><span class="line">            if self.quit.clicked(pt):</span><br><span class="line">                return &quot;Quit&quot;</span><br><span class="line">            if self.fire.clicked(pt):</span><br><span class="line">                return &quot;Fire!&quot;</span><br><span class="line"></span><br><span class="line">    def getValues(self):</span><br><span class="line">        a = float(self.angle.getText())</span><br><span class="line">        v = float(self.vel.getText())</span><br><span class="line">        h = float(self.height.getText())</span><br><span class="line"></span><br><span class="line">        return a, v, h</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.win.close()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # create animation window</span><br><span class="line">    win = GraphWin(&quot;Projectile Animation&quot;, 640, 480, autoflush = False)</span><br><span class="line">    win.setCoords(-10, -10, 210, 155)</span><br><span class="line"></span><br><span class="line">    # draw baseline</span><br><span class="line">    Line(Point(-10, 0), Point(210, 0)).draw(win)</span><br><span class="line">    # draw labeled tricks every 50 meters</span><br><span class="line">    for x in range(0, 210, 50):</span><br><span class="line">        Text(Point(x, -5), str(x)).draw(win)</span><br><span class="line">        Line(Point(x, 0), Point(x, 2)).draw(win)</span><br><span class="line"></span><br><span class="line">    angle, vel, height = 45.0, 40.0, 2.0</span><br><span class="line">    inputwin = InputDialog(angle, vel, height)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        # interact with the user</span><br><span class="line"></span><br><span class="line">        choice = inputwin.interact()</span><br><span class="line">        #inputwin.close()</span><br><span class="line"></span><br><span class="line">        if choice == &quot;Quit&quot;:  # loop exit break</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        angle, vel, height = inputwin.getValues()</span><br><span class="line">        shot = ShotTracker(win, angle, vel, height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        while 0 &lt;= shot.getY() &lt;=155 and -10 &lt; shot.getX() &lt;= 210:</span><br><span class="line">            shot.update(1 / 50)</span><br><span class="line">            update(50)</span><br><span class="line">            inputwin.maxheight.setText(str(shot.getMaxHeight()))</span><br><span class="line"></span><br><span class="line">        #inputwin.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    win.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2019/05/19/moveb87b9.gif" alt="moveb87b9.gif"></p><p><strong>Appendix</strong>:</p><ul><li>The graphics library summary: <a href="https://blog.csdn.net/winycg/article/details/78066044?locationNum=4&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/winycg/article/details/78066044?locationNum=4&amp;fps=1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是我们老师布置的作业，以下是我的一些总结。&lt;/p&gt;
&lt;h2 id=&quot;1-Programming-Exercise&quot;&gt;&lt;a href=&quot;#1-Programming-Exercise&quot; class=&quot;headerlink&quot; title=&quot;1. Programming Exercise&quot;&gt;&lt;/a&gt;1. Programming Exercise&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Modify the cannonball simulation from the chapter so that it also calculates the maximum height achieved by the cannonball.
    
    </summary>
    
      <category term="Python Exercise" scheme="http://looby.coding.me/betterming/categories/Python-Exercise/"/>
    
    
      <category term="graphics" scheme="http://looby.coding.me/betterming/tags/graphics/"/>
    
  </entry>
  
  <entry>
    <title>连续子向量中最大和的四种算法</title>
    <link href="http://looby.coding.me/betterming/post/7e551515.html"/>
    <id>http://looby.coding.me/betterming/post/7e551515.html</id>
    <published>2018-10-15T04:00:00.000Z</published>
    <updated>2019-05-19T12:45:34.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述：来自一维的模式识别"><a href="#一、问题描述：来自一维的模式识别" class="headerlink" title="一、问题描述：来自一维的模式识别"></a>一、问题描述：来自一维的模式识别</h1><p>输入与输出</p><ul><li>输入：具有n个浮点数的向量x</li><li>输出：输入向量的任何连续子向量中的最大和。假定输出的最大和为非负数。<a id="more"></a><h1 id="二、四种算法与分析"><a href="#二、四种算法与分析" class="headerlink" title="二、四种算法与分析"></a>二、四种算法与分析</h1></li></ul><ol><li>暴力法：</li></ol><ul><li>基本思路：<br>对所有满足0 ≤ i ≤ j &lt; n的整数对(i,j)进行检查，判断x[i..j]的总和Sum(x[i..j])是否最大？其中Sum(x[i..j])</li><li>该算法时间复制度为O(n^3)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">float alg1()</span><br><span class="line">&#123;</span><br><span class="line">int i, j, k;</span><br><span class="line">float sum, maxsofar = 0;</span><br><span class="line">for (i = 0; i &lt; n; i++)</span><br><span class="line">for (j = i; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum = 0;</span><br><span class="line">for (k = i; k &lt;= j; k++)</span><br><span class="line">sum += x[k];</span><br><span class="line">if (sum &gt; maxsofar)</span><br><span class="line">maxsofar = sum;</span><br><span class="line">&#125;</span><br><span class="line">return maxsofar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>暴力法的一些简化<br>基本思路：</li></ol><ul><li>对所有满足0 ≤ i ≤ j &lt; n的整数对(i,j)进行检查，判断x[i..j]的总和sum(x[i..j])是否最大？</li><li>如何计算sum(x[i..j])？<ul><li>sum(x[i..j]) = sum(x[i..j-1])+x[j]</li><li>sum(x[i..j]) = sum(x[0..j])-sum(x[0..i-1])</li></ul></li><li>该算法时间复制度为O(n^2)<br>由以上两种计算sum(x[i..j])，可以得到两种算法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//第一种</span><br><span class="line">float alg2()</span><br><span class="line">&#123;</span><br><span class="line">int i, j, k;</span><br><span class="line">float sum, maxsofar = 0;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = 0;</span><br><span class="line">for (j = i; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum += x[j];</span><br><span class="line">if(sum &gt; maxsofar)</span><br><span class="line">maxsofar = sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxsofar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二种</span><br><span class="line">float cumvec[MAXN + 1];</span><br><span class="line">float alg2b()</span><br><span class="line">&#123;</span><br><span class="line">int i, j, k;</span><br><span class="line">float *cumarr, sum, maxsofar = 0;</span><br><span class="line">cumarr = cumvec + 1;</span><br><span class="line">cumarr[-1] = 0;</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; n; i++)</span><br><span class="line">cumarr[i] = cumarr[i - 1] = x[i];</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j = i; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum = cumarr[j] - cumarr[i - 1];</span><br><span class="line">if(sum &gt; maxsofar)</span><br><span class="line">maxsofar = sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxsofar;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2019/02/06/002802166a8db3e3f21b2.png" alt="002802166a8db3e3f21b2.png"></p><ol start="3"><li>分治法</li></ol><ul><li>分治原理：<br>要解决规模为n的问题，可递归地解决两个规模近似为n/2的子问题，然后对它们的答案进行合并以得到整个问题的答案。</li><li>初始问题：找出大小为n的向量x中连续子向量中的最大和mx</li></ul><ul><li>Step1:将向量x划分为两个大小近似相等的子向量a和b</li><li>Step2:分别递归地找出a、b中连续子向量中的最大和为ma,mb</li><li>Step3:mx=max(ma,mb,mc)，其中mc=max(sum(x[i..n/2-1]))<br>   +max(sum(x[n/2..j]))</li><li>该算法时间复制度为O(nlogn)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">float maxfun(float a, float b)</span><br><span class="line">&#123;</span><br><span class="line">return a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define max(a, b) maxfun(a, b)</span><br><span class="line"></span><br><span class="line">float alg3()</span><br><span class="line">&#123;</span><br><span class="line">return recmax(0, n-1);</span><br><span class="line">&#125;</span><br><span class="line">float recmax(int l, int u)</span><br><span class="line">&#123;</span><br><span class="line">int i, m;</span><br><span class="line">float lmax, rmax, sum;</span><br><span class="line">    if (l &gt; u)  /* zero elements */</span><br><span class="line">return 0;</span><br><span class="line">    if (l == u)  /* one element */</span><br><span class="line">return max(0, x[l]);</span><br><span class="line">    m = (l+u) / 2;</span><br><span class="line">// find max crossing to left</span><br><span class="line">    lmax = sum = 0;</span><br><span class="line">    for(i = m; i &gt;= l; i--)&#123;</span><br><span class="line">    sum += x[i];</span><br><span class="line">    if(sum &gt; lmax)</span><br><span class="line">    lmax = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    rmax = sum = 0;</span><br><span class="line">    for(i = m+1; i &lt;= u; i++)&#123;</span><br><span class="line">    sum += x[i];</span><br><span class="line">    if(sum &gt; rmax)</span><br><span class="line">    rmax = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    return max(lmax + rmax, max(recmax(l, m),recmax(m+1, u)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://miao.su/images/2019/02/06/6e66abc1b99eb1ca53f5b.png" alt="6e66abc1b99eb1ca53f5b.png"></p><ol start="4"><li>扫描法</li></ol><ul><li>初始问题：找出大小为n的向量x中连续子向量中的最大和mx</li><li>利用分治原理</li><li>假设现在已解决了大小为(i-1)的向量x[0..i-2]的问题，那么如何计算大小为i的向量x[0..i-1]的问题呢？<ul><li>大小为i的向量x[0..i-1]中连续子向量中的最大和mx[0..i-1]<br>  =max(mx[0..i-2],maxendinghere[i-1])<br>其中maxendinghere[i-1]表示向量x[0..i-1]中结束位置为(i-1)的连续子向量的最大和，即maxendinghere[i-1]=max(sum(x[0..i-1]), sum(x[1..i-1]), … , sum(x[i-1..i-1]))。假定maxendinghere≥0.</li></ul></li><li>该算法时间复制度为O(n)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 第一种</span><br><span class="line">float alg4()</span><br><span class="line">&#123;   int i;</span><br><span class="line">    float maxsofar = 0, maxendinghere = 0;</span><br><span class="line">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        maxendinghere += x[i];</span><br><span class="line">        if (maxendinghere &lt; 0)</span><br><span class="line">            maxendinghere = 0;</span><br><span class="line">        if (maxsofar &lt; maxendinghere)</span><br><span class="line">            maxsofar = maxendinghere;</span><br><span class="line">    &#125;</span><br><span class="line">return maxsofar;</span><br><span class="line">&#125;</span><br><span class="line">//第二种</span><br><span class="line">#define maxmac(a, b) ((a) &gt; (b) ? (a) : (b) )</span><br><span class="line">float alg4b()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    float maxsofar = 0, maxendinghere = 0;</span><br><span class="line">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        maxendinghere += x[i];</span><br><span class="line">        maxendinghere = maxmac(maxendinghere, 0);</span><br><span class="line">       maxsofar = maxmac(maxsofar, maxendinghere);&#125;</span><br><span class="line">    return maxsofar;</span><br><span class="line">&#125;</span><br><span class="line">//第三种</span><br><span class="line">float maxfun(float a, float b)</span><br><span class="line">&#123;</span><br><span class="line">return a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">float alg4c()</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">    float maxsofar = 0, maxendinghere = 0;</span><br><span class="line">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        maxendinghere += x[i];</span><br><span class="line">        maxendinghere = maxfun(maxendinghere, 0);</span><br><span class="line">        maxsofar = maxfun(maxsofar, maxendinghere);&#125;</span><br><span class="line">    return maxsofar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2019/02/06/c5842130e737d8e40b19b.png" alt="c5842130e737d8e40b19b.png"></p><p><img src="https://miao.su/images/2019/02/06/69187e7d0998d2283145d.png" alt="69187e7d0998d2283145d.png"></p><p><strong>实际运行时间对比</strong><br><img src="https://miao.su/images/2019/02/06/b3a83625ae2d718055723.png" alt="b3a83625ae2d718055723.png"></p><p><strong>这篇文章是对老师上课内容的一次回顾</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、问题描述：来自一维的模式识别&quot;&gt;&lt;a href=&quot;#一、问题描述：来自一维的模式识别&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述：来自一维的模式识别&quot;&gt;&lt;/a&gt;一、问题描述：来自一维的模式识别&lt;/h1&gt;&lt;p&gt;输入与输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：具有n个浮点数的向量x&lt;/li&gt;
&lt;li&gt;输出：输入向量的任何连续子向量中的最大和。假定输出的最大和为非负数。
    
    </summary>
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://looby.coding.me/betterming/tags/Algorithm/"/>
    
      <category term="分治法" scheme="http://looby.coding.me/betterming/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="扫描法" scheme="http://looby.coding.me/betterming/tags/%E6%89%AB%E6%8F%8F%E6%B3%95/"/>
    
      <category term="时间复杂度" scheme="http://looby.coding.me/betterming/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
</feed>
